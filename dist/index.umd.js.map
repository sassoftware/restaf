{"version":3,"file":"index.umd.js","sources":["../src/commonHandler.js","../src/updateTableRows.js","../src/prepFormData.js","../src/fetchTableRows.js","../src/cellEdit.js","../src/text2Float.js","../src/scrollTable.js","../src/setup.js"],"sourcesContent":["/*\r\n * Copyright © 2022, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @description Run init, main or term handlers\r\n * @async\r\n * @module commonHandler\r\n * @category restafedit/core\r\n * @param {string} type   - type of exit (init|main|term)\r\n * @param {rowObject} data        - rowObject\r\n * @param {number} rowIndex    - client-side Row Index\r\n * @param {appEnv} appEnv      - app Environment from setup\r\n * @returns {promise}     - [data, status]\r\n * @example\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function commonHandler (type, data, rowIndex, appEnv) {\r\n  const { handlers } = appEnv.appControl.editControl;\r\n  if (handlers[type] == null) {\r\n    return [data, { statusCode: 0, msg: null }];\r\n  } else {\r\n    const [newDataRow, status] = await handlers[type](data, rowIndex, appEnv, type);\r\n    return [newDataRow, status];\r\n  }\r\n};\r\nexport default commonHandler;\r\n","import { casUpdateData } from '@sassoftware/restaflib';\r\n/**\r\n * @description Update the row on the server\r\n * @async\r\n * @module updateTableRows\r\n * @category restafedit/core\r\n * @param {rowObject} data  - data as a rowObject\r\n * @param {appEnv} appEnv   - app Environment object from setup\r\n * @returns {promise}       - key is completion code\r\n * @example\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function updateTableRows (data, appEnv) {\r\n  let result;\r\n  if (appEnv.source === 'cas') {\r\n    result = await iupdateCasTable(data, appEnv);\r\n  } else {\r\n    result = await iupdateComputeTable(data, appEnv);\r\n  }\r\n  return result;\r\n}\r\n\r\nasync function iupdateCasTable (data, appEnv) {\r\n  const { store, session } = appEnv;\r\n  const { table, byvars } = appEnv.appControl.dataControl;\r\n  const columns = appEnv.state.columns;\r\n  const t = {};\r\n\r\n  if (byvars === null || byvars.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  for (const k in data) {\r\n    if (k !== '_index_' && columns[k].custom === false) {\r\n      t[k] = data[k];\r\n    };\r\n  };\r\n\r\n  const w = {};\r\n  byvars.forEach((k) => {\r\n    w[k] = t[k];\r\n  });\r\n  const payload = {\r\n    table,\r\n    data : t,\r\n    where: w\r\n  };\r\n\r\n  await casUpdateData(store, session, payload);\r\n  return { statusCode: 0, msg: 'Save successful' };\r\n}\r\n\r\nasync function iupdateComputeTable (data, appEnv) {\r\n  const { store, session } = appEnv;\r\n  const { table, byvars } = appEnv.appControl.dataControl;\r\n\r\n  if (byvars === null || byvars.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  let src =\r\n    `proc sql; update ${table.libref}.${table.name}`;\r\n  let set = 'SET ';\r\n  let comma = ' ';\r\n  for (const k in data) {\r\n    set = set + comma + k + '=' + value2String(data[k]);\r\n    comma = ', ';\r\n  };\r\n  src = src + ' ' + set;\r\n  let w = ' WHERE ';\r\n  let andBit = ' ';\r\n\r\n  byvars.forEach((k) => {\r\n    w = w + andBit + k + '=' + value2String(data[k]);\r\n    andBit = 'AND ';\r\n  });\r\n  src = src + ' ' + w + ';run;';\r\n  const asrc = src.split(/\\r?\\n/);\r\n  console.log(asrc);\r\n\r\n  const payload = {\r\n    data: { code: asrc }\r\n  };\r\n\r\n  const job = await store.apiCall(session.links('execute'), payload);\r\n  const qs = {\r\n    qs: {\r\n      newState: 'Completed',\r\n      timeout : 1\r\n    }\r\n  };\r\n\r\n  // eslint-disable-next-line no-unused-vars\r\n  const status = await store.jobState(job, qs);\r\n  const c = (status.data === 'completed' ? 0 : 1);\r\n  return { statusCode: c, msg: status.data };\r\n}\r\n\r\nfunction value2String (value) {\r\n  let valueString;\r\n  if (value == null) {\r\n    valueString = '.';\r\n  } else if (typeof value === 'string') {\r\n    valueString = JSON.stringify(value);\r\n  } else {\r\n    valueString = value.toString();\r\n  }\r\n  return valueString;\r\n}\r\n\r\nexport default updateTableRows;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/*\r\n* output\r\n* extended columns and data ready for use in dataform and table\r\n*/\r\nimport commonHandler from './commonHandler';\r\n/**\r\n * @description reduce fetch results\r\n * @private\r\n * @async\r\n * @module prepFormData\r\n * @param {object} result - result from casFetchRow(rows and schema)\r\n * @param {object} appEnv - app Environment from setup\r\n * @returns {promise}     - {columns: eColumns, rowsObject: newRows}\r\n */\r\nasync function prepFormData (result, appEnv) {\r\n  const { schema, rows } = result;\r\n  const customColumns = appEnv.appControl.dataControl.customColumns;\r\n\r\n  const makeRowObject = (columns, row) => {\r\n    const rowObj = {};\r\n    row.forEach((r, i) => {\r\n      const s = columns[i];\r\n      const name = s.Column.toLowerCase();\r\n      if (s.Label == null) {\r\n        s.Label = s.Column;\r\n      }\r\n      rowObj[name] = r;\r\n    });\r\n\r\n    if (customColumns != null) {\r\n      for (const k in customColumns) {\r\n        const c = customColumns[k];\r\n        const name = c.Column.toLowerCase();\r\n        rowObj[name] = c.value;\r\n      }\r\n    }\r\n    return rowObj;\r\n  };\r\n\r\n  const newRows = [];\r\n  for (let i = 0; i < rows.length; i++) {\r\n    const t = makeRowObject(schema, rows[i]);\r\n\r\n    const [t1, status] = await commonHandler('init', t, i, appEnv);\r\n\r\n    if (status.code !== 0) {\r\n      console.log(JSON.stringify(status, null, 4));\r\n    }\r\n    newRows.push(t1);\r\n  };\r\n\r\n  // extend column and make it an object\r\n  const eColumns = {};\r\n  schema.forEach((s, i) => {\r\n    const name = s.Column.toLowerCase();\r\n    s.name = name;\r\n    s.Label = (s.Label == null || s.Label.length === 0) ? s.Column : s.Label;\r\n    s.custom = false;\r\n    eColumns[name] = s;\r\n  });\r\n\r\n  // add computed columns to the array.\r\n  if (customColumns != null) {\r\n    for (const k in customColumns) {\r\n      const c = { ...customColumns[k] };\r\n      c.name = k;\r\n      c.custom = true;\r\n      eColumns[k] = c;\r\n    }\r\n  }\r\n\r\n  return {\r\n    columns: eColumns,\r\n    data   : newRows\r\n  };\r\n}\r\nexport default prepFormData;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { casFetchRows, computeFetchData } from '@sassoftware/restaflib';\r\n\r\nimport prepFormData from './prepFormData';\r\n/**\r\n * @description Fetch new records based on control argument\r\n * @async\r\n * @module fetchTableRows\r\n * @category restafedit/core\r\n * @param {fetchControl} control - info for records to retrieve\r\n * @param {appEnv} appEnv - appEnv\r\n * @returns {promise}  - { data:data, columns:ecolumns, pagination: pagination}\r\n * @example\r\n *   let control = {from: 10, count:50, format: false};\r\n *   let r = await fetchTableRows(control, appEnv);\r\n *   r is a fetchResult object\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function fetchTableRows (control, appEnv) {\r\n  let result = null;\r\n  if (appEnv.source === 'cas') {\r\n    result = await icasRows(control, appEnv);\r\n  } else {\r\n    result = await icomputeRows(control, appEnv);\r\n  }\r\n  return result;\r\n}\r\n\r\nasync function icasRows (control, appEnv) {\r\n  const { store, session } = appEnv;\r\n  const c = { ...control };\r\n  if (c.table == null) {\r\n    c.table = appEnv.appControl.dataControl.table;\r\n  }\r\n  if (c.where == null) {\r\n    c.where = {};\r\n  }\r\n  if (c.from <= 0 || c.next === -1) {\r\n    return null;\r\n  }\r\n  const r = await casFetchRows(store, session, c);\r\n  let t = null;\r\n  if (r !== null) {\r\n    t = await prepFormData(r.data, appEnv);\r\n\r\n    appEnv.state = {\r\n      modified   : [],\r\n      pagination : { ...r.pagination },\r\n      currentPage: c,\r\n      data       : [],\r\n      columns    : []\r\n    };\r\n    if (appEnv.appControl.dataControl.cachePolicy === true) {\r\n      appEnv.state.data = t.data;\r\n      appEnv.state.columns = t.columns;\r\n    }\r\n    t.pagination = { ...r.pagination };\r\n  }\r\n  return t;\r\n}\r\n\r\nasync function icomputeRows (control, appEnv) {\r\n  const { store, tableSummary } = appEnv;\r\n  const { table } = appEnv.appControl.dataControl;\r\n  const tname = `${table.libref}.${table.name}`.toLowerCase();\r\n  // eslint-disable-next-line prefer-const\r\n  let payload = {\r\n    qs: {\r\n      start : control.from - 1,\r\n      limit : control.count,\r\n      format: (control.format != null) ? false : control.format\r\n    }\r\n  };\r\n  const data = await computeFetchData(store, tableSummary, tname, null, payload);\r\n  debugger;\r\n\r\n  let result = null;\r\n  if (data !== null) {\r\n    result = await prepFormData(data, appEnv);\r\n    appEnv.state = {\r\n      modified   : [],\r\n      pagination : {},\r\n      currentPage: {},\r\n      data       : result.data,\r\n      columns    : result.columns\r\n    };\r\n  }\r\n  return result;\r\n}\r\nexport default fetchTableRows;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport text2Float from './text2Float';\r\nimport commonHandler from './commonHandler';\r\nimport updateTableRows from './updateTableRows';\r\n\r\n/**\r\n * @description Process edit of a cell and optionally save the data\r\n * @async\r\n * @module cellEdit\r\n * @category restafedit/core\r\n * @param {string} name     - name of the field (lower case)\r\n * @param {*} value         - the new value for name field\r\n * @param {number} rowIndex - row Index ( index in the data array on client)\r\n * @param {rowObject} data  - RowObject for the entire row prior to change\r\n * @param {appEnv} appEnv   - app Environment from setup\r\n * @returns {promise}       - {data: updated data, status: status }\r\n * @example\r\n * data schema {column1: value, column2, value,...}\r\n * status schema {statusCode: 0|1|2, msg: some string}\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function cellEdit (name, value, rowIndex, data, appEnv) {\r\n  /* do not modify the data directly. caller will probably do a setState */\r\n  let newDataRow = (data !== null) ? { ...data } : { ...appEnv.state.data[rowIndex] };\r\n  const columns = appEnv.state.columns;\r\n  const { handlers, autoSave } = appEnv.appControl.editControl;\r\n\r\n  newDataRow[name] = text2Float(value, columns[name]);\r\n  let status = { statusCode: 0, msg: '' };\r\n\r\n  if (handlers[name] != null) {\r\n    const r = await handlers[name](newDataRow, name, rowIndex, appEnv);\r\n    newDataRow = r[0];\r\n    status = r[1];\r\n    if (status.statusCode === 2) {\r\n      return { data: r[0], status };\r\n    }\r\n  }\r\n  let r = await commonHandler('main', newDataRow, rowIndex, appEnv);\r\n  if (autoSave === true) {\r\n    r = await commonHandler('term', r[0], rowIndex, appEnv);\r\n    status = r[1];\r\n    if (status.statusCode === 2) {\r\n      return { data: r[0], status };\r\n    }\r\n\r\n    await updateTableRows(newDataRow, appEnv);\r\n  }\r\n  newDataRow = r[0];\r\n  status.msg = status.msg + ' / ' + r[1];\r\n\r\n  if (appEnv.appControl.dataControl.cachePolicy === true) {\r\n    appEnv.state.data[rowIndex] = newDataRow;\r\n  }\r\n\r\n  return ({ data: newDataRow, status });\r\n}\r\nexport default cellEdit;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nfunction text2Float (value, f) {\r\n  let svalue = value;\r\n  if (typeof svalue === 'string' && (f.Type === 'decimal' || f.Type === 'number' || f.Type === 'double')) {\r\n    svalue = parseFloat(value * 1.0);\r\n    if (isNaN(value) === true) {\r\n      value = 0;\r\n    }\r\n  }\r\n  return svalue;\r\n}\r\nexport default text2Float;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport fetchTableRows from './fetchTableRows';\r\nimport { computeFetchData } from '@sassoftware/restaflib';\r\nimport prepFormData from './prepFormData';\r\n/**\r\n * @description Simplify scrolling using next|prev|top\r\n * @async\r\n * @module scrollTable\r\n * @category restafedit/core\r\n * @param {string} direction direction(next|prev|first)\r\n * @param {appEnv} appEnv\r\n * @returns {promise}  result ready for display or null if it did not scroll\r\n * @example\r\n *  let r = await scrollTable('next', appEnv);\r\n *\r\n *  if ( r === null) {\r\n *     handle when no data was writtten\r\n *  } else {\r\n *     handle new data\r\n * }\r\n *\r\n * Make sure you handle exceptions that are thrown.\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function scrollTable (direction, appEnv) {\r\n  let fetchResults;\r\n  if (appEnv.source === 'cas') {\r\n    fetchResults = await icasScroll(direction, appEnv);\r\n  } else {\r\n    fetchResults = await icomputeScroll(direction, appEnv);\r\n  }\r\n  return fetchResults;\r\n}\r\n\r\nasync function icasScroll (direction, appEnv) {\r\n  const { initialFetch, table } = appEnv.appControl.dataControl;\r\n  let control;\r\n  if (direction === 'first') {\r\n    control = { ...initialFetch };\r\n    control.table = table;\r\n  } else {\r\n    control = appEnv.state.pagination[direction];\r\n    if (control.next === -1) {\r\n      return null;\r\n    }\r\n  }\r\n  const t = await fetchTableRows(control, appEnv);\r\n  return t;\r\n}\r\n\r\nasync function icomputeScroll (direction, appEnv) {\r\n  const { store, tableSummary } = appEnv;\r\n  const { table } = appEnv.appControl.dataControl;\r\n\r\n  const tname = `${table.libref}.${table.name}`.toLowerCase();\r\n\r\n  // eslint-disable-next-line prefer-const\r\n\r\n  const payload = { qs: { limit: appEnv.appControl.dataControl.initialFetch.count } };\r\n  const data = await computeFetchData(store, tableSummary, tname, direction, payload);\r\n\r\n  let result = null;\r\n  if (data !== null) {\r\n    result = await prepFormData(data, appEnv);\r\n    appEnv.state = {\r\n      modified   : [],\r\n      pagination : {},\r\n      currentPage: {},\r\n      data       : result.data,\r\n      columns    : result.columns\r\n    };\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nexport default scrollTable;\r\n","\r\nimport { initStore } from '@sassoftware/restaf';\r\nimport { casSetup, computeSetup, computeSetupTables } from '@sassoftware/restaflib';\r\n\r\n/**\r\n * @description Setup an Edit session\r\n * @async\r\n * @module setup\r\n * @category restafedit/core\r\n * @param {logonPayload} logonPayload  - information for connecting to Viya\r\n * @param {appControl} appControl      - control information\r\n *\r\n * @returns {promise}  returns appEnv to control the flow\r\n * @alias module: setup\r\n * @example\r\n *  const appEnv = await setup(logonPayload, appControl);\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n *\r\n */\r\n\r\nasync function setup (logonPayload, appControl) {\r\n  const store = initStore();\r\n  let appEnv;\r\n  if (logonPayload.authType == null) {\r\n    logonPayload.authType = 'code';\r\n  }\r\n  const dataControl = appControl.dataControl;\r\n  if (dataControl.source === 'cas') {\r\n    const r = await casSetup(store, logonPayload);\r\n    appEnv = {\r\n      source: dataControl.source,\r\n\r\n      store,\r\n      session  : r.session,\r\n      servers  : r.servers,\r\n      restaflib: null,\r\n      logonPayload,\r\n\r\n      state: {\r\n        modified   : [],\r\n        pagination : {},\r\n        currentPage: {},\r\n        data       : {},\r\n        columns    : {}\r\n      }\r\n    };\r\n  } else {\r\n    \r\n    const session = await computeSetup(store, null, logonPayload);\r\n    \r\n    const tableSummary = await computeSetupTables(store, session, dataControl.table);\r\n    \r\n    appEnv = {\r\n      store,\r\n      session,\r\n      tableSummary,\r\n\r\n      servers  : null,\r\n      restaflib: null,\r\n      logonPayload,\r\n\r\n      state: {\r\n        modified   : [],\r\n        pagination : {},\r\n        currentPage: {},\r\n\r\n        data   : {},\r\n        columns: {}\r\n      }\r\n    };\r\n  };\r\n\r\n  appEnv.appControl = appControl;\r\n  appEnv.id = Date(); /* just assign a new id - placeholder */\r\n  return appEnv;\r\n}\r\nexport default setup;\r\n"],"names":["commonHandler","type","data","rowIndex","appEnv","appControl","editControl","handlers","Promise","resolve","statusCode","msg","_ref","e","reject","_temp2","source","store","session","dataControl","table","_appEnv$appControl$da2","byvars","columns","state","t","length","k","custom","w","forEach","casUpdateData","where","then","iupdateCasTable","result","iupdateComputeTable","_appEnv$appControl$da","src","libref","name","set","comma","value2String","andBit","asrc","split","console","log","payload","code","apiCall","links","job","jobState","qs","newState","timeout","status","_iupdateComputeTable","value","JSON","stringify","toString","_settle","pact","s","_Pact","o","bind","v","observer","_temp3","eColumns","schema","i","Column","toLowerCase","Label","customColumns","c","newRows","rows","_temp4","array","body","row","rowObj","r","makeRowObject","t1","push","thenable","_cycle","prototype","onFulfilled","onRejected","this","callback","_this","control","_extends","from","next","casFetchRows","prepFormData","modified","pagination","currentPage","cachePolicy","icasRows","_icasRows","tableSummary","tname","computeFetchData","start","limit","count","format","_prepFormData","icomputeRows","_icomputeRows","cellEdit","_exit3","newDataRow","_exit2","_result2","_temp","autoSave","_commonHandler","updateTableRows","_appEnv$appControl$ed","f","svalue","Type","parseFloat","isNaN","text2Float","_temp6","_temp5","scrollTable","direction","fetchResults","icasScroll","initialFetch","fetchTableRows","icomputeScroll","_icomputeScroll","setup","logonPayload","id","Date","initStore","authType","casSetup","servers","restaflib","computeSetup","computeSetupTables"],"mappings":"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"}