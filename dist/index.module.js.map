{"version":3,"file":"index.module.js","sources":["../src/commonHandler.js","../src/updateTableRows.js","../src/cellEdit.js","../src/text2Float.js","../src/prepFormData.js","../src/fetchTableRows.js","../src/scrollTable.js","../src/setup.js","../src/distinctValues.js","../src/casTableUnique.js","../src/sasTableUnique.js","../src/uploadData.js","../src/saveTable.js"],"sourcesContent":["/*\r\n * Copyright © 2022, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @description Run init, main or term handlers\r\n * @async\r\n * @module commonHandler\r\n * @category restafedit/core\r\n * @param {string} type   - type of exit (init|main|term)\r\n * @param {rowObject} data        - rowObject\r\n * @param {number} rowIndex    - client-side Row Index\r\n * @param {appEnv} appEnv      - app Environment from setup\r\n * @returns {promise}     - [data, status]\r\n * @example\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function commonHandler (type, data, rowIndex, appEnv) {\r\n  const { handlers } = appEnv.appControl.editControl;\r\n  if (handlers[type] == null) {\r\n    return [data, { statusCode: 0, msg: null }];\r\n  } else {\r\n    const [newDataRow, status] = await handlers[type](data, rowIndex, appEnv, type);\r\n    return [newDataRow, status];\r\n  }\r\n};\r\nexport default commonHandler;\r\n","import { casUpdateData, computeUpdateData } from '@sassoftware/restaflib';\r\n/**\r\n * @description Update the row on the server\r\n * @async\r\n * @module updateTableRows\r\n * @category restafedit/core\r\n * @param {rowObject} data  - data as a rowObject or Array of rowObjects\r\n * @param {appEnv} appEnv   - app Environment object from setup\r\n * @returns {promise}       - {msg: string, statusCode: 0|1|2}\r\n * @example\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function updateTableRows (data, appEnv) {\r\n  let result;\r\n  const byvars = appEnv.appControl.byvars;\r\n  if (byvars === null || byvars.length === 0) {\r\n    return [null, { msg: 'Error: Please specify a by variable', statusCode: 1 }];\r\n  }\r\n\r\n  if (Array.isArray(data) === true) {\r\n    for (let i = 0; i < data.length; i++) {\r\n      result = await _updateData(data[i], appEnv);\r\n    }\r\n  } else {\r\n    result = await _updateData(data, appEnv);\r\n  }\r\n  return result;\r\n}\r\n\r\nfunction makePayload (data, appEnv) {\r\n  const { table, byvars } = appEnv.appControl;\r\n  const columns = appEnv.state.columns;\r\n\r\n  const t = {};\r\n  for (const k in data) {\r\n    if (!(k === '_index_' || k === '_rowIndex') && columns[k].custom === false) {\r\n      t[k] = data[k];\r\n    };\r\n  };\r\n\r\n  const w = {};\r\n  byvars.forEach((k) => {\r\n    w[k] = t[k];\r\n  });\r\n  const payload = {\r\n    table,\r\n    data : t,\r\n    where: w\r\n  };\r\n  console.log(JSON.stringify(payload, null, 4));\r\n  return payload;\r\n}\r\n\r\nasync function _updateData (data, appEnv) {\r\n  const { store, session } = appEnv;\r\n  const handler = (appEnv.source === 'cas') ? casUpdateData : computeUpdateData;\r\n  const payload = makePayload(data, appEnv);\r\n  console.log(JSON.stringify(payload, null, 4));\r\n  console.log(payload);\r\n  console.log(handler);\r\n  const status = await handler(store, session, payload);\r\n  console.log(status);\r\n  return status;\r\n}\r\n\r\nexport default updateTableRows;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport text2Float from './text2Float';\r\nimport commonHandler from './commonHandler';\r\nimport updateTableRows from './updateTableRows';\r\n\r\n/**\r\n * @description Process edit of a cell and optionally save the data\r\n * @async\r\n * @module cellEdit\r\n * @category restafedit/core\r\n * @param {string} name     - name of the field (lower case)\r\n * @param {*} value         - the new value for name field\r\n * @param {number} rowIndex - row Index ( index in the data array on client)\r\n * @param {rowObject} data  - RowObject for the entire row prior to change\r\n * @param {appEnv} appEnv   - app Environment from setup\r\n * @returns {promise}       - {data: updated data, status: status }\r\n * @example\r\n * data schema {column1: value, column2, value,...}\r\n * status schema {statusCode: 0|1|2, msg: some string}\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function cellEdit (name, value, rowIndex, data, appEnv) {\r\n  /* do not modify the data directly. caller will probably do a setState */\r\n\r\n  let newDataRow = { ...data };\r\n  const columns = appEnv.state.columns;\r\n  const { handlers, autoSave } = appEnv.appControl.editControl;\r\n\r\n  newDataRow[name] = text2Float(value, columns[name]);\r\n  let status = { statusCode: 0, msg: '' };\r\n\r\n  if (handlers[name] != null) {\r\n    const r = await handlers[name](newDataRow, name, rowIndex, appEnv);\r\n    newDataRow = r[0];\r\n    status = r[1];\r\n    if (status.statusCode === 2) {\r\n      return { data: r[0], status };\r\n    }\r\n  }\r\n  let r = await commonHandler('main', newDataRow, rowIndex, appEnv);\r\n  if (autoSave === true) {\r\n    r = await commonHandler('term', r[0], rowIndex, appEnv);\r\n    status = r[1];\r\n    if (status.statusCode === 2) {\r\n      return { data: r[0], status };\r\n    }\r\n    status = await updateTableRows(r[0], appEnv);\r\n  }\r\n  newDataRow = r[0];\r\n\r\n  if (appEnv.appControl.cachePolicy === true) {\r\n    appEnv.state.data[data._rowIndex] = newDataRow;\r\n  }\r\n\r\n  return ({ data: newDataRow, status });\r\n}\r\nexport default cellEdit;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nfunction text2Float (value, f) {\r\n  let svalue = value;\r\n  const t = f.Type.toLowerCase();\r\n  if (typeof svalue === 'string' && (t === 'decimal' || t === 'number' || t === 'double' || t === 'float')) {\r\n    svalue = parseFloat(value * 1.0);\r\n    if (isNaN(value) === true) {\r\n      value = 0;\r\n    }\r\n  }\r\n  return svalue;\r\n}\r\nexport default text2Float;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/*\r\n* output\r\n* extended columns and data ready for use in dataform and table\r\n*/\r\nimport commonHandler from './commonHandler';\r\n/**\r\n * @description reduce fetch results\r\n * @private\r\n * @async\r\n * @module prepFormData\r\n * @param {object} result - result from casFetchRow(rows and schema)\r\n * @param {object} appEnv - app Environment from setup\r\n * @returns {promise}     - {columns: eColumns, rowsObject: newRows}\r\n */\r\nasync function prepFormData (result, appEnv) {\r\n  const { schema, rows } = result;\r\n  const customColumns = appEnv.appControl.customColumns;\r\n  let status = { statusCode: 0, msg: 'Initialization was successful' };\r\n\r\n  const makeRowObject = (columns, row, rown) => {\r\n    const rowObj = { _rowIndex: rown };\r\n    row.forEach((r, i) => {\r\n      const s = columns[i];\r\n      const name = s.Column.toLowerCase();\r\n      rowObj[name] = r;\r\n    });\r\n\r\n    if (customColumns != null) {\r\n      for (const k in customColumns) {\r\n        const c = customColumns[k];\r\n        const name = c.Column.toLowerCase();\r\n        rowObj[name] = c.value;\r\n      }\r\n    }\r\n    return rowObj;\r\n  };\r\n\r\n  const newRows = [];\r\n  for (let i = 0; i < rows.length; i++) {\r\n    const t = makeRowObject(schema, rows[i], i);\r\n\r\n    const [t1, statusi] = await commonHandler('init', t, i, appEnv);\r\n    status = statusi;\r\n    newRows.push(t1);\r\n  };\r\n\r\n  // extend column and make it an object\r\n  const eColumns = {};\r\n  schema.forEach((s, i) => {\r\n    const name = s.Column.toLowerCase();\r\n    s.name = name;\r\n    s.Label = (s.Label == null || s.Label.length === 0) ? s.Column : s.Label;\r\n    if (s.Type == null) {\r\n      s.Type = (s.type == null) ? 'double' : s.type;\r\n    }\r\n    s.custom = false;\r\n    eColumns[name] = s;\r\n  });\r\n\r\n  // add computed columns to the array.\r\n  if (customColumns != null) {\r\n    for (const k in customColumns) {\r\n      const c = { ...customColumns[k] };\r\n      c.name = k;\r\n      c.custom = true;\r\n      eColumns[k] = c;\r\n    }\r\n  }\r\n\r\n  return {\r\n    columns: eColumns,\r\n    data   : newRows,\r\n    status\r\n  };\r\n}\r\nexport default prepFormData;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { casFetchRows, computeFetchData } from '@sassoftware/restaflib';\r\n\r\nimport prepFormData from './prepFormData';\r\n/**\r\n * @description Fetch new records based on control argument\r\n * @async\r\n * @private\r\n * @module fetchTableRows\r\n * @category restafedit/core\r\n * @param {fetchControl} control - info for records to retrieve\r\n * @param {appEnv} appEnv - appEnv\r\n * @returns {promise}  - { data:data, columns:ecolumns, pagination: pagination}\r\n * @example\r\n *   let control = {from: 10, count:50, format: false};\r\n *   let r = await fetchTableRows(control, appEnv);\r\n *   r is a fetchResult object\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function fetchTableRows (control, appEnv) {\r\n  let result = null;\r\n  if (appEnv.source === 'cas') {\r\n    result = await icasRows(control, appEnv);\r\n  } else {\r\n    result = await icomputeRows(control, appEnv);\r\n  }\r\n  return result;\r\n}\r\n\r\nasync function icasRows (control, appEnv) {\r\n  const { store, session } = appEnv;\r\n  const c = { ...control };\r\n  if (c.from <= 0 || c.next === -1) {\r\n    return null;\r\n  }\r\n  if (c.where == null) {\r\n    c.where = ' ';\r\n  }\r\n  const r = await casFetchRows(store, session, c);\r\n\r\n  let t = null;\r\n  if (r !== null) {\r\n    t = await prepFormData(r.data, appEnv);\r\n\r\n    appEnv.state = {\r\n      modified   : [],\r\n      pagination : { ...r.pagination },\r\n      currentPage: c,\r\n      data       : [],\r\n      columns    : []\r\n    };\r\n    if (appEnv.appControl.cachePolicy === true) {\r\n      appEnv.state.data = t.data;\r\n      appEnv.state.columns = t.columns;\r\n    }\r\n    t.pagination = { ...r.pagination };\r\n  }\r\n  return t;\r\n}\r\n\r\nasync function icomputeRows (control, appEnv) {\r\n  const { store, tableSummary } = appEnv;\r\n  const { table } = appEnv.appControl;\r\n  const tname = `${table.libref}.${table.name}`.toLowerCase();\r\n  // eslint-disable-next-line prefer-const\r\n  let payload = {\r\n    qs: {\r\n      start : control.from - 1,\r\n      limit : control.count,\r\n      format: (control.format != null) ? false : control.format\r\n    }\r\n  };\r\n  const data = await computeFetchData(store, tableSummary, tname, null, payload);\r\n  ;\r\n\r\n  let result = null;\r\n  if (data !== null) {\r\n    result = await prepFormData(data, appEnv);\r\n    appEnv.state = {\r\n      modified   : [],\r\n      pagination : {},\r\n      currentPage: {},\r\n      data       : result.data,\r\n      columns    : result.columns\r\n    };\r\n  }\r\n  return result;\r\n}\r\nexport default fetchTableRows;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n// import fetchTableRows from './fetchTableRows';\r\nimport { computeFetchData, casFetchRows } from '@sassoftware/restaflib';\r\nimport prepFormData from './prepFormData';\r\n/**\r\n * @description Simplify scrolling using next|prev|top\r\n * @async\r\n * @module scrollTable\r\n * @category restafedit/core\r\n * @param {string} direction direction(next|prev|first)\r\n * @param {appEnv} appEnv\r\n * @param {object=} payload  override pogination with custom scrolling\r\n * @returns {promise}  result ready for display or null if it did not scroll\r\n * @example\r\n *  let r = await scrollTable('next', appEnv);\r\n *\r\n *  if ( r === null) {\r\n *     handle when no data was writtten\r\n *  } else {\r\n *     handle new data\r\n * }\r\n *\r\n * Make sure you handle exceptions that are thrown.\r\n *\r\n * For custom scrolling, pass the scrolling information in the optional third parameter.\r\n * The content of the payload depends on whether the source is cas or compute.\r\n * For compute see the documentation for rowset in compute service.<https://developer.sas.com/apis/rest/Compute/#get-a-row-set-from-a-data-set>\r\n * CAS payload is not as rich the rowset for compute service\r\n * The payload for CAS is as follows\r\n *  { start: <number>\r\n *    count: <number>\r\n *    format: true|false,\r\n *    where: <where string>\r\n * };\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function scrollTable (direction, appEnv, payload) {\r\n  let fetchResults;\r\n  if (appEnv.source === 'cas') {\r\n    fetchResults = await icasScroll(direction, appEnv, payload);\r\n  } else {\r\n    fetchResults = await icomputeScroll(direction, appEnv, payload);\r\n  }\r\n  return fetchResults;\r\n}\r\n\r\nasync function icasScroll (direction, appEnv, payload) {\r\n  const { store, session } = appEnv;\r\n  const { initialFetch, table } = appEnv.appControl;\r\n  let control;\r\n\r\n  if (direction === 'first') {\r\n    control = { ...initialFetch };\r\n  } else if (direction !== null) {\r\n    control = { ...appEnv.state.pagination[direction] };\r\n    if (control.next === -1 || control.from <= 0) {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  if (payload != null) {\r\n    control = { ...payload };\r\n  }\r\n\r\n  control.table = table;\r\n  const r = await casFetchRows(store, session, control);\r\n\r\n  let t = null;\r\n  if (r !== null) {\r\n    t = await prepFormData(r.data, appEnv);\r\n    appEnv.state = {\r\n      modified   : [],\r\n      pagination : { ...r.pagination },\r\n      currentPage: control,\r\n      data       : [],\r\n      columns    : []\r\n    };\r\n    if (appEnv.appControl.cachePolicy === true) {\r\n      appEnv.state.data = t.data;\r\n      appEnv.state.columns = t.columns;\r\n    }\r\n    t.pagination = { ...r.pagination };\r\n    return t;\r\n  }\r\n}\r\n\r\nasync function icomputeScroll (direction, appEnv, payload) {\r\n  const { store, tableSummary } = appEnv;\r\n  const { table, initialFetch } = appEnv.appControl;\r\n  let control = null;\r\n\r\n  const tname = `${table.libref}.${table.name}`.toLowerCase();\r\n\r\n  if (payload == null) {\r\n    if (direction === 'first') {\r\n      control = { ...initialFetch };\r\n    }\r\n  } else {\r\n    control = { ...payload };\r\n  }\r\n\r\n  // eslint-disable-next-line prefer-const\r\n\r\n  const data = await computeFetchData(store, tableSummary, tname, direction, control);\r\n\r\n  let result = null;\r\n  if (data !== null) {\r\n    result = await prepFormData(data, appEnv);\r\n    appEnv.state = {\r\n      modified   : [],\r\n      pagination : {},\r\n      currentPage: {},\r\n      data       : result.data,\r\n      columns    : result.columns\r\n    };\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nexport default scrollTable;\r\n","/* eslint-disable prefer-const */\r\n\r\nimport { initStore } from '@sassoftware/restaf';\r\nimport { casSetup, computeSetup, computeSetupTables, caslRun } from '@sassoftware/restaflib';\r\nimport deepcopy from 'deepcopy';\r\n\r\n/**\r\n * @description Setup an Edit session\r\n * @async\r\n * @module setup\r\n * @category restafedit/core\r\n * @param {logonPayload} logonPayload  - information for connecting to Viya\r\n * @param {appControl} appControl      - control information\r\n *\r\n * @returns {promise}  returns appEnv to control the flow\r\n * @alias module: setup\r\n * @example\r\n *  const appEnv = await setup(logonPayload, appControl);\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n *\r\n */\r\n\r\nasync function setup (logonPayload, appControl, preamble) {\r\n  const store = initStore();\r\n  let appEnv;\r\n  if (logonPayload.authType == null) {\r\n    logonPayload.authType = 'code';\r\n  }\r\n  if (appControl.source === 'cas') {\r\n    appEnv = await icasSetup(store, logonPayload, appControl);\r\n  } else {\r\n    appEnv = await icomputeSetup(store, logonPayload, appControl, preamble);\r\n  }\r\n  return appEnv;\r\n}\r\n\r\nasync function icasSetup (store, logonPayload, appControl, preamble) {\r\n  const r = await casSetup(store, logonPayload);\r\n  let appEnv = {\r\n    source: appControl.source,\r\n\r\n    store,\r\n    session  : r.session,\r\n    servers  : r.servers,\r\n    restaflib: null,\r\n\r\n    logonPayload,\r\n    appControl: deepcopy(appControl),\r\n\r\n    state: {\r\n      modified   : [],\r\n      pagination : {},\r\n      currentPage: {},\r\n\r\n      data   : {},\r\n      columns: {}\r\n    },\r\n\r\n    id: Date()\r\n  };\r\n  if (preamble != null) {\r\n    const rx = await caslRun(store, r.session, preamble);\r\n    if (rx.details.statusCode !== 0) {\r\n      console.log(rx);\r\n      // eslint-disable-next-line no-throw-literal\r\n      throw 'Preamble failed. Please see console';\r\n    };\r\n  }\r\n  return appEnv;\r\n};\r\n\r\nasync function icomputeSetup (store, logonPayload, appControl, preamble) {\r\n  // eslint-disable-next-line prefer-const\r\n  ;\r\n  let session = await computeSetup(store, appControl.computeContext, logonPayload);\r\n  let tableSummary = await computeSetupTables(store, session, appControl.table, preamble);\r\n  let appEnv = {\r\n    source: appControl.source,\r\n\r\n    store,\r\n    session,\r\n    tableSummary,\r\n\r\n    servers  : null,\r\n    restaflib: null,\r\n\r\n    logonPayload,\r\n    appControl: deepcopy(appControl),\r\n\r\n    state: {\r\n      modified   : [],\r\n      pagination : {},\r\n      currentPage: {},\r\n\r\n      data   : {},\r\n      columns: {}\r\n    },\r\n\r\n    id: Date()\r\n  };\r\n  return appEnv;\r\n}\r\n\r\nexport default setup;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport casTableUnique from './casTableUnique';\r\nimport sasTableUnique from './sasTableUnique';\r\n\r\n/**\r\n * @description Get unique values for a specific column\r\n * @async\r\n * @module distinctValues\r\n * @category restafedit/core\r\n * @param {object} table {caslib: xxx, name: yyy}\r\n * @param {string} columnName    column name\r\n * @param {appEnv} appEnv   - app Environment from setup\r\n * @returns {promise}       - {an array of unique values }\r\n * @example\r\n *  let selectList = await distinctValues('company', appEnv))\r\n *  This is useful to get a list of unique values for selected columns.\r\n *  {company:['IBM', 'Microsoft', 'SAS'] }\r\n */\r\n\r\nasync function distinctValues (table, columnName, appEnv, payload) {\r\n  let data;\r\n  if (appEnv.source === 'cas') {\r\n    data = await casTableUnique(table, columnName, appEnv, payload);\r\n  } else {\r\n    data = await sasTableUnique(table, columnName, appEnv, payload);\r\n  }\r\n  return data;\r\n};\r\nexport default distinctValues;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nimport { caslRun } from '@sassoftware/restaflib';\r\n\r\n/**\r\n * @description Get unique values for a specific column\r\n * @async\r\n * @private\r\n * @module casTableUnique\r\n * @category restafedit/core\r\n * @param {object} table object\r\n * @param {string} columnName    column name\r\n * @param {appEnv} appEnv   app Environment from setup\r\n * @returns {promise}       {an array of unique values }\r\n * @example\r\n *  let selectList = await casTableUnique('company, appEnv))\r\n *  This is useful to get a list of unique values for selected columns.\r\n *  {columnName:[ array of unquew values] }\r\n */\r\n\r\nasync function casTableUnique (table, columnName, appEnv, payload) {\r\n  const { store, session } = appEnv;\r\n\r\n  const src = `\r\n  results = selectionLists(_args_.column,_args_.table.caslib, _args_.table.name);\r\n  send_response({casResults = {data=results}});\r\n  `\r\n  ;\r\n  const args = {\r\n    table,\r\n    column: columnName\r\n  };\r\n\r\n  const result = await caslRun(store, session, src, args, true);\r\n  if (result.results.casResults.data.statusCode !== 0) {\r\n    // eslint-disable-next-line no-throw-literal\r\n    throw 'Failed to create unique list';\r\n  }\r\n\r\n  const data = result.results.casResults.data.data;\r\n\r\n  return data;\r\n};\r\nexport default casTableUnique;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @description Get unique values for a specific column(sas table)\r\n * @async\r\n * @private\r\n * @module sasTableUnique\r\n * @category restafedit/core\r\n * @param {string} columnName    column name\r\n * @param {appEnv} appEnv   app Environment from setup\r\n * @returns {promise}       {an array of unique values }\r\n * @example\r\n *  let selectList = await casTableUnique('company, appEnv))\r\n *  This is useful to get a list of unique values for selected columns.\r\n *  {columnName:[ array of unquew values] }\r\n */\r\n\r\nasync function sasTableUnique (columnName, appEnv, payload) {\r\n  const data = {};\r\n  data[columnName] = [];\r\n  return data;\r\n};\r\nexport default sasTableUnique;\r\n","/* eslint-disable no-tabs */\r\n/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { casUpload, casAppendTable, computeRun } from '@sassoftware/restaflib';\r\n\r\n/**\r\n * @description Upload data (peding: upload to sas table)\r\n * @async\r\n * @module uploadData\r\n * @category restafedit/core\r\n * @param {object} output table\r\n * @param {array}  data\r\n * @param {array}  drop fields to drop from the output\r\n * @param {object} addon columns additional columns\r\n * @param {appEnv} appEnv   - app Environment from setup\r\n * @param {object=} masterTable if specified the data will be appended to this table\r\n * @param {boolean} saveFlag if true, the masterTable will be saved\r\n * @returns {promise}       - {an array of unique values }\r\n * @example\r\n *  let selectList = await distinctValues('company', appEnv))\r\n *  This is useful to get a list of unique values for selected columns.\r\n *  {company:['IBM', 'Microsoft', 'SAS'] }\r\n */\r\n\r\nasync function uploadData (table, data, drop, addon, appEnv, masterTable, saveFlag) {\r\n  const { store, session } = appEnv;\r\n  // eslint-disable-next-line prefer-const\r\n  let t = Object.keys(data[0]);\r\n  let dropArray = ['_index_', '_rowIndex'];\r\n  if (drop !== null) {\r\n    dropArray = dropArray.concat(drop);\r\n  }\r\n  const columns = t.filter(c => {\r\n    return !(dropArray.indexOf(c) >= 0);\r\n  });\r\n  const tempCols = {};\r\n  columns.forEach(k => {\r\n    tempCols[k] = appEnv.state.columns[k];\r\n  });\r\n\r\n  let csvArray = null;\r\n  if (appEnv.source === 'cas') {\r\n    csvArray = columns.join(',') + '\\n';\r\n  };\r\n\r\n  for (let i = 0; i < data.length; i++) {\r\n    let temp = data[i];\r\n    temp = { ...temp, ...addon };\r\n    const valArray = [];\r\n    columns.forEach((c, l) => {\r\n      let v = temp[c];\r\n      if (typeof v === 'string') {\r\n        v = v.trim();\r\n      }\r\n      valArray[l] = v;\r\n    });\r\n    if (csvArray === null) {\r\n      csvArray = valArray.join(',') + '\\n';\r\n    } else {\r\n      csvArray = csvArray + valArray.join(',') + '\\n';\r\n    }\r\n  }\r\n  let result;\r\n  if (appEnv.source === 'cas') {\r\n    result = await _casTableUpload(\r\n      store,\r\n      session,\r\n      table,\r\n      csvArray,\r\n      masterTable,\r\n      saveFlag\r\n    );\r\n  } else {\r\n    result = await _computeUpload(\r\n      store,\r\n      session,\r\n      tempCols,\r\n      table,\r\n      csvArray\r\n    );\r\n  }\r\n  return result;\r\n}\r\n\r\nasync function _computeUpload (store, session, columns, table, csvArray) {\r\n  let src = `data ${table.libref}.${table.name}; INFILE datalines delimiter=',' ;\\n`;\r\n  let l = '';\r\n  let inx = 'INPUT ';\r\n  for (const k in columns) {\r\n    const c = columns[k];\r\n    inx = inx + c.Column + ' ';\r\n    if (c.Type === 'CHAR') {\r\n      const x = ` ${c.Column} $ ${c.length} \\n`;\r\n      l = l + ' ' + x;\r\n    }\r\n  }\r\n  if (l.length > 0) {\r\n    l = 'LENGTH ' + l + ';\\n';\r\n  };\r\n  inx = inx + ';\\n';\r\n\r\n  src = src + ';\\n' + l + inx + 'datalines;\\n' + csvArray + '\\n; run; proc print;run;\\n';\r\n  await computeRun(store, session, src);\r\n  return { msg: 'done', statusCode: 0 };\r\n}\r\nasync function _casTableUpload (store, session, table, csvArray, masterTable, saveFlag) {\r\n  const t = `${table.caslib}.${table.name}`;\r\n  let r = await casUpload(store, session, null, t, true, csvArray);\r\n  if (masterTable != null) {\r\n    r = await casAppendTable(store, session, table, masterTable, saveFlag);\r\n    return r;\r\n  } else {\r\n    return r;\r\n  }\r\n}\r\nexport default uploadData;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @description Save the current table to disk\r\n * @async\r\n * @module saveTable\r\n * @category restafedit/core\r\n * @param {appEnv} appEnv\r\n * @param {object=} table - save a table other than the default\r\n * @returns {promise}  Status object\r\n * @example\r\n * This is a noop for SAS Tables\r\n **/\r\n\r\nimport { casSaveTable } from '@sassoftware/restaflib';\r\n\r\nasync function saveTable (appEnv, table) {\r\n  const { store, session } = appEnv;\r\n\r\n  if (appEnv.source === 'compute') {\r\n    return { msg: 'Action does not apply to SAS 9 tables', statusCode: 0 };\r\n  }\r\n  const t = (table != null) ? table : appEnv.appControl.table;\r\n  await casSaveTable(store, session, t);\r\n  return { msg: 'Table saved', statusCode: 0 };\r\n}\r\nexport default saveTable;\r\n"],"names":["commonHandler","type","data","rowIndex","appEnv","appControl","editControl","handlers","Promise","resolve","statusCode","msg","_ref","e","reject","pact","state","value","s","o","_settle","bind","v","then","observer","_updateData","store","session","source","casUpdateData","computeUpdateData","table","byvars","_appEnv$appControl","columns","t","k","custom","forEach","w","payload","where","console","log","JSON","stringify","makePayload","handler","status","_Pact","prototype","onFulfilled","onRejected","result","this","callback","_this","length","Array","isArray","_updateData3","array","body","i","_updateData2","_cycle","thenable","_temp4","cellEdit","name","_exit3","newDataRow","r","_exit2","_temp2","_result2","cachePolicy","_rowIndex","autoSave","_commonHandler","updateTableRows","_updateTableRows","_temp","_appEnv$appControl$ed","f","svalue","Type","toLowerCase","parseFloat","isNaN","text2Float","_temp6","_temp5","prepFormData","_temp3","eColumns","schema","Column","Label","customColumns","c","_extends","newRows","rows","row","rown","rowObj","makeRowObject","push","statusi","control","icasRows","from","next","casFetchRows","_prepFormData2","modified","pagination","currentPage","icomputeRows","tableSummary","tname","libref","computeFetchData","qs","start","limit","count","format","_prepFormData","_icomputeRows","scrollTable","direction","fetchResults","icasScroll","_appEnv$appControl2","initialFetch","_icasScroll","icomputeScroll","_icomputeScroll","logonPayload","preamble","initStore","authType","icasSetup","casSetup","servers","restaflib","deepcopy","id","Date","_icasSetup","computeSetup","computeContext","computeSetupTables","icomputeSetup","_icomputeSetup","distinctValues","columnName","caslRun","column","results","casResults","casTableUnique","_casTableUnique","sasTableUnique","uploadData","drop","addon","masterTable","saveFlag","Object","keys","dropArray","concat","filter","indexOf","tempCols","csvArray","join","temp","l","trim","valArray","_loop","_casTableUpload","casUpload","caslib","casAppendTable","_casAppendTable","_casTableUpload2","_computeUpload","src","inx","computeRun","saveTable","casSaveTable"],"mappings":"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"}