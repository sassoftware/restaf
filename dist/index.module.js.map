{"version":3,"file":"index.module.js","sources":["../src/commonHandler.js","../src/updateTableRows.js","../src/cellEdit.js","../src/text2Float.js","../src/prepFormData.js","../src/fetchTableRows.js","../src/scrollTable.js","../src/setup.js","../src/distinctValues.js","../src/casTableUnique.js","../src/sasTableUnique.js","../src/uploadData.js","../src/saveTable.js"],"sourcesContent":["/*\r\n * Copyright © 2022, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @description Run init, main or term handlers\r\n * @async\r\n * @module commonHandler\r\n * @category restafedit/core\r\n * @param {string} type   - type of exit (init|main|term)\r\n * @param {rowObject} data        - rowObject\r\n * @param {number} rowIndex    - client-side Row Index\r\n * @param {appEnv} appEnv      - app Environment from setup\r\n * @returns {promise}     - [data, status]\r\n * @example\r\n * The function returns the updated data and the status.\r\n * This function is called by cellEdit, so there is probably little reason\r\n * to call this directly\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function commonHandler (type, data, rowIndex, appEnv) {\r\n  const { handlers } = appEnv.appControl.editControl;\r\n  if (handlers[type] == null) {\r\n    return [data, { statusCode: 0, msg: null }];\r\n  } else {\r\n    const [newDataRow, status] = await handlers[type](data, rowIndex, appEnv, type);\r\n    return [newDataRow, status];\r\n  }\r\n};\r\nexport default commonHandler;\r\n","import { casUpdateData } from '@sassoftware/restaflib';\r\n/**\r\n * @description Update the row on the server\r\n * @async\r\n * @module updateTableRows\r\n * @category restafedit/core\r\n * @param {rowObject} data  - data as a rowObject or Array of rowObjects\r\n * @param {appEnv} appEnv   - app Environment object from setup\r\n * @returns {promise}       - {msg: string, statusCode: 0|1|2}\r\n * @example\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function updateTableRows (data, appEnv) {\r\n  let result;\r\n  const byvars = appEnv.appControl.byvars;\r\n  if (byvars === null || byvars.length === 0) {\r\n    return [null, { msg: 'Error: Please specify a by variable', statusCode: 1 }];\r\n  }\r\n\r\n  if (Array.isArray(data) === true) {\r\n    for (let i = 0; i < data.length; i++) {\r\n      result = await _updateData(data[i], appEnv);\r\n    }\r\n  } else {\r\n    result = await _updateData(data, appEnv);\r\n  }\r\n  return result;\r\n}\r\n\r\nfunction makePayload (data, appEnv) {\r\n  const { table, byvars } = appEnv.appControl;\r\n  const columns = appEnv.state.columns;\r\n\r\n  const t = {};\r\n  for (const k in data) {\r\n    if (!(k === '_index_' || k === '_rowIndex') && columns[k].custom === false) {\r\n      t[k] = data[k];\r\n    };\r\n  };\r\n\r\n  const w = {};\r\n  byvars.forEach((k) => {\r\n    w[k] = t[k];\r\n  });\r\n  const payload = {\r\n    table,\r\n    data : t,\r\n    where: w\r\n  };\r\n  return payload;\r\n}\r\n\r\nasync function _updateData (data, appEnv) {\r\n  const { store, session } = appEnv;\r\n  const handler = (appEnv.source === 'cas') ? casUpdateData : _computeUpdateData;\r\n  const payload = makePayload(data, appEnv);\r\n  const status = await handler(store, session, payload);\r\n  return status;\r\n}\r\n// TBD: Move to restaflib\r\n\r\nasync function _computeUpdateData (store, session, payload) {\r\n  debugger;\r\n  const { data, table, where } = payload;\r\n  let src =\r\n    `proc sql; update ${table.libref}.${table.name}`;\r\n  let set = 'SET ';\r\n  let comma = ' ';\r\n  for (const k in data) {\r\n    set = set + comma + k + '=' + value2String(data[k]);\r\n    comma = ', ';\r\n  };\r\n  src = src + ' ' + set;\r\n  let swhere = ' WHERE ';\r\n  let andbit = ' ';\r\n\r\n  for (const k in where) {\r\n    const v = where[k];\r\n    swhere = swhere + andbit + k + `= ${value2String(v)} `;\r\n    andbit = ' AND ';\r\n  }\r\n  src = src + ' ' + swhere + ';run;';\r\n  const asrc = src.split(/\\r?\\n/);\r\n\r\n  // TBD: switch to computeRun on next pass\r\n  const p = {\r\n    data: { code: asrc }\r\n  };\r\n  const job = await store.apiCall(session.links('execute'), p);\r\n  const qs = {\r\n    qs: {\r\n      newState: 'Completed',\r\n      timeout : 1\r\n    }\r\n  };\r\n  const status = await store.jobState(job, qs);\r\n  const c = (status.data === 'completed' ? 0 : 1);\r\n\r\n  return { statusCode: c, msg: status.data };\r\n}\r\n\r\nfunction value2String (value) {\r\n  let valueString;\r\n  if (value == null) {\r\n    valueString = '.';\r\n  } else if (typeof value === 'string') {\r\n    valueString = JSON.stringify(value);\r\n  } else {\r\n    valueString = value.toString();\r\n  }\r\n  return valueString;\r\n}\r\nexport default updateTableRows;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport text2Float from './text2Float';\r\nimport commonHandler from './commonHandler';\r\nimport updateTableRows from './updateTableRows';\r\n\r\n/**\r\n * @description Process edit of a cell and optionally save the data\r\n * @async\r\n * @module cellEdit\r\n * @category restafedit/core\r\n * @param {string} name     - name of the field (lower case)\r\n * @param {*} value         - the new value for name field\r\n * @param {number} rowIndex - row Index ( index in the data array on client)\r\n * @param {rowObject} currentData  - RowObject for the entire row prior to change\r\n * @param {appEnv} appEnv   - app Environment from setup\r\n * @returns {promise}       - {data: updated data, status: status }\r\n * @example\r\n * data schema {column1: value, column2, value,...}\r\n * status schema {statusCode: 0|1|2, msg: some string}\r\n * The currentData object is also updated with the latest values.\r\n *\r\n * const r = await cellEdit'x1',100, 1, d)\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function cellEdit (name, value, rowIndex, currentData, appEnv) {\r\n  /* do not modify the data directly. caller will probably do a setState */\r\n\r\n  let newDataRow = { ...currentData };\r\n  const columns = appEnv.state.columns;\r\n  const { handlers, autoSave } = appEnv.appControl.editControl;\r\n  const iautoSave = (autoSave == null) ? true : autoSave;\r\n\r\n  newDataRow[name] = text2Float(value, columns[name]);\r\n  let status = { statusCode: 0, msg: '' };\r\n\r\n  if (handlers[name] != null) {\r\n    const r = await handlers[name](newDataRow, name, rowIndex, appEnv);\r\n    newDataRow = r[0];\r\n    status = r[1];\r\n    if (status.statusCode === 2) {\r\n      return { data: r[0], status };\r\n    }\r\n  }\r\n  let r = await commonHandler('main', newDataRow, rowIndex, appEnv);\r\n  if (iautoSave === true) {\r\n    r = await commonHandler('term', r[0], rowIndex, appEnv);\r\n    status = r[1];\r\n    if (status.statusCode === 2) {\r\n      return { data: r[0], status };\r\n    }\r\n    status = await updateTableRows(r[0], appEnv);\r\n  }\r\n  newDataRow = r[0];\r\n\r\n  if (appEnv.appControl.cachePolicy === true) {\r\n    appEnv.state.data[currentData._rowIndex] = newDataRow;\r\n  }\r\n\r\n  return ({ data: newDataRow, status });\r\n}\r\nexport default cellEdit;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nfunction text2Float (value, f) {\r\n  let svalue = value;\r\n  const t = f.Type.toLowerCase();\r\n  if (typeof svalue === 'string' && (t === 'decimal' || t === 'number' || t === 'double' || t === 'float')) {\r\n    svalue = parseFloat(value * 1.0);\r\n    if (isNaN(value) === true) {\r\n      value = 0;\r\n    }\r\n  }\r\n  return svalue;\r\n}\r\nexport default text2Float;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/*\r\n* output\r\n* extended columns and data ready for use in dataform and table\r\n*/\r\nimport commonHandler from './commonHandler';\r\n/**\r\n * @description reduce fetch results\r\n * @private\r\n * @async\r\n * @module prepFormData\r\n * @param {object} result - result from casFetchRow(rows and schema)\r\n * @param {object} appEnv - app Environment from setup\r\n * @returns {promise}     - {columns: eColumns, rowsObject: newRows}\r\n */\r\nasync function prepFormData (result, appEnv) {\r\n  const { schema, rows } = result;\r\n  const customColumns = appEnv.appControl.customColumns;\r\n  let status = { statusCode: 0, msg: 'Initialization was successful' };\r\n\r\n  const makeRowObject = (columns, row, rown) => {\r\n    const rowObj = { _rowIndex: rown };\r\n    row.forEach((r, i) => {\r\n      const s = columns[i];\r\n      const name = s.Column.toLowerCase();\r\n      rowObj[name] = r;\r\n    });\r\n\r\n    if (customColumns != null) {\r\n      for (const k in customColumns) {\r\n        const c = customColumns[k];\r\n        const name = c.Column.toLowerCase();\r\n        rowObj[name] = c.value;\r\n      }\r\n    }\r\n    return rowObj;\r\n  };\r\n\r\n  const newRows = [];\r\n  for (let i = 0; i < rows.length; i++) {\r\n    const t = makeRowObject(schema, rows[i], i);\r\n\r\n    const [t1, statusi] = await commonHandler('init', t, i, appEnv);\r\n    status = statusi;\r\n    newRows.push(t1);\r\n  };\r\n\r\n  // extend column and make it an object\r\n  const eColumns = {};\r\n  schema.forEach((s, i) => {\r\n    const name = s.Column.toLowerCase();\r\n    s.name = name;\r\n    s.Label = (s.Label == null || s.Label.length === 0) ? s.Column : s.Label;\r\n    if (s.Type == null) {\r\n      s.Type = (s.type == null) ? 'double' : s.type;\r\n    }\r\n    s.custom = false;\r\n    eColumns[name] = s;\r\n  });\r\n\r\n  // add computed columns to the array.\r\n  if (customColumns != null) {\r\n    for (const k in customColumns) {\r\n      const c = { ...customColumns[k] };\r\n      c.name = k;\r\n      c.custom = true;\r\n      eColumns[k] = c;\r\n    }\r\n  }\r\n\r\n  return {\r\n    columns: eColumns,\r\n    data   : newRows,\r\n    status\r\n  };\r\n}\r\nexport default prepFormData;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { casFetchRows, computeFetchData } from '@sassoftware/restaflib';\r\n\r\nimport prepFormData from './prepFormData';\r\n/**\r\n * @description Fetch new records based on control argument\r\n * @async\r\n * @private\r\n * @module fetchTableRows obsolete?\r\n * @category restafedit/core\r\n * @param {fetchControl} control - info for records to retrieve\r\n * @param {appEnv} appEnv - appEnv\r\n * @returns {promise}  - { data:data, columns:ecolumns, pagination: pagination}\r\n * @example\r\n *   let control = {qs: {start:0, limit: 10, format: true, where: 'X1 LT 10'}}\r\n *   Note: start is really an offset, inspite of its name\r\n *   For compute: All the payload options for the rowSets end point can be used\r\n *   At this time only the following are supported for cas tables:\r\n *   stat, limit, format, where\r\n *   let r = await fetchTableRows(control, appEnv);\r\n *   r  = {data: <new data arraY, columns: <columns details}\r\n *   The results are also saved in Appenv.state if cachePolicy is set to true\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function fetchTableRows (control, appEnv) {\r\n  const result = (appEnv.source === 'cas')\r\n    ? await icasRows(control, appEnv)\r\n    : await icomputeRows(control, appEnv);\r\n  return result;\r\n}\r\n\r\nasync function icasRows (control, appEnv) {\r\n  const { store, session } = appEnv;\r\n  let c = {};\r\n  if (control.qs != null) {\r\n    c = { ...control.qs };\r\n    c.from = c.start + 1;\r\n    c.count = c.limit;\r\n  } else {\r\n    c = { ...control };\r\n  }\r\n  if (c.from <= 0 || c.next === -1) {\r\n    return null;\r\n  }\r\n  if (c.where == null) {\r\n    c.where = ' ';\r\n  }\r\n  const r = await casFetchRows(store, session, c);\r\n\r\n  let t = null;\r\n  if (r !== null) {\r\n    t = await prepFormData(r.data, appEnv);\r\n\r\n    appEnv.state = {\r\n      modified   : [],\r\n      pagination : { ...r.pagination },\r\n      currentPage: c,\r\n      data       : [],\r\n      columns    : []\r\n    };\r\n    if (appEnv.appControl.cachePolicy === true) {\r\n      appEnv.state.data = t.data;\r\n      appEnv.state.columns = t.columns;\r\n    }\r\n    t.pagination = { ...r.pagination };\r\n  }\r\n  return t;\r\n}\r\n\r\nasync function icomputeRows (control, appEnv) {\r\n  const { store, tableSummary } = appEnv;\r\n  const { table } = appEnv.appControl;\r\n  const tname = `${table.libref}.${table.name}`.toLowerCase();\r\n  // eslint-disable-next-line prefer-const\r\n  let payload = {\r\n    qs: {\r\n      start : control.from - 1,\r\n      limit : control.count,\r\n      format: (control.format != null) ? false : control.format\r\n    }\r\n  };\r\n  const data = await computeFetchData(store, tableSummary, tname, null, payload);\r\n  ;\r\n\r\n  let result = null;\r\n  if (data !== null) {\r\n    result = await prepFormData(data, appEnv);\r\n    appEnv.state = {\r\n      modified   : [],\r\n      pagination : {},\r\n      currentPage: {},\r\n      data       : result.data,\r\n      columns    : result.columns\r\n    };\r\n  }\r\n  return result;\r\n}\r\nexport default fetchTableRows;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n// import fetchTableRows from './fetchTableRows';\r\nimport { computeFetchData, casFetchRows } from '@sassoftware/restaflib';\r\nimport prepFormData from './prepFormData';\r\n/**\r\n * @description Simplify scrolling using next|prev|top\r\n * @async\r\n * @module scrollTable\r\n * @category restafedit/core\r\n * @param {string} direction direction(next|prev|first)\r\n * @param {appEnv} appEnv\r\n * @param {object=} payload  override pogination with custom scrolling\r\n * @returns {promise}  result ready for display or null if it did not scroll\r\n * @example\r\n *  let r = await scrollTable('next', appEnv);\r\n *    r=== { data:data, columns:ecolumns, pagination: pagination}\r\n *\r\n *  if ( r === null) {\r\n *     handle when no data was retrieved\r\n *  } else {\r\n *     handle new data\r\n * }\r\n *\r\n * Make sure you handle exceptions that are thrown.\r\n *\r\n * For custom scrolling, pass the scrolling information in the optional third parameter.\r\n * The content of the payload depends on whether the source is cas or compute.\r\n * For compute see the documentation for rowset in compute service.<https://developer.sas.com/apis/rest/Compute/#get-a-row-set-from-a-data-set>\r\n * CAS payload is not as rich the rowset for compute service\r\n * At this time the cas is handled thru custom casl code.\r\n * Future: use rowset from data management API.\r\n * The payload for CAS is as follows\r\n *  { qs: {\r\n *       start: <number>\r\n *       limit: <number>\r\n *       format: true|false,\r\n *       where: <where string>\r\n * };\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function scrollTable (direction, appEnv, payload) {\r\n  let fetchResults;\r\n  if (appEnv.source === 'cas') {\r\n    fetchResults = await icasScroll(direction, appEnv, payload);\r\n  } else {\r\n    fetchResults = await icomputeScroll(direction, appEnv, payload);\r\n  }\r\n  return fetchResults;\r\n}\r\n\r\nasync function icasScroll (direction, appEnv, payload) {\r\n  const { store, session } = appEnv;\r\n  const { initialFetch, table } = appEnv.appControl;\r\n  const cachePolicy = (appEnv.appControl.cachePolicy == null) ? true : appEnv.appControl.cachePolicy;\r\n  let control;\r\n\r\n  if (payload != null) {\r\n    control = { ...payload };\r\n  } else {\r\n    if (direction === 'first') {\r\n      control = { ...initialFetch };\r\n    } else if (direction !== null) {\r\n      control = { ...appEnv.state.pagination[direction] };\r\n      if (control.next === -1 || control.from <= 0) {\r\n        return null;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Need to do this until we change resaflib..\r\n\r\n  let c = {};\r\n  if (control.qs != null) {\r\n    c = { ...control.qs };\r\n    c.from = c.start + 1;\r\n    c.count = c.limit;\r\n  } else {\r\n    c = { ...control };\r\n  }\r\n  if (c.from <= 0 || c.next === -1) {\r\n    return null;\r\n  }\r\n  if (c.where == null) {\r\n    c.where = ' ';\r\n  }\r\n\r\n  c.table = table;\r\n  const r = await casFetchRows(store, session, c);\r\n\r\n  let t = null;\r\n  if (r !== null) {\r\n    t = await prepFormData(r.data, appEnv);\r\n    appEnv.state = {\r\n      modified   : [],\r\n      pagination : { ...r.pagination },\r\n      currentPage: control,\r\n      data       : [],\r\n      columns    : []\r\n    };\r\n    if (cachePolicy === true) {\r\n      appEnv.state.data = t.data;\r\n      appEnv.state.columns = t.columns;\r\n    }\r\n    t.pagination = { ...r.pagination };\r\n    return t;\r\n  }\r\n}\r\n\r\nasync function icomputeScroll (direction, appEnv, payload) {\r\n  const { store, tableSummary } = appEnv;\r\n  const { table, initialFetch } = appEnv.appControl;\r\n  const cachePolicy = (appEnv.appControl.cachePolicy == null) ? true : appEnv.appControl.cachePolicy;\r\n  let control = null;\r\n\r\n  const tname = `${table.libref}.${table.name}`.toLowerCase();\r\n\r\n  if (payload == null) {\r\n    if (direction === 'first') {\r\n      control = { ...initialFetch };\r\n    }\r\n  } else {\r\n    control = { ...payload };\r\n  }\r\n\r\n  // eslint-disable-next-line prefer-const\r\n\r\n  const data = await computeFetchData(store, tableSummary, tname, direction, control);\r\n\r\n  let result = null;\r\n  if (data !== null) {\r\n    result = await prepFormData(data, appEnv);\r\n    appEnv.state = {\r\n      modified   : [],\r\n      pagination : {},\r\n      currentPage: {},\r\n      data       : [],\r\n      columns    : []\r\n    };\r\n    if (cachePolicy === true) {\r\n      appEnv.state.data = result.data;\r\n      appEnv.state.columns = result.columns;\r\n    }\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nexport default scrollTable;\r\n","/* eslint-disable prefer-const */\r\n\r\nimport { initStore } from '@sassoftware/restaf';\r\nimport { casSetup, computeSetup, computeSetupTables, caslRun } from '@sassoftware/restaflib';\r\n// import deepcopy from 'deepcopy';\r\n\r\n/**\r\n * @description Setup an Edit session\r\n * @async\r\n * @module setup\r\n * @category restafedit/core\r\n * @param {logonPayload} logonPayload  -information for connecting to Viya\r\n * @param {appControl} appControl       control information\r\n * @param {string=} preamble  casl or datastep code to execute\r\n * @returns {promise}  returns appEnv to control the flow\r\n * @alias module: setup\r\n * @example\r\n *  const appEnv = await setup(logonPayload, appControl);\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n *\r\n */\r\n\r\nasync function setup (logonPayload, appControl, preamble) {\r\n  const store = initStore();\r\n  let appEnv;\r\n  if (logonPayload.authType == null) {\r\n    logonPayload.authType = 'code';\r\n  }\r\n  if (appControl.source === 'cas') {\r\n    appEnv = await icasSetup(store, logonPayload, appControl, preamble);\r\n  } else {\r\n    appEnv = await icomputeSetup(store, logonPayload, appControl, preamble);\r\n  }\r\n  return appEnv;\r\n}\r\n\r\nasync function icasSetup (store, logonPayload, appControl, preamble) {\r\n  const r = await casSetup(store, logonPayload);\r\n  let appEnv = {\r\n    source: appControl.source,\r\n\r\n    store,\r\n    session  : r.session,\r\n    servers  : r.servers,\r\n    restaflib: null,\r\n\r\n    logonPayload,\r\n    appControl,\r\n\r\n    state: {\r\n      modified   : [],\r\n      pagination : {},\r\n      currentPage: {},\r\n\r\n      data   : {},\r\n      columns: {}\r\n    },\r\n\r\n    id: Date()\r\n  };\r\n  if (preamble != null) {\r\n    const rx = await caslRun(store, r.session, preamble);\r\n    if (rx.details.statusCode !== 0) {\r\n      console.log(rx);\r\n      // eslint-disable-next-line no-throw-literal\r\n      throw 'Preamble failed. Please see console';\r\n    };\r\n  }\r\n  return appEnv;\r\n};\r\n\r\nasync function icomputeSetup (store, logonPayload, appControl, preamble) {\r\n  // eslint-disable-next-line prefer-const\r\n  ;\r\n  let session = await computeSetup(store, appControl.computeContext, logonPayload);\r\n  let tableSummary = await computeSetupTables(store, session, appControl.table, preamble);\r\n  let appEnv = {\r\n    source: appControl.source,\r\n\r\n    store,\r\n    session,\r\n    tableSummary,\r\n\r\n    servers  : null,\r\n    restaflib: null,\r\n\r\n    logonPayload,\r\n    appControl,\r\n\r\n    state: {\r\n      modified   : [],\r\n      pagination : {},\r\n      currentPage: {},\r\n\r\n      data   : {},\r\n      columns: {}\r\n    },\r\n\r\n    id: Date()\r\n  };\r\n  return appEnv;\r\n}\r\n\r\nexport default setup;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport casTableUnique from './casTableUnique';\r\nimport sasTableUnique from './sasTableUnique';\r\n\r\n/**\r\n * @description Get unique values for a specific column\r\n * @async\r\n * @module distinctValues\r\n * @category restafedit/core\r\n * @param {object} table {caslib: xxx, name: yyy}\r\n * @param {string} columnName    column name\r\n * @param {appEnv} appEnv   - app Environment from setup\r\n * @returns {promise}       - {an array of unique values }\r\n * @example\r\n *  let selectList = await distinctValues('company', appEnv))\r\n *  This is useful to get a list of unique values for selected columns.\r\n *  {company:['IBM', 'Microsoft', 'SAS'] }\r\n */\r\n\r\nasync function distinctValues (table, columnName, appEnv, payload) {\r\n  let data;\r\n  if (appEnv.source === 'cas') {\r\n    data = await casTableUnique(table, columnName, appEnv, payload);\r\n  } else {\r\n    data = await sasTableUnique(table, columnName, appEnv, payload);\r\n  }\r\n  return data;\r\n};\r\nexport default distinctValues;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nimport { caslRun } from '@sassoftware/restaflib';\r\n\r\n/**\r\n * @description Get unique values for a specific column\r\n * @async\r\n * @private\r\n * @module casTableUnique\r\n * @category restafedit/core\r\n * @param {object} table object\r\n * @param {string} columnName    column name\r\n * @param {appEnv} appEnv   app Environment from setup\r\n * @returns {promise}       {an array of unique values }\r\n * @example\r\n *  let selectList = await casTableUnique('company, appEnv))\r\n *  This is useful to get a list of unique values for selected columns.\r\n *  {columnName:[ array of unquew values] }\r\n */\r\n\r\nasync function casTableUnique (table, columnName, appEnv, payload) {\r\n  const { store, session } = appEnv;\r\n\r\n  const src = `\r\n  results = selectionLists(_args_.column,_args_.table.caslib, _args_.table.name);\r\n  send_response({casResults = {data=results}});\r\n  `\r\n  ;\r\n  const args = {\r\n    table,\r\n    column: columnName\r\n  };\r\n\r\n  const result = await caslRun(store, session, src, args, true);\r\n  if (result.results.casResults.data.statusCode !== 0) {\r\n    // eslint-disable-next-line no-throw-literal\r\n    throw 'Failed to create unique list';\r\n  }\r\n\r\n  const data = result.results.casResults.data.data;\r\n\r\n  return data;\r\n};\r\nexport default casTableUnique;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @description Get unique values for a specific column(sas table)\r\n * @async\r\n * @private\r\n * @module sasTableUnique\r\n * @category restafedit/core\r\n * @param {string} columnName    column name\r\n * @param {appEnv} appEnv   app Environment from setup\r\n * @returns {promise}       {an array of unique values }\r\n * @example\r\n *  let selectList = await casTableUnique('company, appEnv))\r\n *  This is useful to get a list of unique values for selected columns.\r\n *  {columnName:[ array of unquew values] }\r\n */\r\n\r\nasync function sasTableUnique (columnName, appEnv, payload) {\r\n  const data = {};\r\n  data[columnName] = [];\r\n  return data;\r\n};\r\nexport default sasTableUnique;\r\n","/* eslint-disable no-tabs */\r\n/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { casUpload, casAppendTable, computeRun } from '@sassoftware/restaflib';\r\n\r\n/**\r\n * @description Upload data (peding: upload to sas table)\r\n * @async\r\n * @module uploadData\r\n * @category restafedit/core\r\n * @param {object} output table\r\n * @param {array}  data\r\n * @param {array}  drop fields to drop from the output\r\n * @param {object} addon columns additional columns\r\n * @param {appEnv} appEnv   - app Environment from setup\r\n * @param {object=} masterTable if specified the data will be appended to this table\r\n * @param {boolean} saveFlag if true, the masterTable will be saved\r\n * @returns {promise}       - {an array of unique values }\r\n * @example\r\n *  let selectList = await distinctValues('company', appEnv))\r\n *  This is useful to get a list of unique values for selected columns.\r\n *  {company:['IBM', 'Microsoft', 'SAS'] }\r\n */\r\n\r\nasync function uploadData (table, data, drop, addon, appEnv, masterTable, saveFlag) {\r\n  const { store, session } = appEnv;\r\n  // eslint-disable-next-line prefer-const\r\n  let t = Object.keys(data[0]);\r\n  let dropArray = ['_index_', '_rowIndex'];\r\n  if (drop !== null) {\r\n    dropArray = dropArray.concat(drop);\r\n  }\r\n  const columns = t.filter(c => {\r\n    return !(dropArray.indexOf(c) >= 0);\r\n  });\r\n  const tempCols = {};\r\n  columns.forEach(k => {\r\n    tempCols[k] = appEnv.state.columns[k];\r\n  });\r\n\r\n  let csvArray = null;\r\n  if (appEnv.source === 'cas') {\r\n    csvArray = columns.join(',') + '\\n';\r\n  };\r\n\r\n  for (let i = 0; i < data.length; i++) {\r\n    let temp = data[i];\r\n    temp = { ...temp, ...addon };\r\n    const valArray = [];\r\n    columns.forEach((c, l) => {\r\n      let v = temp[c];\r\n      if (typeof v === 'string') {\r\n        v = v.trim();\r\n      }\r\n      valArray[l] = v;\r\n    });\r\n    if (csvArray === null) {\r\n      csvArray = valArray.join(',') + '\\n';\r\n    } else {\r\n      csvArray = csvArray + valArray.join(',') + '\\n';\r\n    }\r\n  }\r\n  let result;\r\n  if (appEnv.source === 'cas') {\r\n    result = await _casTableUpload(\r\n      store,\r\n      session,\r\n      table,\r\n      csvArray,\r\n      masterTable,\r\n      saveFlag\r\n    );\r\n  } else {\r\n    result = await _computeUpload(\r\n      store,\r\n      session,\r\n      tempCols,\r\n      table,\r\n      csvArray\r\n    );\r\n  }\r\n  return result;\r\n}\r\n\r\n// TBD: switch to a datastep with arrays for each column. More reliable\r\nasync function _computeUpload (store, session, columns, table, csvArray) {\r\n  let src = `data ${table.libref}.${table.name}; INFILE datalines delimiter=',' ;\\n`;\r\n  let l = '';\r\n  let inx = 'INPUT ';\r\n  for (const k in columns) {\r\n    const c = columns[k];\r\n    inx = inx + c.Column + ' ';\r\n    if (c.Type === 'CHAR') {\r\n      const x = ` ${c.Column} $ ${c.length} \\n`;\r\n      l = l + ' ' + x;\r\n    }\r\n  }\r\n  if (l.length > 0) {\r\n    l = 'LENGTH ' + l + ';\\n';\r\n  };\r\n  inx = inx + ';\\n';\r\n\r\n  src = src + ';\\n' + l + inx + 'datalines;\\n' + csvArray + '\\n; run; proc print;run;\\n';\r\n  await computeRun(store, session, src);\r\n  return { msg: 'done', statusCode: 0 };\r\n}\r\nasync function _casTableUpload (store, session, table, csvArray, masterTable, saveFlag) {\r\n  const t = `${table.caslib}.${table.name}`;\r\n  let r = await casUpload(store, session, null, t, true, csvArray);\r\n  if (masterTable != null) {\r\n    r = await casAppendTable(store, session, table, masterTable, saveFlag);\r\n    return r;\r\n  } else {\r\n    return r;\r\n  }\r\n}\r\nexport default uploadData;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @description Save the current table to disk\r\n * @async\r\n * @module saveTable\r\n * @category restafedit/core\r\n * @param {appEnv} appEnv\r\n * @param {object=} table - save the table to disk\r\n * @returns {promise}  Status object\r\n * @example\r\n * Saves the current cas table and leaves the inmemory table intact.\r\n * If you want to save some other inmemory table pass the optional second parameter\r\n * This is a noop for SAS Tables\r\n **/\r\n\r\nimport { casSaveTable } from '@sassoftware/restaflib';\r\n\r\nasync function saveTable (appEnv, table) {\r\n  const { store, session } = appEnv;\r\n\r\n  if (appEnv.source === 'compute') {\r\n    return { msg: 'Action does not apply to SAS 9 tables', statusCode: 0 };\r\n  }\r\n  const t = (table != null) ? table : appEnv.appControl.table;\r\n  await casSaveTable(store, session, t);\r\n  return { msg: 'Table saved', statusCode: 0 };\r\n}\r\nexport default saveTable;\r\n"],"names":["commonHandler","type","data","rowIndex","appEnv","appControl","editControl","handlers","Promise","resolve","statusCode","msg","_ref","e","reject","_settle","pact","state","value","s","_Pact","o","bind","v","then","observer","_computeUpdateData","store","session","payload","table","where","src","libref","name","set","comma","k","value2String","swhere","andbit","p","code","split","apiCall","links","job","jobState","qs","newState","timeout","status","prototype","onFulfilled","onRejected","result","this","callback","_this","_updateData","handler","source","casUpdateData","_appEnv$appControl","byvars","columns","t","custom","w","forEach","makePayload","updateTableRows","length","Array","isArray","_updateData3","array","body","i","_updateData2","_cycle","thenable","_temp4","_temp3","JSON","stringify","toString","cellEdit","currentData","_exit3","_temp5","_result","newDataRow","r","_exit2","_temp2","_result2","cachePolicy","_rowIndex","iautoSave","_commonHandler","_updateTableRows","_temp","_extends","autoSave","_appEnv$appControl$ed","f","svalue","Type","toLowerCase","parseFloat","isNaN","text2Float","_temp6","prepFormData","eColumns","schema","Column","Label","customColumns","c","newRows","rows","row","rown","rowObj","makeRowObject","push","statusi","fetchTableRows","control","icasRows","from","start","count","limit","next","casFetchRows","modified","pagination","currentPage","tableSummary","tname","computeFetchData","format","icomputeRows","scrollTable","direction","fetchResults","_appEnv$appControl2","initialFetch","_prepFormData2","icasScroll","_icasScroll","icomputeScroll","_prepFormData","setup","logonPayload","preamble","initStore","authType","casSetup","servers","restaflib","id","Date","caslRun","rx","details","console","log","icasSetup","_icasSetup","icomputeSetup","computeSetup","computeContext","computeSetupTables","_icomputeSetup","distinctValues","columnName","column","results","casResults","casTableUnique","_casTableUnique","sasTableUnique","uploadData","drop","addon","masterTable","saveFlag","Object","keys","dropArray","concat","filter","indexOf","tempCols","csvArray","join","temp","l","trim","valArray","_loop","_casTableUpload","casUpload","caslib","casAppendTable","_casAppendTable","_casTableUpload2","_computeUpload","inx","computeRun","saveTable","casSaveTable"],"mappings":"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"}