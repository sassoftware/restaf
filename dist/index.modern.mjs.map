{"version":3,"file":"index.modern.mjs","sources":["../src/commonHandler.js","../src/updateTableRows.js","../src/cellEdit.js","../src/text2Float.js","../src/prepFormData.js","../src/scrollTable.js","../src/setup.js","../src/distinctValues.js","../src/casTableUnique.js","../src/computeTableUnique.js","../src/uploadData.js","../src/saveTable.js","../src/termApp"],"sourcesContent":["/*\r\n * Copyright © 2022, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @description Run init, main or term handlers\r\n * @async\r\n * @private\r\n * @module commonHandler\r\n * @category restafedit/core\r\n * @param {string} type   - type of exit (init|main|term)\r\n * @param {rowObject} data        - rowObject\r\n * @param {number} rowIndex    - client-side Row Index\r\n * @param {appEnv} appEnv      - app Environment from setup\r\n * @returns {promise}     - [data, status]\r\n * @example\r\n * The function returns the updated data and the status.\r\n * This function is called by cellEdit, so there is probably little reason\r\n * to call this directly\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function commonHandler (type, data, rowIndex, appEnv) {\r\n  const { handlers } = appEnv.appControl.editControl;\r\n  if (handlers[type] == null) {\r\n    return [data, { statusCode: 0, msg: null }];\r\n  } else {\r\n    const [newDataRow, status] = await handlers[type](data, rowIndex, appEnv, type);\r\n    return [newDataRow, status];\r\n  }\r\n};\r\nexport default commonHandler;\r\n","import { casUpdateData } from '@sassoftware/restaflib';\r\n/**\r\n * @description Update the row on the server\r\n * @async\r\n * @private\r\n * @module updateTableRows\r\n * @category restafedit/core\r\n * @param {rowObjectArray|rowObject} data  - data as a rowObject or Array of rowObjects\r\n * @param {appEnv} appEnv   - app Environment object from setup\r\n * @returns {promise}       - {msg: string, statusCode: 0|1|2}\r\n * @example\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function updateTableRows (data, appEnv) {\r\n  let result;\r\n  const byvars = appEnv.appControl.byvars;\r\n  if (byvars === null || byvars.length === 0) {\r\n    return [null, { msg: 'Error: Please specify a by variable', statusCode: 1 }];\r\n  }\r\n\r\n  if (Array.isArray(data) === true) {\r\n    for (let i = 0; i < data.length; i++) {\r\n      result = await _updateData(data[i], appEnv);\r\n    }\r\n  } else {\r\n    result = await _updateData(data, appEnv);\r\n  }\r\n  return result;\r\n}\r\n\r\nfunction makePayload (data, appEnv) {\r\n  const { table, byvars } = appEnv.appControl;\r\n  const columns = appEnv.state.columns;\r\n\r\n  const t = {};\r\n  for (const k in data) {\r\n    if (!(k === '_index_' || k === '_rowIndex') && columns[k].custom === false) {\r\n      t[k] = data[k];\r\n    };\r\n  };\r\n\r\n  const w = {};\r\n  byvars.forEach((k) => {\r\n    w[k] = t[k];\r\n  });\r\n  const payload = {\r\n    table,\r\n    data : t,\r\n    where: w\r\n  };\r\n  return payload;\r\n}\r\n\r\nasync function _updateData (data, appEnv) {\r\n  const { store, session } = appEnv;\r\n  const handler = (appEnv.source === 'cas') ? casUpdateData : _computeUpdateData;\r\n  const payload = makePayload(data, appEnv);\r\n  const status = await handler(store, session, payload);\r\n  return status;\r\n}\r\n// TBD: Move to restaflib\r\n\r\nasync function _computeUpdateData (store, session, payload) {\r\n  const { data, table, where } = payload;\r\n  let src =\r\n    `proc sql; update ${table.libref}.${table.name}`;\r\n  let set = 'SET ';\r\n  let comma = ' ';\r\n  for (const k in data) {\r\n    set = set + comma + k + '=' + value2String(data[k]);\r\n    comma = ', ';\r\n  };\r\n  src = src + ' ' + set;\r\n  let swhere = ' WHERE ';\r\n  let andbit = ' ';\r\n\r\n  for (const k in where) {\r\n    const v = where[k];\r\n    swhere = swhere + andbit + k + `= ${value2String(v)} `;\r\n    andbit = ' AND ';\r\n  }\r\n  src = src + ' ' + swhere + ';run;';\r\n  const asrc = src.split(/\\r?\\n/);\r\n\r\n  // TBD: switch to computeRun on next pass\r\n  const p = {\r\n    data: { code: asrc }\r\n  };\r\n  const job = await store.apiCall(session.links('execute'), p);\r\n  const qs = {\r\n    qs: {\r\n      newState: 'Completed',\r\n      timeout : 1\r\n    }\r\n  };\r\n  const status = await store.jobState(job, qs);\r\n  const c = (status.data === 'completed' ? 0 : 1);\r\n\r\n  return { statusCode: c, msg: status.data };\r\n}\r\n\r\nfunction value2String (value) {\r\n  let valueString;\r\n  if (value == null) {\r\n    valueString = '.';\r\n  } else if (typeof value === 'string') {\r\n    valueString = JSON.stringify(value);\r\n  } else {\r\n    valueString = value.toString();\r\n  }\r\n  return valueString;\r\n}\r\nexport default updateTableRows;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport text2Float from './text2Float';\r\nimport commonHandler from './commonHandler';\r\nimport updateTableRows from './updateTableRows';\r\n\r\n/**\r\n * @description Process edit of a cell and optionally save the data\r\n * @async\r\n * @module cellEdit\r\n * @category restafedit/core\r\n * @param {string} name     - name of the field (lower case)\r\n * @param {*} value         - the new value for name field\r\n * @param {number} rowIndex - row Index ( index in the data array on client)\r\n * @param {rowObject} currentData  - RowObject for the entire row prior to change\r\n * @param {appEnv} appEnv   - app Environment from setup\r\n * @returns {promise}       - {data: updated data, status: status }\r\n * @example\r\n * data schema {column1: value, column2, value,...}\r\n * status schema {statusCode: 0|1|2, msg: some string}\r\n * The currentData object is also updated with the latest values.\r\n *\r\n * const r = await cellEdit'x1',100, 1, d, appEnv)\r\n    - If the column has an handler it will be called.\r\n    - If 'main\" handler is specified, it will be called.\r\n    - If autoSave is true\r\n      - The 'term' handler(if specified) will be called\r\n      - The data for that row will be persisted to the server\r\n */\r\nasync function cellEdit (name, value, rowIndex, currentData, appEnv) {\r\n  /* do not modify the data directly. caller will probably do a setState */\r\n\r\n  let newDataRow = { ...currentData };\r\n  const columns = appEnv.state.columns;\r\n  const { handlers, autoSave } = appEnv.appControl.editControl;\r\n  const iautoSave = (autoSave == null) ? true : autoSave;\r\n  const cachePolicy = (appEnv.appControl.cachePolicy == null) ? true : appEnv.appControl.cachePolicy;\r\n\r\n  newDataRow[name] = text2Float(value, columns[name]);\r\n  let status = { statusCode: 0, msg: '' };\r\n\r\n  if (handlers[name] != null) {\r\n    const r = await handlers[name](newDataRow, name, rowIndex, appEnv);\r\n    newDataRow = r[0];\r\n    status = r[1];\r\n    if (status.statusCode === 2) {\r\n      return { data: r[0], status };\r\n    }\r\n  }\r\n  let r = await commonHandler('main', newDataRow, rowIndex, appEnv);\r\n  if (iautoSave === true) {\r\n    r = await commonHandler('term', r[0], rowIndex, appEnv);\r\n    status = r[1];\r\n    if (status.statusCode === 2) {\r\n      return { data: r[0], status };\r\n    }\r\n    status = await updateTableRows(r[0], appEnv);\r\n  }\r\n  newDataRow = r[0];\r\n\r\n  if (cachePolicy === true) {\r\n    appEnv.state.data[currentData._rowIndex] = newDataRow;\r\n  }\r\n\r\n  return ({ data: newDataRow, status });\r\n}\r\nexport default cellEdit;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nfunction text2Float (value, f) {\r\n  let svalue = value;\r\n  const t = f.Type.toLowerCase();\r\n  if (typeof svalue === 'string' && (t === 'decimal' || t === 'number' || t === 'double' || t === 'float')) {\r\n    svalue = parseFloat(value * 1.0);\r\n    if (isNaN(value) === true) {\r\n      value = 0;\r\n    }\r\n  }\r\n  return svalue;\r\n}\r\nexport default text2Float;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/*\r\n* output\r\n* extended columns and data ready for use in dataform and table\r\n*/\r\nimport commonHandler from './commonHandler';\r\n/**\r\n * @description reduce fetch results\r\n * @private\r\n * @async\r\n * @module prepFormData\r\n * @param {object} result - result from casFetchRow(rows and schema)\r\n * @param {object} appEnv - app Environment from setup\r\n * @returns {promise}     - {columns: eColumns, rowsObject: newRows}\r\n */\r\nasync function prepFormData (result, appEnv) {\r\n  const { schema, rows } = result;\r\n  const customColumns = appEnv.appControl.customColumns;\r\n  let status = { statusCode: 0, msg: 'Initialization was successful' };\r\n\r\n  const makeRowObject = (columns, row, rown) => {\r\n    const rowObj = { _rowIndex: rown };\r\n    row.forEach((r, i) => {\r\n      const s = columns[i];\r\n      const name = s.Column.toLowerCase();\r\n      rowObj[name] = r;\r\n    });\r\n\r\n    if (customColumns != null) {\r\n      for (const k in customColumns) {\r\n        const c = customColumns[k];\r\n        const name = c.Column.toLowerCase();\r\n        rowObj[name] = c.value;\r\n      }\r\n    }\r\n    return rowObj;\r\n  };\r\n\r\n  const newRows = [];\r\n  for (let i = 0; i < rows.length; i++) {\r\n    const t = makeRowObject(schema, rows[i], i);\r\n\r\n    const [t1, statusi] = await commonHandler('init', t, i, appEnv);\r\n    status = statusi;\r\n    newRows.push(t1);\r\n  };\r\n\r\n  // extend column and make it an object\r\n  const eColumns = {};\r\n  schema.forEach((s, i) => {\r\n    const name = s.Column.toLowerCase();\r\n    s.name = name;\r\n    s.Label = (s.Label == null || s.Label.length === 0) ? s.Column : s.Label;\r\n    if (s.Type == null) {\r\n      s.Type = (s.type == null) ? 'double' : s.type;\r\n    }\r\n    s.custom = false;\r\n    eColumns[name] = s;\r\n  });\r\n\r\n  // add computed columns to the array.\r\n  if (customColumns != null) {\r\n    for (const k in customColumns) {\r\n      const c = { ...customColumns[k] };\r\n      c.name = k;\r\n      c.custom = true;\r\n      eColumns[k] = c;\r\n    }\r\n  }\r\n\r\n  return {\r\n    columns: eColumns,\r\n    data   : newRows,\r\n    status\r\n  };\r\n}\r\nexport default prepFormData;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { computeFetchData, casFetchRows } from '@sassoftware/restaflib';\r\nimport prepFormData from './prepFormData';\r\n/**\r\n * @description Simplify scrolling using next|prev|top\r\n * @async\r\n * @module scrollTable\r\n * @category restafedit/core\r\n * @param {string} direction direction(next|prev|first)\r\n * @param {appEnv} appEnv\r\n * @param {object=} payload  override pogination with custom scrolling\r\n * @returns {promise}  result ready for display or null if it did not scroll\r\n * @example\r\n *  let r = await scrollTable('next', appEnv);\r\n *    r=== { data:data, columns: ecolumns}\r\n *\r\n *  if ( r === null) {\r\n *     handle when no data was retrieved\r\n *  } else {\r\n *     handle new data\r\n * }\r\n *\r\n * init handler(if specified) will be executed for each row.\r\n *\r\n * Make sure you handle exceptions that are thrown.The library does not handle those and\r\n * assumes some higher level code will have a catch\r\n *\r\n * For custom scrolling, pass the scrolling information in the optional third parameter.\r\n * The content of the payload depends on whether the source is cas or compute.\r\n * For compute see the documentation for rowset in compute service.<https://developer.sas.com/apis/rest/Compute/#get-a-row-set-from-a-data-set>\r\n * CAS payload is not as rich the rowset for compute service\r\n * At this time the cas is handled thru custom casl code.\r\n * Future: use rowset from data management API.\r\n * The payload for CAS is as follows\r\n *  { qs: {\r\n *       start: <number>\r\n *       limit: <number>\r\n *       format: true|false,\r\n *       where: <where string>\r\n * };\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function scrollTable (direction, appEnv, payload) {\r\n  let fetchResults;\r\n  if (appEnv.source === 'cas') {\r\n    fetchResults = await icasScroll(direction, appEnv, payload);\r\n  } else {\r\n    fetchResults = await icomputeScroll(direction, appEnv, payload);\r\n  }\r\n  return fetchResults;\r\n}\r\n\r\nasync function icasScroll (direction, appEnv, payload) {\r\n  const { store, session } = appEnv;\r\n  const { initialFetch, table } = appEnv.appControl;\r\n  const cachePolicy = (appEnv.appControl.cachePolicy == null) ? true : appEnv.appControl.cachePolicy;\r\n  let control;\r\n\r\n  if (payload != null) {\r\n    control = { ...payload };\r\n  } else {\r\n    if (direction === 'first') {\r\n      control = { ...initialFetch };\r\n    } else if (direction !== null) {\r\n      control = { ...appEnv.state.pagination[direction] };\r\n      if (control.next === -1 || control.from <= 0) {\r\n        return null;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Need to do this until we change resaflib..\r\n\r\n  let c = {};\r\n  if (control.qs != null) {\r\n    c = { ...control.qs };\r\n    c.from = c.start + 1;\r\n    c.count = c.limit;\r\n  } else {\r\n    c = { ...control };\r\n  }\r\n  if (c.from <= 0 || c.next === -1) {\r\n    return null;\r\n  }\r\n  if (c.where == null) {\r\n    c.where = ' ';\r\n  }\r\n\r\n  c.table = table;\r\n  const r = await casFetchRows(store, session, c);\r\n\r\n  let t = null;\r\n  if (r !== null) {\r\n    t = await prepFormData(r.data, appEnv);\r\n    appEnv.state = {\r\n      modified   : [],\r\n      pagination : { ...r.pagination },\r\n      currentPage: control,\r\n      data       : [],\r\n      columns    : []\r\n    };\r\n    if (cachePolicy === true) {\r\n      appEnv.state.data = t.data;\r\n      appEnv.state.columns = t.columns;\r\n    }\r\n    t.pagination = { ...r.pagination };\r\n    return t;\r\n  }\r\n}\r\n\r\nasync function icomputeScroll (direction, appEnv, payload) {\r\n  const { store, tableSummary } = appEnv;\r\n  const { table, initialFetch } = appEnv.appControl;\r\n  const cachePolicy = (appEnv.appControl.cachePolicy == null) ? true : appEnv.appControl.cachePolicy;\r\n  let control = null;\r\n\r\n  const tname = `${table.libref}.${table.name}`.toLowerCase();\r\n\r\n  if (payload == null) {\r\n    if (direction === 'first') {\r\n      control = { ...initialFetch };\r\n    }\r\n  } else {\r\n    control = { ...payload };\r\n  }\r\n\r\n  // eslint-disable-next-line prefer-const\r\n\r\n  const data = await computeFetchData(store, tableSummary, tname, direction, control);\r\n\r\n  let result = null;\r\n  if (data !== null) {\r\n    result = await prepFormData(data, appEnv);\r\n    appEnv.state = {\r\n      modified   : [],\r\n      pagination : {},\r\n      currentPage: {},\r\n      data       : [],\r\n      columns    : []\r\n    };\r\n    if (cachePolicy === true) {\r\n      appEnv.state.data = result.data;\r\n      appEnv.state.columns = result.columns;\r\n    }\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nexport default scrollTable;\r\n","/* eslint-disable prefer-const */\r\n\r\nimport { initStore } from '@sassoftware/restaf';\r\nimport { casSetup, computeSetup, computeSetupTables, caslRun } from '@sassoftware/restaflib';\r\n// import deepcopy from 'deepcopy';\r\n\r\n/**\r\n * @description Setup an Edit session\r\n * @async\r\n * @module setup\r\n * @category restafedit/core\r\n * @param {logonPayload} logonPayload  -information for connecting to Viya\r\n * @param {appControl} appControl       control information\r\n * @returns {promise}  returns appEnv to control the flow\r\n * @alias module: setup\r\n * @example\r\n *  const appEnv = await setup(logonPayload, appControl);\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n *\r\n */\r\n\r\nasync function setup (logonPayload, appControl) {\r\n  let storeOptions = (logonPayload.storeOptions != null) ? logonPayload.storeOptions : { casProxy: true };\r\n  const store = initStore(storeOptions);\r\n  let appEnv;\r\n  if (logonPayload.authType == null) {\r\n    logonPayload.authType = 'code';\r\n  }\r\n  if (appControl.source === 'cas') {\r\n    appEnv = await icasSetup(store, logonPayload, appControl);\r\n  } else {\r\n    appEnv = await icomputeSetup(store, logonPayload, appControl);\r\n  }\r\n  console.log(appControl.editControl.handlers.initApp);\r\n  if (appControl.editControl.handlers.initApp != null) {\r\n    const r = await appControl.editControl.handlers.initApp(appEnv, 'initApp');\r\n    if (r.statusCode === 2) {\r\n      console.log(JSON.stringify(r, null, 4));\r\n      // eslint-disable-next-line no-throw-literal\r\n      throw 'initApp failed. Please see console';\r\n    }\r\n  }\r\n  return appEnv;\r\n}\r\n\r\nasync function icasSetup (store, logonPayload, appControl) {\r\n  debugger;\r\n  const r = await casSetup(store, logonPayload);\r\n  const preamble = (appControl.editControl.handlers.initApp != null) ? null : appControl.preamble;\r\n\r\n  let appEnv = {\r\n    source: appControl.source,\r\n\r\n    store,\r\n    session  : r.session,\r\n    servers  : r.servers,\r\n    restaflib: null,\r\n\r\n    logonPayload,\r\n    appControl,\r\n\r\n    state: {\r\n      modified   : [],\r\n      pagination : {},\r\n      currentPage: {},\r\n\r\n      data   : {},\r\n      columns: {}\r\n    },\r\n\r\n    id: Date()\r\n  };\r\n\r\n  if (preamble !== null) {\r\n    const rx = await caslRun(store, r.session, preamble);\r\n    if (rx.disposition.statusCode !== 0) {\r\n      console.log(JSON.stringify(rx, null, 4));\r\n      // eslint-disable-next-line no-throw-literal\r\n      throw 'Preamble failed. Please see console';\r\n    };\r\n  };\r\n\r\n  return appEnv;\r\n};\r\n\r\nasync function icomputeSetup (store, logonPayload, appControl) {\r\n  // eslint-disable-next-line prefer-const\r\n  const preamble = (appControl.editControl.handlers.initApp != null) ? null : appControl.preamble;\r\n  let session = await computeSetup(store, appControl.computeContext, logonPayload);\r\n\r\n  let appEnv = {\r\n    source: appControl.source,\r\n\r\n    store,\r\n    session,\r\n    servers  : null,\r\n    restaflib: null,\r\n\r\n    logonPayload,\r\n    appControl,\r\n\r\n    state: {\r\n      modified   : [],\r\n      pagination : {},\r\n      currentPage: {},\r\n\r\n      data   : {},\r\n      columns: {}\r\n    },\r\n\r\n    id: Date()\r\n  };\r\n\r\n  if (appControl.editControl.handlers.initApp != null) {\r\n    const r = await appControl.editControl.handlers.initApp(appEnv, 'initApp');\r\n    if (r.statusCode === 2) {\r\n      console.log(JSON.stringify(r, null, 4));\r\n      // eslint-disable-next-line no-throw-literal\r\n      throw 'initApp failed. Please see console';\r\n    }\r\n  }\r\n\r\n  const tableSummary = await computeSetupTables(store, session, appControl.table, preamble);\r\n  appEnv.tableSummary = tableSummary;\r\n\r\n  return appEnv;\r\n}\r\n\r\nexport default setup;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport casTableUnique from './casTableUnique';\r\nimport computeTableUnique from './computeTableUnique';\r\n\r\n/**\r\n * @description Get unique values for a specific column\r\n * @async\r\n * @module distinctValues\r\n * @category restafedit/core\r\n * @param {string} columnName    column name\r\n * @param {appEnv} appEnv   - app Environment from setup\r\n * @param {casTable|computeTable=} table Optionally point to a different table\r\n * @returns {promise}       - {an array of unique values }\r\n * @example\r\n *  let selectList = await distinctValues('company', appEnv))\r\n *  This is useful to get a list of unique values for selected columns.\r\n *  {company:['IBM', 'Microsoft', 'SAS'] }\r\n */\r\n\r\nasync function distinctValues (columnName, appEnv, table) {\r\n  let data;\r\n  const t = (table != null) ? table : appEnv.appControl.table;\r\n  if (appEnv.source === 'cas') {\r\n    data = await casTableUnique(t, columnName, appEnv);\r\n  } else {\r\n    data = await computeTableUnique(t, columnName, appEnv);\r\n  }\r\n  return data;\r\n};\r\nexport default distinctValues;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nimport { caslRun } from '@sassoftware/restaflib';\r\n\r\n/**\r\n * @description Get unique values for a specific column\r\n * @async\r\n * @private\r\n * @module casTableUnique\r\n * @category restafedit/core\r\n * @param {object} table object\r\n * @param {string} columnName    column name\r\n * @param {appEnv} appEnv   app Environment from setup\r\n * @returns {promise}       {an array of unique values }\r\n * @example\r\n *  let selectList = await casTableUnique('company, appEnv))\r\n *  This is useful to get a list of unique values for selected columns.\r\n *  {columnName:[ array of unque values] }\r\n */\r\n\r\nasync function casTableUnique (table, columnName, appEnv) {\r\n  const { store, session } = appEnv;\r\n\r\n  const src = `\r\n  results = selectionLists(_args_.column,_args_.table.caslib, _args_.table.name);\r\n  send_response({casResults = {data=results}});\r\n  `\r\n  ;\r\n  const args = {\r\n    table,\r\n    column: columnName\r\n  };\r\n\r\n  const result = await caslRun(store, session, src, args, true);\r\n  if (result.results.casResults.data.statusCode !== 0) {\r\n    // eslint-disable-next-line no-throw-literal\r\n    throw 'Failed to create unique list';\r\n  }\r\n\r\n  const data = result.results.casResults.data.data;\r\n\r\n  return data;\r\n};\r\nexport default casTableUnique;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { computeRun, computeFetchData } from '@sassoftware/restaflib';\r\n/**\r\n * @description Get unique values for a specific column(sas table)\r\n * @async\r\n * @private\r\n * @module sasTableUnique\r\n * @category restafedit/core\r\n * @param {string} columnName    column name\r\n * @param {appEnv} appEnv   app Environment from setup\r\n * @returns {promise}       {an array of unique values }\r\n * @example\r\n *  let selectList = await casTableUnique('company, appEnv))\r\n *  This is useful to get a list of unique values for selected columns.\r\n *  {columnName:[ array of unquew values] }\r\n */\r\n\r\nasync function computeTableUnique (table, columnName, appEnv) {\r\n  const { store, session } = appEnv;\r\n  const t = `${table.libref}.${table.name}`;\r\n\r\n  const code = `\r\n    PROC SQL;\r\n    CREATE TABLE WORK.QUERY\r\n    AS\r\n    SELECT distinct(${columnName}) as utype FROM ${t};\r\n   QUIT;`;\r\n\r\n  const computeSummary = await computeRun(store, session, code);\r\n  const values = {};\r\n  let dir = 'first';\r\n  const res = [];\r\n  let data;\r\n  do {\r\n    data = await computeFetchData(store, computeSummary, 'QUERY', dir);\r\n    const r = data.rows.map(r1 => r1[0]);\r\n    res.push(...r);\r\n    dir = 'next';\r\n  } while (data.scrollOptions.indexOf('next') >= 0);\r\n\r\n  values[columnName] = res;\r\n  return values;\r\n};\r\nexport default computeTableUnique;\r\n","/* eslint-disable no-tabs */\r\n/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { casUpload, casAppendTable, computeRun } from '@sassoftware/restaflib';\r\n\r\n/**\r\n * @description Upload client data to a new table on client\r\n * @async\r\n * @module uploadData\r\n * @category restafedit/core\r\n * @param {object} output table\r\n * @param {array}  data if null, data from appEnv.state will be uploded.\r\n * @param {array}  drop fields to drop from the output\r\n * @param {object} addon columns additional columns(useful for adding key fields)\r\n * @param {appEnv} appEnv   - app Environment from setup\r\n * @returns {promise}       - {an array of unique values }\r\n * @example\r\n *  await uploadData(outputTable, data, drop, {},appEnv)\r\n *  This is useful to get a list of unique values for selected columns.\r\n *  {company:['IBM', 'Microsoft', 'SAS'] }\r\n */\r\n\r\nasync function uploadData (table, data, drop, addon, appEnv, masterTable, saveFlag) {\r\n  const { store, session } = appEnv;\r\n  // eslint-disable-next-line prefer-const\r\n  if (data === null) {\r\n    data = appEnv.state.data;\r\n  };\r\n  const t = Object.keys(data[0]);\r\n  let dropArray = ['_index_', '_rowIndex'];\r\n  if (drop !== null) {\r\n    dropArray = dropArray.concat(drop);\r\n  }\r\n  const columns = t.filter(c => {\r\n    return !(dropArray.indexOf(c) >= 0);\r\n  });\r\n  const tempCols = {};\r\n  columns.forEach(k => {\r\n    tempCols[k] = appEnv.state.columns[k];\r\n  });\r\n\r\n  let csvArray = null;\r\n  if (appEnv.source === 'cas') {\r\n    csvArray = columns.join(',') + '\\n';\r\n  };\r\n\r\n  for (let i = 0; i < data.length; i++) {\r\n    let temp = data[i];\r\n    temp = { ...temp, ...addon };\r\n    const valArray = [];\r\n    columns.forEach((c, l) => {\r\n      let v = temp[c];\r\n      if (typeof v === 'string') {\r\n        v = v.trim();\r\n      }\r\n      valArray[l] = v;\r\n    });\r\n    if (csvArray === null) {\r\n      csvArray = valArray.join(',') + '\\n';\r\n    } else {\r\n      csvArray = csvArray + valArray.join(',') + '\\n';\r\n    }\r\n  }\r\n  let result;\r\n  if (appEnv.source === 'cas') {\r\n    result = await _casTableUpload(\r\n      store,\r\n      session,\r\n      table,\r\n      csvArray,\r\n      masterTable,\r\n      saveFlag\r\n    );\r\n  } else {\r\n    result = await _computeUpload(\r\n      store,\r\n      session,\r\n      tempCols,\r\n      table,\r\n      csvArray\r\n    );\r\n  }\r\n  return result;\r\n}\r\n\r\n// TBD: switch to a datastep with arrays for each column. More reliable\r\nasync function _computeUpload (store, session, columns, table, csvArray) {\r\n  let src = `data ${table.libref}.${table.name}; INFILE datalines delimiter=',' ;\\n`;\r\n  let l = '';\r\n  let inx = 'INPUT ';\r\n  for (const k in columns) {\r\n    const c = columns[k];\r\n    inx = inx + c.Column + ' ';\r\n    if (c.Type === 'CHAR') {\r\n      const x = ` ${c.Column} $ ${c.length} \\n`;\r\n      l = l + ' ' + x;\r\n    }\r\n  }\r\n  if (l.length > 0) {\r\n    l = 'LENGTH ' + l + ';\\n';\r\n  };\r\n  inx = inx + ';\\n';\r\n\r\n  src = src + ';\\n' + l + inx + 'datalines;\\n' + csvArray + '\\n; run; proc print;run;\\n';\r\n  await computeRun(store, session, src);\r\n  return { msg: 'done', statusCode: 0 };\r\n}\r\nasync function _casTableUpload (store, session, table, csvArray, masterTable, saveFlag) {\r\n  const t = `${table.caslib}.${table.name}`;\r\n  let r = await casUpload(store, session, null, t, true, csvArray);\r\n  if (masterTable != null) {\r\n    r = await casAppendTable(store, session, table, masterTable, saveFlag);\r\n    return r;\r\n  } else {\r\n    return r;\r\n  }\r\n}\r\nexport default uploadData;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @description Save the current table to disk\r\n * @async\r\n * @module saveTable\r\n * @category restafedit/core\r\n * @param {appEnv} appEnv\r\n * @param {object=} table - save the table to disk\r\n * @returns {promise}  Status object\r\n * @example\r\n * Saves the current cas table and leaves the inmemory table intact.\r\n * If you want to save some other inmemory table pass the optional second parameter\r\n * This is a noop for SAS Tables\r\n **/\r\n\r\nimport { casSaveTable } from '@sassoftware/restaflib';\r\n\r\nasync function saveTable (appEnv, table) {\r\n  const { store, session } = appEnv;\r\n\r\n  if (appEnv.source === 'compute') {\r\n    return { msg: 'Action does not apply to SAS 9 tables', statusCode: 0 };\r\n  }\r\n  const t = (table != null) ? table : appEnv.appControl.table;\r\n  await casSaveTable(store, session, t);\r\n  return { msg: 'Table saved', statusCode: 0 };\r\n}\r\nexport default saveTable;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @description Run termapp handler(if specified) and delete the cas|compute session(optional)\r\n * @async\r\n * @module termSession\r\n * @category restafedit/core\r\n * @param {appEnv} appEnv   app Environment from setup\r\n * @param {boolean=} deleteSession  default is true\r\n * @returns {promise}       status object\r\n * @example\r\n *  let r  = await termSession(appEnv)\r\n *  This is a good option for doing some post processing of the edited data.\r\n *  If the post processing is done on the Viya Server, recommend using restaf and restafedit to make\r\n *  the REST calls.\r\n */\r\n\r\nasync function termApp (appEnv, deleteSession) {\r\n  const { store, session } = appEnv;\r\n  const handlers = appEnv.appControl.editControl.handlers;\r\n  if (handlers.termapp != null) {\r\n    await handlers.termapp(appEnv);\r\n  }\r\n\r\n  // Setup for user supplied session which we do not want to delete\r\n  if (deleteSession !== false) {\r\n    await store.apiCall(session.links('delete'));\r\n  };\r\n\r\n  return { msg: 'Session terminated', statusCode: 0 };\r\n};\r\nexport default termApp;\r\n"],"names":["async","type","data","rowIndex","appEnv","handlers","appControl","editControl","statusCode","msg","newDataRow","status","updateTableRows","result","byvars","length","Array","isArray","i","_updateData","store","session","handler","source","casUpdateData","_computeUpdateData","payload","table","state","columns","k","custom","t","w","forEach","where","makePayload","src","libref","name","set","comma","value2String","swhere","andbit","p","code","split","job","apiCall","links","jobState","qs","newState","timeout","value","valueString","JSON","stringify","toString","cellEdit","currentData","_extends","autoSave","iautoSave","cachePolicy","f","svalue","Type","toLowerCase","parseFloat","isNaN","text2Float","_r","r","commonHandler","_rowIndex","prepFormData","schema","rows","customColumns","makeRowObject","row","rown","rowObj","Column","c","t1","statusi","newRows","push","s","Label","eColumns","direction","fetchResults","initialFetch","control","pagination","next","from","start","count","limit","casFetchRows","modified","currentPage","icasScroll","tableSummary","tname","computeFetchData","icomputeScroll","setup","logonPayload","initStore","storeOptions","casProxy","authType","casSetup","preamble","initApp","servers","restaflib","id","Date","rx","caslRun","disposition","console","log","icasSetup","computeSetup","computeContext","computeSetupTables","icomputeSetup","distinctValues","columnName","args","column","results","casResults","casTableUnique","computeSummary","computeRun","values","dir","res","map","r1","scrollOptions","indexOf","computeTableUnique","uploadData","drop","addon","masterTable","saveFlag","Object","keys","dropArray","concat","filter","tempCols","csvArray","join","temp","valArray","l","v","trim","caslib","casUpload","casAppendTable","_casTableUpload","inx","_computeUpload","termApp","deleteSession","termapp"],"mappings":"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"}