{"version":3,"file":"index.umd.js","sources":["../src/commonHandler.js","../src/updateTableRows.js","../src/prepFormData.js","../src/cellEdit.js","../src/text2Float.js","../src/distinctValues.js","../src/casTableUnique.js","../src/sasTableUnique.js","../src/fetchTableRows.js","../src/saveTable.js","../src/scrollTable.js","../src/setup.js","../src/uploadData.js"],"sourcesContent":["/*\r\n * Copyright © 2022, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @description Run init, main or term handlers\r\n * @async\r\n * @module commonHandler\r\n * @category restafedit/core\r\n * @param {string} type   - type of exit (init|main|term)\r\n * @param {rowObject} data        - rowObject\r\n * @param {number} rowIndex    - client-side Row Index\r\n * @param {appEnv} appEnv      - app Environment from setup\r\n * @returns {promise}     - [data, status]\r\n * @example\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function commonHandler (type, data, rowIndex, appEnv) {\r\n  const { handlers } = appEnv.appControl.editControl;\r\n  if (handlers[type] == null) {\r\n    return [data, { statusCode: 0, msg: null }];\r\n  } else {\r\n    const [newDataRow, status] = await handlers[type](data, rowIndex, appEnv, type);\r\n    return [newDataRow, status];\r\n  }\r\n};\r\nexport default commonHandler;\r\n","import { casUpdateData, computeUpdateData } from '@sassoftware/restaflib';\r\n/**\r\n * @description Update the row on the server\r\n * @async\r\n * @module updateTableRows\r\n * @category restafedit/core\r\n * @param {rowObject} data  - data as a rowObject or Array of rowObjects\r\n * @param {appEnv} appEnv   - app Environment object from setup\r\n * @returns {promise}       - {msg: string, statusCode: 0|1|2}\r\n * @example\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function updateTableRows (data, appEnv) {\r\n  let result;\r\n  const byvars = appEnv.appControl.byvars;\r\n  if (byvars === null || byvars.length === 0) {\r\n    return [null, { msg: 'Error: Please specify a by variable', statusCode: 1 }];\r\n  }\r\n\r\n  if (Array.isArray(data) === true) {\r\n    for (let i = 0; i < data.length; i++) {\r\n      result = await _updateData(data[i], appEnv);\r\n    }\r\n  } else {\r\n    result = await _updateData(data, appEnv);\r\n  }\r\n  return result;\r\n}\r\n\r\nfunction makePayload (data, appEnv) {\r\n  const { table, byvars } = appEnv.appControl;\r\n  const columns = appEnv.state.columns;\r\n\r\n  const t = {};\r\n  for (const k in data) {\r\n    if (!(k === '_index_' || k === '_rowIndex') && columns[k].custom === false) {\r\n      t[k] = data[k];\r\n    };\r\n  };\r\n\r\n  const w = {};\r\n  byvars.forEach((k) => {\r\n    w[k] = t[k];\r\n  });\r\n  const payload = {\r\n    table,\r\n    data : t,\r\n    where: w\r\n  };\r\n  return payload;\r\n}\r\n\r\nasync function _updateData (data, appEnv) {\r\n  const { store, session } = appEnv;\r\n  const handler = (appEnv.source === 'cas') ? casUpdateData : computeUpdateData;\r\n  const payload = makePayload(data, appEnv);\r\n  const status = await handler(store, session, payload);\r\n  return status;\r\n}\r\n\r\nexport default updateTableRows;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/*\r\n* output\r\n* extended columns and data ready for use in dataform and table\r\n*/\r\nimport commonHandler from './commonHandler';\r\n/**\r\n * @description reduce fetch results\r\n * @private\r\n * @async\r\n * @module prepFormData\r\n * @param {object} result - result from casFetchRow(rows and schema)\r\n * @param {object} appEnv - app Environment from setup\r\n * @returns {promise}     - {columns: eColumns, rowsObject: newRows}\r\n */\r\nasync function prepFormData (result, appEnv) {\r\n  const { schema, rows } = result;\r\n  const customColumns = appEnv.appControl.customColumns;\r\n  let status = { statusCode: 0, msg: 'Initialization was successful' };\r\n\r\n  const makeRowObject = (columns, row, rown) => {\r\n    const rowObj = { _rowIndex: rown };\r\n    row.forEach((r, i) => {\r\n      const s = columns[i];\r\n      const name = s.Column.toLowerCase();\r\n      rowObj[name] = r;\r\n    });\r\n\r\n    if (customColumns != null) {\r\n      for (const k in customColumns) {\r\n        const c = customColumns[k];\r\n        const name = c.Column.toLowerCase();\r\n        rowObj[name] = c.value;\r\n      }\r\n    }\r\n    return rowObj;\r\n  };\r\n\r\n  const newRows = [];\r\n  for (let i = 0; i < rows.length; i++) {\r\n    const t = makeRowObject(schema, rows[i], i);\r\n\r\n    const [t1, statusi] = await commonHandler('init', t, i, appEnv);\r\n    status = statusi;\r\n    newRows.push(t1);\r\n  };\r\n\r\n  // extend column and make it an object\r\n  const eColumns = {};\r\n  schema.forEach((s, i) => {\r\n    const name = s.Column.toLowerCase();\r\n    s.name = name;\r\n    s.Label = (s.Label == null || s.Label.length === 0) ? s.Column : s.Label;\r\n    if (s.Type == null) {\r\n      s.Type = (s.type == null) ? 'double' : s.type;\r\n    }\r\n    s.custom = false;\r\n    eColumns[name] = s;\r\n  });\r\n\r\n  // add computed columns to the array.\r\n  if (customColumns != null) {\r\n    for (const k in customColumns) {\r\n      const c = { ...customColumns[k] };\r\n      c.name = k;\r\n      c.custom = true;\r\n      eColumns[k] = c;\r\n    }\r\n  }\r\n\r\n  return {\r\n    columns: eColumns,\r\n    data   : newRows,\r\n    status\r\n  };\r\n}\r\nexport default prepFormData;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport text2Float from './text2Float';\r\nimport commonHandler from './commonHandler';\r\nimport updateTableRows from './updateTableRows';\r\n\r\n/**\r\n * @description Process edit of a cell and optionally save the data\r\n * @async\r\n * @module cellEdit\r\n * @category restafedit/core\r\n * @param {string} name     - name of the field (lower case)\r\n * @param {*} value         - the new value for name field\r\n * @param {number} rowIndex - row Index ( index in the data array on client)\r\n * @param {rowObject} data  - RowObject for the entire row prior to change\r\n * @param {appEnv} appEnv   - app Environment from setup\r\n * @returns {promise}       - {data: updated data, status: status }\r\n * @example\r\n * data schema {column1: value, column2, value,...}\r\n * status schema {statusCode: 0|1|2, msg: some string}\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function cellEdit (name, value, rowIndex, data, appEnv) {\r\n  /* do not modify the data directly. caller will probably do a setState */\r\n\r\n  let newDataRow = { ...data };\r\n  const columns = appEnv.state.columns;\r\n  const { handlers, autoSave } = appEnv.appControl.editControl;\r\n\r\n  newDataRow[name] = text2Float(value, columns[name]);\r\n  let status = { statusCode: 0, msg: '' };\r\n\r\n  if (handlers[name] != null) {\r\n    const r = await handlers[name](newDataRow, name, rowIndex, appEnv);\r\n    newDataRow = r[0];\r\n    status = r[1];\r\n    if (status.statusCode === 2) {\r\n      return { data: r[0], status };\r\n    }\r\n  }\r\n  let r = await commonHandler('main', newDataRow, rowIndex, appEnv);\r\n  if (autoSave === true) {\r\n    r = await commonHandler('term', r[0], rowIndex, appEnv);\r\n    status = r[1];\r\n    if (status.statusCode === 2) {\r\n      return { data: r[0], status };\r\n    }\r\n    status = await updateTableRows(r[0], appEnv);\r\n  }\r\n  newDataRow = r[0];\r\n\r\n  if (appEnv.appControl.cachePolicy === true) {\r\n    appEnv.state.data[data._rowIndex] = newDataRow;\r\n  }\r\n\r\n  return ({ data: newDataRow, status });\r\n}\r\nexport default cellEdit;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nfunction text2Float (value, f) {\r\n  let svalue = value;\r\n  const t = f.Type.toLowerCase();\r\n  if (typeof svalue === 'string' && (t === 'decimal' || t === 'number' || t === 'double' || t === 'float')) {\r\n    svalue = parseFloat(value * 1.0);\r\n    if (isNaN(value) === true) {\r\n      value = 0;\r\n    }\r\n  }\r\n  return svalue;\r\n}\r\nexport default text2Float;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport casTableUnique from './casTableUnique';\r\nimport sasTableUnique from './sasTableUnique';\r\n\r\n/**\r\n * @description Get unique values for a specific column\r\n * @async\r\n * @module distinctValues\r\n * @category restafedit/core\r\n * @param {object} table {caslib: xxx, name: yyy}\r\n * @param {string} columnName    column name\r\n * @param {appEnv} appEnv   - app Environment from setup\r\n * @returns {promise}       - {an array of unique values }\r\n * @example\r\n *  let selectList = await distinctValues('company', appEnv))\r\n *  This is useful to get a list of unique values for selected columns.\r\n *  {company:['IBM', 'Microsoft', 'SAS'] }\r\n */\r\n\r\nasync function distinctValues (table, columnName, appEnv, payload) {\r\n  let data;\r\n  if (appEnv.source === 'cas') {\r\n    data = await casTableUnique(table, columnName, appEnv, payload);\r\n  } else {\r\n    data = await sasTableUnique(table, columnName, appEnv, payload);\r\n  }\r\n  return data;\r\n};\r\nexport default distinctValues;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nimport { caslRun } from '@sassoftware/restaflib';\r\n\r\n/**\r\n * @description Get unique values for a specific column\r\n * @async\r\n * @private\r\n * @module casTableUnique\r\n * @category restafedit/core\r\n * @param {object} table object\r\n * @param {string} columnName    column name\r\n * @param {appEnv} appEnv   app Environment from setup\r\n * @returns {promise}       {an array of unique values }\r\n * @example\r\n *  let selectList = await casTableUnique('company, appEnv))\r\n *  This is useful to get a list of unique values for selected columns.\r\n *  {columnName:[ array of unquew values] }\r\n */\r\n\r\nasync function casTableUnique (table, columnName, appEnv, payload) {\r\n  const { store, session } = appEnv;\r\n\r\n  const src = `\r\n  results = selectionLists(_args_.column,_args_.table.caslib, _args_.table.name);\r\n  send_response({casResults = {data=results}});\r\n  `\r\n  ;\r\n  const args = {\r\n    table,\r\n    column: columnName\r\n  };\r\n\r\n  const result = await caslRun(store, session, src, args, true);\r\n  if (result.results.casResults.data.statusCode !== 0) {\r\n    // eslint-disable-next-line no-throw-literal\r\n    throw 'Failed to create unique list';\r\n  }\r\n\r\n  const data = result.results.casResults.data.data;\r\n\r\n  return data;\r\n};\r\nexport default casTableUnique;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @description Get unique values for a specific column(sas table)\r\n * @async\r\n * @private\r\n * @module sasTableUnique\r\n * @category restafedit/core\r\n * @param {string} columnName    column name\r\n * @param {appEnv} appEnv   app Environment from setup\r\n * @returns {promise}       {an array of unique values }\r\n * @example\r\n *  let selectList = await casTableUnique('company, appEnv))\r\n *  This is useful to get a list of unique values for selected columns.\r\n *  {columnName:[ array of unquew values] }\r\n */\r\n\r\nasync function sasTableUnique (columnName, appEnv, payload) {\r\n  const data = {};\r\n  data[columnName] = [];\r\n  return data;\r\n};\r\nexport default sasTableUnique;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { casFetchRows, computeFetchData } from '@sassoftware/restaflib';\r\n\r\nimport prepFormData from './prepFormData';\r\n/**\r\n * @description Fetch new records based on control argument\r\n * @async\r\n * @private\r\n * @module fetchTableRows\r\n * @category restafedit/core\r\n * @param {fetchControl} control - info for records to retrieve\r\n * @param {appEnv} appEnv - appEnv\r\n * @returns {promise}  - { data:data, columns:ecolumns, pagination: pagination}\r\n * @example\r\n *   let control = {from: 10, count:50, format: false};\r\n *   let r = await fetchTableRows(control, appEnv);\r\n *   r is a fetchResult object\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function fetchTableRows (control, appEnv) {\r\n  let result = null;\r\n  if (appEnv.source === 'cas') {\r\n    result = await icasRows(control, appEnv);\r\n  } else {\r\n    result = await icomputeRows(control, appEnv);\r\n  }\r\n  return result;\r\n}\r\n\r\nasync function icasRows (control, appEnv) {\r\n  const { store, session } = appEnv;\r\n  const c = { ...control };\r\n  if (c.from <= 0 || c.next === -1) {\r\n    return null;\r\n  }\r\n  if (c.where == null) {\r\n    c.where = ' ';\r\n  }\r\n  const r = await casFetchRows(store, session, c);\r\n\r\n  let t = null;\r\n  if (r !== null) {\r\n    t = await prepFormData(r.data, appEnv);\r\n\r\n    appEnv.state = {\r\n      modified   : [],\r\n      pagination : { ...r.pagination },\r\n      currentPage: c,\r\n      data       : [],\r\n      columns    : []\r\n    };\r\n    if (appEnv.appControl.cachePolicy === true) {\r\n      appEnv.state.data = t.data;\r\n      appEnv.state.columns = t.columns;\r\n    }\r\n    t.pagination = { ...r.pagination };\r\n  }\r\n  return t;\r\n}\r\n\r\nasync function icomputeRows (control, appEnv) {\r\n  const { store, tableSummary } = appEnv;\r\n  const { table } = appEnv.appControl;\r\n  const tname = `${table.libref}.${table.name}`.toLowerCase();\r\n  // eslint-disable-next-line prefer-const\r\n  let payload = {\r\n    qs: {\r\n      start : control.from - 1,\r\n      limit : control.count,\r\n      format: (control.format != null) ? false : control.format\r\n    }\r\n  };\r\n  const data = await computeFetchData(store, tableSummary, tname, null, payload);\r\n  ;\r\n\r\n  let result = null;\r\n  if (data !== null) {\r\n    result = await prepFormData(data, appEnv);\r\n    appEnv.state = {\r\n      modified   : [],\r\n      pagination : {},\r\n      currentPage: {},\r\n      data       : result.data,\r\n      columns    : result.columns\r\n    };\r\n  }\r\n  return result;\r\n}\r\nexport default fetchTableRows;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @description Save the current table to disk\r\n * @async\r\n * @module saveTable\r\n * @category restafedit/core\r\n * @param {appEnv} appEnv\r\n * @param {object=} table - save a table other than the default\r\n * @returns {promise}  Status object\r\n * @example\r\n * This is a noop for SAS Tables\r\n **/\r\n\r\nimport { casSaveTable } from '@sassoftware/restaflib';\r\n\r\nasync function saveTable (appEnv, table) {\r\n  const { store, session } = appEnv;\r\n\r\n  if (appEnv.source === 'compute') {\r\n    return { msg: 'Action does not apply to SAS 9 tables', statusCode: 0 };\r\n  }\r\n  const t = (table != null) ? table : appEnv.appControl.table;\r\n  await casSaveTable(store, session, t);\r\n  return { msg: 'Table saved', statusCode: 0 };\r\n}\r\nexport default saveTable;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n// import fetchTableRows from './fetchTableRows';\r\nimport { computeFetchData, casFetchRows } from '@sassoftware/restaflib';\r\nimport prepFormData from './prepFormData';\r\n/**\r\n * @description Simplify scrolling using next|prev|top\r\n * @async\r\n * @module scrollTable\r\n * @category restafedit/core\r\n * @param {string} direction direction(next|prev|first)\r\n * @param {appEnv} appEnv\r\n * @param {object=} payload  override pogination with custom scrolling\r\n * @returns {promise}  result ready for display or null if it did not scroll\r\n * @example\r\n *  let r = await scrollTable('next', appEnv);\r\n *\r\n *  if ( r === null) {\r\n *     handle when no data was writtten\r\n *  } else {\r\n *     handle new data\r\n * }\r\n *\r\n * Make sure you handle exceptions that are thrown.\r\n *\r\n * For custom scrolling, pass the scrolling information in the optional third parameter.\r\n * The content of the payload depends on whether the source is cas or compute.\r\n * For compute see the documentation for rowset in compute service.<https://developer.sas.com/apis/rest/Compute/#get-a-row-set-from-a-data-set>\r\n * CAS payload is not as rich the rowset for compute service\r\n * The payload for CAS is as follows\r\n *  { start: <number>\r\n *    count: <number>\r\n *    format: true|false,\r\n *    where: <where string>\r\n * };\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function scrollTable (direction, appEnv, payload) {\r\n  let fetchResults;\r\n  if (appEnv.source === 'cas') {\r\n    fetchResults = await icasScroll(direction, appEnv, payload);\r\n  } else {\r\n    fetchResults = await icomputeScroll(direction, appEnv, payload);\r\n  }\r\n  return fetchResults;\r\n}\r\n\r\nasync function icasScroll (direction, appEnv, payload) {\r\n  const { store, session } = appEnv;\r\n  const { initialFetch, table } = appEnv.appControl;\r\n  let control;\r\n\r\n  if (direction === 'first') {\r\n    control = { ...initialFetch };\r\n  } else if (direction !== null) {\r\n    control = { ...appEnv.state.pagination[direction] };\r\n    if (control.next === -1 || control.from <= 0) {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  if (payload != null) {\r\n    control = { ...payload };\r\n  }\r\n\r\n  control.table = table;\r\n  const r = await casFetchRows(store, session, control);\r\n\r\n  let t = null;\r\n  if (r !== null) {\r\n    t = await prepFormData(r.data, appEnv);\r\n    appEnv.state = {\r\n      modified   : [],\r\n      pagination : { ...r.pagination },\r\n      currentPage: control,\r\n      data       : [],\r\n      columns    : []\r\n    };\r\n    if (appEnv.appControl.cachePolicy === true) {\r\n      appEnv.state.data = t.data;\r\n      appEnv.state.columns = t.columns;\r\n    }\r\n    t.pagination = { ...r.pagination };\r\n    return t;\r\n  }\r\n}\r\n\r\nasync function icomputeScroll (direction, appEnv, payload) {\r\n  const { store, tableSummary } = appEnv;\r\n  const { table, initialFetch } = appEnv.appControl;\r\n  let control = null;\r\n\r\n  const tname = `${table.libref}.${table.name}`.toLowerCase();\r\n\r\n  if (payload == null) {\r\n    if (direction === 'first') {\r\n      control = { ...initialFetch };\r\n    }\r\n  } else {\r\n    control = { ...payload };\r\n  }\r\n\r\n  // eslint-disable-next-line prefer-const\r\n\r\n  const data = await computeFetchData(store, tableSummary, tname, direction, control);\r\n\r\n  let result = null;\r\n  if (data !== null) {\r\n    result = await prepFormData(data, appEnv);\r\n    appEnv.state = {\r\n      modified   : [],\r\n      pagination : {},\r\n      currentPage: {},\r\n      data       : result.data,\r\n      columns    : result.columns\r\n    };\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nexport default scrollTable;\r\n","/* eslint-disable prefer-const */\r\n\r\nimport { initStore } from '@sassoftware/restaf';\r\nimport { casSetup, computeSetup, computeSetupTables, caslRun } from '@sassoftware/restaflib';\r\nimport deepcopy from 'deepcopy';\r\n\r\n/**\r\n * @description Setup an Edit session\r\n * @async\r\n * @module setup\r\n * @category restafedit/core\r\n * @param {logonPayload} logonPayload  - information for connecting to Viya\r\n * @param {appControl} appControl      - control information\r\n *\r\n * @returns {promise}  returns appEnv to control the flow\r\n * @alias module: setup\r\n * @example\r\n *  const appEnv = await setup(logonPayload, appControl);\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n *\r\n */\r\n\r\nasync function setup (logonPayload, appControl, preamble) {\r\n  const store = initStore();\r\n  let appEnv;\r\n  if (logonPayload.authType == null) {\r\n    logonPayload.authType = 'code';\r\n  }\r\n  if (appControl.source === 'cas') {\r\n    appEnv = await icasSetup(store, logonPayload, appControl);\r\n  } else {\r\n    appEnv = await icomputeSetup(store, logonPayload, appControl, preamble);\r\n  }\r\n  return appEnv;\r\n}\r\n\r\nasync function icasSetup (store, logonPayload, appControl, preamble) {\r\n  const r = await casSetup(store, logonPayload);\r\n  let appEnv = {\r\n    source: appControl.source,\r\n\r\n    store,\r\n    session  : r.session,\r\n    servers  : r.servers,\r\n    restaflib: null,\r\n\r\n    logonPayload,\r\n    appControl: deepcopy(appControl),\r\n\r\n    state: {\r\n      modified   : [],\r\n      pagination : {},\r\n      currentPage: {},\r\n\r\n      data   : {},\r\n      columns: {}\r\n    },\r\n\r\n    id: Date()\r\n  };\r\n  if (preamble != null) {\r\n    const rx = await caslRun(store, r.session, preamble);\r\n    if (rx.details.statusCode !== 0) {\r\n      console.log(rx);\r\n      // eslint-disable-next-line no-throw-literal\r\n      throw 'Preamble failed. Please see console';\r\n    };\r\n  }\r\n  return appEnv;\r\n};\r\n\r\nasync function icomputeSetup (store, logonPayload, appControl, preamble) {\r\n  // eslint-disable-next-line prefer-const\r\n  ;\r\n  let session = await computeSetup(store, appControl.computeContext, logonPayload);\r\n  let tableSummary = await computeSetupTables(store, session, appControl.table, preamble);\r\n  let appEnv = {\r\n    source: appControl.source,\r\n\r\n    store,\r\n    session,\r\n    tableSummary,\r\n\r\n    servers  : null,\r\n    restaflib: null,\r\n\r\n    logonPayload,\r\n    appControl: deepcopy(appControl),\r\n\r\n    state: {\r\n      modified   : [],\r\n      pagination : {},\r\n      currentPage: {},\r\n\r\n      data   : {},\r\n      columns: {}\r\n    },\r\n\r\n    id: Date()\r\n  };\r\n  return appEnv;\r\n}\r\n\r\nexport default setup;\r\n","/* eslint-disable no-tabs */\r\n/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { casUpload, casAppendTable, computeRun } from '@sassoftware/restaflib';\r\n\r\n/**\r\n * @description Upload data (peding: upload to sas table)\r\n * @async\r\n * @module uploadData\r\n * @category restafedit/core\r\n * @param {object} output table\r\n * @param {array}  data\r\n * @param {array}  drop fields to drop from the output\r\n * @param {object} addon columns additional columns\r\n * @param {appEnv} appEnv   - app Environment from setup\r\n * @param {object=} masterTable if specified the data will be appended to this table\r\n * @param {boolean} saveFlag if true, the masterTable will be saved\r\n * @returns {promise}       - {an array of unique values }\r\n * @example\r\n *  let selectList = await distinctValues('company', appEnv))\r\n *  This is useful to get a list of unique values for selected columns.\r\n *  {company:['IBM', 'Microsoft', 'SAS'] }\r\n */\r\n\r\nasync function uploadData (table, data, drop, addon, appEnv, masterTable, saveFlag) {\r\n  const { store, session } = appEnv;\r\n  // eslint-disable-next-line prefer-const\r\n  let t = Object.keys(data[0]);\r\n  let dropArray = ['_index_', '_rowIndex'];\r\n  if (drop !== null) {\r\n    dropArray = dropArray.concat(drop);\r\n  }\r\n  const columns = t.filter(c => {\r\n    return !(dropArray.indexOf(c) >= 0);\r\n  });\r\n  const tempCols = {};\r\n  columns.forEach(k => {\r\n    tempCols[k] = appEnv.state.columns[k];\r\n  });\r\n\r\n  let csvArray = null;\r\n  if (appEnv.source === 'cas') {\r\n    csvArray = columns.join(',') + '\\n';\r\n  };\r\n\r\n  for (let i = 0; i < data.length; i++) {\r\n    let temp = data[i];\r\n    temp = { ...temp, ...addon };\r\n    const valArray = [];\r\n    columns.forEach((c, l) => {\r\n      let v = temp[c];\r\n      if (typeof v === 'string') {\r\n        v = v.trim();\r\n      }\r\n      valArray[l] = v;\r\n    });\r\n    if (csvArray === null) {\r\n      csvArray = valArray.join(',') + '\\n';\r\n    } else {\r\n      csvArray = csvArray + valArray.join(',') + '\\n';\r\n    }\r\n  }\r\n  let result;\r\n  if (appEnv.source === 'cas') {\r\n    result = await _casTableUpload(\r\n      store,\r\n      session,\r\n      table,\r\n      csvArray,\r\n      masterTable,\r\n      saveFlag\r\n    );\r\n  } else {\r\n    result = await _computeUpload(\r\n      store,\r\n      session,\r\n      tempCols,\r\n      table,\r\n      csvArray\r\n    );\r\n  }\r\n  return result;\r\n}\r\n\r\nasync function _computeUpload (store, session, columns, table, csvArray) {\r\n  let src = `data ${table.libref}.${table.name}; INFILE datalines delimiter=',' ;\\n`;\r\n  let l = '';\r\n  let inx = 'INPUT ';\r\n  for (const k in columns) {\r\n    const c = columns[k];\r\n    inx = inx + c.Column + ' ';\r\n    if (c.Type === 'CHAR') {\r\n      const x = ` ${c.Column} $ ${c.length} \\n`;\r\n      l = l + ' ' + x;\r\n    }\r\n  }\r\n  if (l.length > 0) {\r\n    l = 'LENGTH ' + l + ';\\n';\r\n  };\r\n  inx = inx + ';\\n';\r\n\r\n  src = src + ';\\n' + l + inx + 'datalines;\\n' + csvArray + '\\n; run; proc print;run;\\n';\r\n  await computeRun(store, session, src);\r\n  return { msg: 'done', statusCode: 0 };\r\n}\r\nasync function _casTableUpload (store, session, table, csvArray, masterTable, saveFlag) {\r\n  const t = `${table.caslib}.${table.name}`;\r\n  let r = await casUpload(store, session, null, t, true, csvArray);\r\n  if (masterTable != null) {\r\n    r = await casAppendTable(store, session, table, masterTable, saveFlag);\r\n    return r;\r\n  } else {\r\n    return r;\r\n  }\r\n}\r\nexport default uploadData;\r\n"],"names":["commonHandler","type","data","rowIndex","appEnv","appControl","editControl","handlers","Promise","resolve","statusCode","msg","_ref","e","reject","_settle","pact","state","value","s","_Pact","o","bind","v","then","observer","_updateData","store","session","handler","source","casUpdateData","computeUpdateData","payload","table","byvars","columns","k","custom","t","w","forEach","where","makePayload","prototype","onFulfilled","onRejected","result","this","callback","_this","updateTableRows","length","_temp3","Array","isArray","_updateData3","array","body","i","_updateData2","thenable","_cycle","prepFormData","eColumns","schema","name","Column","toLowerCase","Label","Type","customColumns","c","_extends","newRows","status","rows","row","rown","rowObj","_rowIndex","r","makeRowObject","push","statusi","cellEdit","_exit3","newDataRow","_exit2","_temp2","_result2","cachePolicy","autoSave","_commonHandler","_updateTableRows","_temp","_appEnv$appControl$ed","f","svalue","parseFloat","isNaN","text2Float","_temp6","_temp5","distinctValues","columnName","caslRun","column","results","casResults","casTableUnique","_casTableUnique","sasTableUnique","control","icasRows","from","next","casFetchRows","_prepFormData2","modified","pagination","currentPage","icomputeRows","tableSummary","tname","libref","computeFetchData","qs","start","limit","count","format","_prepFormData","_icomputeRows","casSaveTable","scrollTable","direction","fetchResults","icasScroll","_appEnv$appControl2","initialFetch","_icasScroll","icomputeScroll","_appEnv$appControl","_icomputeScroll","logonPayload","preamble","initStore","authType","icasSetup","casSetup","servers","restaflib","deepcopy","id","Date","_icasSetup","computeSetup","computeContext","computeSetupTables","icomputeSetup","_icomputeSetup","uploadData","drop","addon","masterTable","saveFlag","Object","keys","dropArray","concat","filter","indexOf","tempCols","csvArray","join","temp","l","trim","valArray","_loop","_casTableUpload","casUpload","caslib","casAppendTable","_casAppendTable","_casTableUpload2","_computeUpload","src","inx","computeRun"],"mappings":"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"}