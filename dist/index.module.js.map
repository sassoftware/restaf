{"version":3,"file":"index.module.js","sources":["../src/commonHandler.js","../src/updateTableRows.js","../src/cellEdit.js","../src/text2Float.js","../src/prepFormData.js","../src/fetchTableRows.js","../src/scrollTable.js","../src/setup.js"],"sourcesContent":["/*\r\n * Copyright © 2022, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @description Run init, main or term handlers\r\n * @async\r\n * @module commonHandler\r\n * @category restafedit/core\r\n * @param {string} type   - type of exit (init|main|term)\r\n * @param {rowObject} data        - rowObject\r\n * @param {number} rowIndex    - client-side Row Index\r\n * @param {appEnv} appEnv      - app Environment from setup\r\n * @returns {promise}     - [data, status]\r\n * @example\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function commonHandler (type, data, rowIndex, appEnv) {\r\n  const { handlers } = appEnv.appControl.editControl;\r\n  if (handlers[type] == null) {\r\n    return [data, { statusCode: 0, msg: null }];\r\n  } else {\r\n    const [newDataRow, status] = await handlers[type](data, rowIndex, appEnv, type);\r\n    return [newDataRow, status];\r\n  }\r\n};\r\nexport default commonHandler;\r\n","\r\nimport { casUpdateData } from '@sassoftware/restaflib';\r\n/**\r\n * @description Update the row on the server\r\n * @async\r\n * @module updateTableRows\r\n * @category restafedit/core\r\n * @param {rowObject} data  - data as a rowObject\r\n * @param {appEnv} appEnv   - app Environment object from setup\r\n * @returns {promise}       - key is completion code\r\n * @example\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function updateTableRows (data, appEnv) {\r\n  const { store, session } = appEnv;\r\n  const { table, byvars } = appEnv.appControl.dataControl;\r\n  const columns = appEnv.state.columns;\r\n\r\n  if (byvars === null || byvars.length === 0) {\r\n    return;\r\n  }\r\n  const t = {};\r\n  for (const k in data) {\r\n    if (k !== '_index_' && columns[k].custom === false) {\r\n      t[k] = data[k];\r\n    };\r\n  };\r\n\r\n  const w = {};\r\n  byvars.forEach((k) => {\r\n    w[k] = t[k];\r\n  });\r\n  const payload = {\r\n    table,\r\n    data : t,\r\n    where: w\r\n  };\r\n\r\n  return await casUpdateData(store, session, payload);\r\n}\r\n\r\nexport default updateTableRows;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport text2Float from './text2Float';\r\nimport commonHandler from './commonHandler';\r\nimport updateTableRows from './updateTableRows';\r\n\r\n/**\r\n * @description Process edit of a cell and optionally save the data\r\n * @async\r\n * @module cellEdit\r\n * @category restafedit/core\r\n * @param {string} name     - name of the field (lower case)\r\n * @param {*} value         - the new value for name field\r\n * @param {number} rowIndex - row Index ( index in the data array on client)\r\n * @param {rowObject} data  - RowObject for the entire row prior to change\r\n * @param {appEnv} appEnv   - app Environment from setup\r\n * @returns {promise}       - {data: updated data, status: status }\r\n * @example\r\n * data schema {column1: value, column2, value,...}\r\n * status schema {statusCode: 0|1|2, msg: some string}\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function cellEdit (name, value, rowIndex, data, appEnv) {\r\n  /* do not modify the data directly. caller will probably do a setState */\r\n  let newDataRow = (data !== null) ? { ...data } : { ...appEnv.state.data[rowIndex] };\r\n  const columns = appEnv.state.columns;\r\n  const { handlers, autoSave } = appEnv.appControl.editControl;\r\n\r\n  newDataRow[name] = text2Float(value, columns[name]);\r\n  let status = { statusCode: 0, msg: '' };\r\n\r\n  if (handlers[name] != null) {\r\n    const r = await handlers[name](newDataRow, name, rowIndex, appEnv);\r\n    newDataRow = r[0];\r\n    status = r[1];\r\n    if (status.statusCode === 2) {\r\n      return { data: r[0], status };\r\n    }\r\n  }\r\n  let r = await commonHandler('main', newDataRow, rowIndex, appEnv);\r\n  if (autoSave === true) {\r\n    r = await commonHandler('term', r[0], rowIndex, appEnv);\r\n    status = r[1];\r\n    if (status.statusCode === 2) {\r\n      return { data: r[0], status };\r\n    }\r\n\r\n    await updateTableRows(newDataRow, appEnv);\r\n  }\r\n  newDataRow = r[0];\r\n  status.msg = status.msg + ' / ' + r[1];\r\n\r\n  if (appEnv.appControl.dataControl.cachePolicy === true) {\r\n    appEnv.state.data[rowIndex] = newDataRow;\r\n  }\r\n\r\n  return ({ data: newDataRow, status });\r\n}\r\nexport default cellEdit;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nfunction text2Float (value, f) {\r\n  let svalue = value;\r\n  if (typeof svalue === 'string' && (f.Type === 'decimal' || f.Type === 'number' || f.Type === 'double')) {\r\n    svalue = parseFloat(value * 1.0);\r\n    if (isNaN(value) === true) {\r\n      value = 0;\r\n    }\r\n  }\r\n  return svalue;\r\n}\r\nexport default text2Float;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/*\r\n* output\r\n* extended columns and data ready for use in dataform and table\r\n*/\r\nimport commonHandler from './commonHandler';\r\n/**\r\n * @description reduce fetch results\r\n * @private\r\n * @async\r\n * @module prepFormData\r\n * @param {object} result - result from casFetchRow(rows and schema)\r\n * @param {object} appEnv - app Environment from setup\r\n * @returns {promise}     - {columns: eColumns, rowsObject: newRows}\r\n */\r\nasync function prepFormData (result, appEnv) {\r\n  const { schema, rows } = result;\r\n  const customColumns = appEnv.appControl.dataControl.customColumns;\r\n\r\n  const makeRowObject = (columns, row) => {\r\n    const rowObj = {};\r\n    row.forEach((r, i) => {\r\n      const s = columns[i];\r\n      const name = s.Column.toLowerCase();\r\n      if (s.Label == null) {\r\n        s.Label = s.Column;\r\n      }\r\n      rowObj[name] = r;\r\n    });\r\n\r\n    if (customColumns != null) {\r\n      for (const k in customColumns) {\r\n        const c = customColumns[k];\r\n        const name = c.Column.toLowerCase();\r\n        rowObj[name] = c.value;\r\n      }\r\n    }\r\n    return rowObj;\r\n  };\r\n\r\n  const newRows = [];\r\n  for (let i = 0; i < rows.length; i++) {\r\n    const t = makeRowObject(schema, rows[i]);\r\n\r\n    const [t1, status] = await commonHandler('init', t, i, appEnv);\r\n\r\n    if (status.code !== 0) {\r\n      console.log(JSON.stringify(status, null, 4));\r\n    }\r\n    newRows.push(t1);\r\n  };\r\n\r\n  // extend column and make it an object\r\n  const eColumns = {};\r\n  schema.forEach((s, i) => {\r\n    const name = s.Column.toLowerCase();\r\n    s.name = name;\r\n    s.Label = (s.Label == null || s.Label.length === 0) ? s.Column : s.Label;\r\n    s.custom = false;\r\n    eColumns[name] = s;\r\n  });\r\n\r\n  // add computed columns to the array.\r\n  if (customColumns != null) {\r\n    for (const k in customColumns) {\r\n      const c = { ...customColumns[k] };\r\n      c.name = k;\r\n      c.custom = true;\r\n      eColumns[k] = c;\r\n    }\r\n  }\r\n\r\n  return {\r\n    columns: eColumns,\r\n    data   : newRows\r\n  };\r\n}\r\nexport default prepFormData;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { casFetchRows } from '@sassoftware/restaflib';\r\nimport prepFormData from './prepFormData';\r\n/**\r\n * @description Fetch new records based on control argument\r\n * @async\r\n * @module fetchTableRows\r\n * @category restafedit/core\r\n * @param {fetchControl} control - info for records to retrieve\r\n * @param {appEnv} appEnv - appEnv\r\n * @returns {promise}  - { data:data, columns:ecolumns, pagination: pagination}\r\n * @example\r\n *   let control = {from: 10, count:50, format: false};\r\n *   let r = await fetchTableRows(control, appEnv);\r\n *   r is a fetchResult object\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function fetchTableRows (control, appEnv) {\r\n  const { store, session } = appEnv;\r\n  // eslint-disable-next-line no-useless-catch\r\n  const c = { ...control };\r\n  if (c.table == null) {\r\n    c.table = appEnv.appControl.dataControl.table;\r\n  }\r\n  if (c.where == null) {\r\n    c.where = {};\r\n  }\r\n  if (c.from <= 0 || c.next === -1) {\r\n    return null;\r\n  }\r\n  const r = await casFetchRows(store, session, c);\r\n  const t = await prepFormData(r.data, appEnv);\r\n\r\n  appEnv.state = {\r\n    modified   : [],\r\n    pagination : { ...r.pagination },\r\n    currentPage: c,\r\n    data       : [],\r\n    columns    : []\r\n  };\r\n\r\n  if (appEnv.appControl.dataControl.cachePolicy === true) {\r\n    appEnv.state.data = t.data;\r\n    appEnv.state.columns = t.columns;\r\n  }\r\n\r\n  t.pagination = { ...r.pagination };\r\n  return t;\r\n}\r\nexport default fetchTableRows;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport fetchTableRows from './fetchTableRows';\r\n/**\r\n * @description Simplify scrolling using next|prev|top\r\n * @async\r\n * @module scrollTable\r\n * @category restafedit/core\r\n * @param {string} direction direction(next|prev|first)\r\n * @param {appEnv} appEnv\r\n * @returns {promise}  result ready for display or null if it did not scroll\r\n * @example\r\n *  let r = await scrollTable('next', appEnv);\r\n *\r\n *  if ( r === null) {\r\n *     handle when no data was writtten\r\n *  } else {\r\n *     handle new data\r\n * }\r\n *\r\n * Make sure you handle exceptions that are thrown.\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function scrollTable (direction, appEnv) {\r\n  const { initialFetch, table } = appEnv.appControl.dataControl;\r\n\r\n  let control;\r\n  if (direction === 'first') {\r\n    control = { ...initialFetch };\r\n    control.table = table;\r\n  } else {\r\n    control = appEnv.state.pagination[direction];\r\n    if (control.next === -1) {\r\n      return null;\r\n    }\r\n  }\r\n  const t = await fetchTableRows(control, appEnv);\r\n  return t;\r\n}\r\nexport default scrollTable;\r\n","\r\nimport { initStore } from '@sassoftware/restaf';\r\nimport { casSetup } from '@sassoftware/restaflib';\r\n\r\n/**\r\n * @description Setup an Edit session\r\n * @async\r\n * @module setup\r\n * @category restafedit/core\r\n * @param {logonPayload} logonPayload  - information for connecting to Viya\r\n * @param {appControl} appControl      - control information\r\n *\r\n * @returns {promise}  returns appEnv to control the flow\r\n * @alias module: setup\r\n * @example\r\n *  const appEnv = await setup(logonPayload, appControl);\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n *\r\n */\r\n\r\nasync function setup (logonPayload, appControl) {\r\n  const store = initStore();\r\n  if (logonPayload.authType == null) {\r\n    logonPayload.authType = 'code';\r\n  }\r\n\r\n  const r = await casSetup(store, logonPayload);\r\n\r\n  const appEnv = {\r\n    store,\r\n    session  : r.session,\r\n    servers  : r.servers,\r\n    restaflib: null,\r\n    logonPayload,\r\n    state    : {\r\n      modified   : [],\r\n      pagination : {},\r\n      currentPage: {},\r\n      data       : {},\r\n      columns    : {}\r\n    }\r\n  };\r\n  appEnv.appControl = appControl;\r\n  appEnv.id = Date(); /* just assign a new id - placeholder */\r\n  return appEnv;\r\n}\r\nexport default setup;\r\n"],"names":["commonHandler","type","data","rowIndex","appEnv","appControl","editControl","handlers","Promise","resolve","statusCode","msg","_ref","e","reject","updateTableRows","store","session","_appEnv$appControl$da","dataControl","table","byvars","columns","state","length","t","k","custom","w","forEach","casUpdateData","where","cellEdit","name","value","_exit3","newDataRow","r","_exit2","_temp2","_result2","status","cachePolicy","_temp","autoSave","then","_commonHandler","_appEnv$appControl$ed","f","svalue","Type","parseFloat","isNaN","text2Float","_temp6","_temp5","_settle","pact","s","_Pact","o","bind","v","observer","prototype","onFulfilled","onRejected","result","this","callback","_this","fetchTableRows","control","c","from","next","casFetchRows","_temp3","eColumns","schema","i","Column","toLowerCase","Label","customColumns","newRows","rows","_temp4","array","body","row","rowObj","makeRowObject","t1","code","console","log","JSON","stringify","push","thenable","_cycle","prepFormData","modified","pagination","currentPage","scrollTable","direction","_extends","initialFetch","setup","logonPayload","initStore","authType","casSetup","servers","restaflib","id","Date"],"mappings":"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"}