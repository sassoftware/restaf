{"version":3,"file":"index.umd.js","sources":["../src/commonHandler.js","../src/updateTableRows.js","../src/prepFormData.js","../src/computeTableUnique.js","../src/cellEdit.js","../src/text2Float.js","../src/distinctValues.js","../src/casTableUnique.js","../src/saveTable.js","../src/scrollTable.js","../src/setup.js","../src/termApp","../src/uploadData.js"],"sourcesContent":["/*\r\n * Copyright © 2022, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @description Run init, main or term handlers\r\n * @async\r\n * @private\r\n * @module commonHandler\r\n * @category restafedit/core\r\n * @param {string} type   - type of exit (init|main|term)\r\n * @param {rowObject} data        - rowObject\r\n * @param {number} rowIndex    - client-side Row Index\r\n * @param {appEnv} appEnv      - app Environment from setup\r\n * @returns {promise}     - [data, status]\r\n * @example\r\n * The function returns the updated data and the status.\r\n * This function is called by cellEdit, so there is probably little reason\r\n * to call this directly\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function commonHandler (type, data, rowIndex, appEnv) {\r\n  const { handlers } = appEnv.appControl.editControl;\r\n  if (handlers[type] == null) {\r\n    return [data, { statusCode: 0, msg: null }];\r\n  } else {\r\n    const [newDataRow, status] = await handlers[type](data, rowIndex, appEnv, type);\r\n    return [newDataRow, status];\r\n  }\r\n};\r\nexport default commonHandler;\r\n","import { casUpdateData } from '@sassoftware/restaflib';\r\n/**\r\n * @description Update the row on the server\r\n * @async\r\n * @private\r\n * @module updateTableRows\r\n * @category restafedit/core\r\n * @param {rowObjectArray|rowObject} data  - data as a rowObject or Array of rowObjects\r\n * @param {appEnv} appEnv   - app Environment object from setup\r\n * @returns {promise}       - {msg: string, statusCode: 0|1|2}\r\n * @example\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function updateTableRows (data, appEnv) {\r\n  let result;\r\n  const byvars = appEnv.appControl.byvars;\r\n  if (byvars === null || byvars.length === 0) {\r\n    return [null, { msg: 'Error: Please specify a by variable', statusCode: 1 }];\r\n  }\r\n\r\n  if (Array.isArray(data) === true) {\r\n    for (let i = 0; i < data.length; i++) {\r\n      result = await _updateData(data[i], appEnv);\r\n    }\r\n  } else {\r\n    result = await _updateData(data, appEnv);\r\n  }\r\n  return result;\r\n}\r\n\r\nfunction makePayload (data, appEnv) {\r\n  const { table, byvars } = appEnv.appControl;\r\n  const columns = appEnv.state.columns;\r\n\r\n  const t = {};\r\n  for (const k in data) {\r\n    if (!(k === '_index_' || k === '_rowIndex') && columns[k].custom === false) {\r\n      t[k] = data[k];\r\n    };\r\n  };\r\n\r\n  const w = {};\r\n  byvars.forEach((k) => {\r\n    w[k] = t[k];\r\n  });\r\n  const payload = {\r\n    table,\r\n    data : t,\r\n    where: w\r\n  };\r\n  return payload;\r\n}\r\n\r\nasync function _updateData (data, appEnv) {\r\n  const { store, session } = appEnv;\r\n  const handler = (appEnv.source === 'cas') ? casUpdateData : _computeUpdateData;\r\n  const payload = makePayload(data, appEnv);\r\n  const status = await handler(store, session, payload);\r\n  return status;\r\n}\r\n// TBD: Move to restaflib\r\n\r\nasync function _computeUpdateData (store, session, payload) {\r\n  const { data, table, where } = payload;\r\n  let src =\r\n    `proc sql; update ${table.libref}.${table.name}`;\r\n  let set = 'SET ';\r\n  let comma = ' ';\r\n  for (const k in data) {\r\n    set = set + comma + k + '=' + value2String(data[k]);\r\n    comma = ', ';\r\n  };\r\n  src = src + ' ' + set;\r\n  let swhere = ' WHERE ';\r\n  let andbit = ' ';\r\n\r\n  for (const k in where) {\r\n    const v = where[k];\r\n    swhere = swhere + andbit + k + `= ${value2String(v)} `;\r\n    andbit = ' AND ';\r\n  }\r\n  src = src + ' ' + swhere + ';run;';\r\n  const asrc = src.split(/\\r?\\n/);\r\n\r\n  // TBD: switch to computeRun on next pass\r\n  const p = {\r\n    data: { code: asrc }\r\n  };\r\n  const job = await store.apiCall(session.links('execute'), p);\r\n  const qs = {\r\n    qs: {\r\n      newState: 'Completed',\r\n      timeout : 1\r\n    }\r\n  };\r\n  const status = await store.jobState(job, qs);\r\n  const c = (status.data === 'completed' ? 0 : 1);\r\n\r\n  return { statusCode: c, msg: status.data };\r\n}\r\n\r\nfunction value2String (value) {\r\n  let valueString;\r\n  if (value == null) {\r\n    valueString = '.';\r\n  } else if (typeof value === 'string') {\r\n    valueString = JSON.stringify(value);\r\n  } else {\r\n    valueString = value.toString();\r\n  }\r\n  return valueString;\r\n}\r\nexport default updateTableRows;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/*\r\n* output\r\n* extended columns and data ready for use in dataform and table\r\n*/\r\nimport commonHandler from './commonHandler';\r\n/**\r\n * @description reduce fetch results\r\n * @private\r\n * @async\r\n * @module prepFormData\r\n * @param {object} result - result from casFetchRow(rows and schema)\r\n * @param {object} appEnv - app Environment from setup\r\n * @returns {promise}     - {columns: eColumns, rowsObject: newRows}\r\n */\r\nasync function prepFormData (result, appEnv) {\r\n  const { schema, rows } = result;\r\n  const customColumns = appEnv.appControl.customColumns;\r\n  let status = { statusCode: 0, msg: 'Initialization was successful' };\r\n\r\n  const makeRowObject = (columns, row, rown) => {\r\n    const rowObj = { _rowIndex: rown };\r\n    row.forEach((r, i) => {\r\n      const s = columns[i];\r\n      const name = s.Column.toLowerCase();\r\n      rowObj[name] = r;\r\n    });\r\n\r\n    if (customColumns != null) {\r\n      for (const k in customColumns) {\r\n        const c = customColumns[k];\r\n        const name = c.Column.toLowerCase();\r\n        rowObj[name] = c.value;\r\n      }\r\n    }\r\n    return rowObj;\r\n  };\r\n\r\n  const newRows = [];\r\n  for (let i = 0; i < rows.length; i++) {\r\n    const t = makeRowObject(schema, rows[i], i);\r\n\r\n    const [t1, statusi] = await commonHandler('init', t, i, appEnv);\r\n    status = statusi;\r\n    newRows.push(t1);\r\n  };\r\n\r\n  // extend column and make it an object\r\n  const eColumns = {};\r\n  schema.forEach((s, i) => {\r\n    const name = s.Column.toLowerCase();\r\n    s.name = name;\r\n    s.Label = (s.Label == null || s.Label.length === 0) ? s.Column : s.Label;\r\n    if (s.Type == null) {\r\n      s.Type = (s.type == null) ? 'double' : s.type;\r\n    }\r\n    s.custom = false;\r\n    eColumns[name] = s;\r\n  });\r\n\r\n  // add computed columns to the array.\r\n  if (customColumns != null) {\r\n    for (const k in customColumns) {\r\n      const c = { ...customColumns[k] };\r\n      c.name = k;\r\n      c.custom = true;\r\n      eColumns[k] = c;\r\n    }\r\n  }\r\n\r\n  return {\r\n    columns: eColumns,\r\n    data   : newRows,\r\n    status\r\n  };\r\n}\r\nexport default prepFormData;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { computeRun, computeFetchData } from '@sassoftware/restaflib';\r\n/**\r\n * @description Get unique values for a specific column(sas table)\r\n * @async\r\n * @private\r\n * @module sasTableUnique\r\n * @category restafedit/core\r\n * @param {string} columnName    column name\r\n * @param {appEnv} appEnv   app Environment from setup\r\n * @returns {promise}       {an array of unique values }\r\n * @example\r\n *  let selectList = await casTableUnique('company, appEnv))\r\n *  This is useful to get a list of unique values for selected columns.\r\n *  {columnName:[ array of unquew values] }\r\n */\r\n\r\nasync function computeTableUnique (table, columnName, appEnv) {\r\n  const { store, session } = appEnv;\r\n  const t = `${table.libref}.${table.name}`;\r\n\r\n  const code = `\r\n    PROC SQL;\r\n    CREATE TABLE WORK.QUERY\r\n    AS\r\n    SELECT distinct(${columnName}) as utype FROM ${t};\r\n   QUIT;`;\r\n\r\n  const computeSummary = await computeRun(store, session, code);\r\n  const values = {};\r\n  let dir = 'first';\r\n  const res = [];\r\n  let data;\r\n  do {\r\n    data = await computeFetchData(store, computeSummary, 'QUERY', dir);\r\n    const r = data.rows.map(r1 => r1[0]);\r\n    res.push(...r);\r\n    dir = 'next';\r\n  } while (data.scrollOptions.indexOf('next') >= 0);\r\n\r\n  values[columnName] = res;\r\n  return values;\r\n};\r\nexport default computeTableUnique;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport text2Float from './text2Float';\r\nimport commonHandler from './commonHandler';\r\nimport updateTableRows from './updateTableRows';\r\n\r\n/**\r\n * @description Process edit of a cell and optionally save the data\r\n * @async\r\n * @module cellEdit\r\n * @category restafedit/core\r\n * @param {string} name     - name of the field (lower case)\r\n * @param {*} value         - the new value for name field\r\n * @param {number} rowIndex - row Index ( index in the data array on client)\r\n * @param {rowObject} currentData  - RowObject for the entire row prior to change\r\n * @param {appEnv} appEnv   - app Environment from setup\r\n * @returns {promise}       - {data: updated data, status: status }\r\n * @example\r\n * data schema {column1: value, column2, value,...}\r\n * status schema {statusCode: 0|1|2, msg: some string}\r\n * The currentData object is also updated with the latest values.\r\n *\r\n * const r = await cellEdit'x1',100, 1, d, appEnv)\r\n    - If the column has an handler it will be called.\r\n    - If 'main\" handler is specified, it will be called.\r\n    - If autoSave is true\r\n      - The 'term' handler(if specified) will be called\r\n      - The data for that row will be persisted to the server\r\n */\r\nasync function cellEdit (name, value, rowIndex, currentData, appEnv) {\r\n  /* do not modify the data directly. caller will probably do a setState */\r\n\r\n  let newDataRow = { ...currentData };\r\n  const columns = appEnv.state.columns;\r\n  const { handlers, autoSave } = appEnv.appControl.editControl;\r\n  const iautoSave = (autoSave == null) ? true : autoSave;\r\n  const cachePolicy = (appEnv.appControl.cachePolicy == null) ? true : appEnv.appControl.cachePolicy;\r\n\r\n  newDataRow[name] = text2Float(value, columns[name]);\r\n  let status = { statusCode: 0, msg: '' };\r\n\r\n  if (handlers[name] != null) {\r\n    const r = await handlers[name](newDataRow, name, rowIndex, appEnv);\r\n    newDataRow = r[0];\r\n    status = r[1];\r\n    if (status.statusCode === 2) {\r\n      return { data: r[0], status };\r\n    }\r\n  }\r\n  let r = await commonHandler('main', newDataRow, rowIndex, appEnv);\r\n  if (iautoSave === true) {\r\n    r = await commonHandler('term', r[0], rowIndex, appEnv);\r\n    status = r[1];\r\n    if (status.statusCode === 2) {\r\n      return { data: r[0], status };\r\n    }\r\n    status = await updateTableRows(r[0], appEnv);\r\n  }\r\n  newDataRow = r[0];\r\n\r\n  if (cachePolicy === true) {\r\n    appEnv.state.data[currentData._rowIndex] = newDataRow;\r\n  }\r\n\r\n  return ({ data: newDataRow, status });\r\n}\r\nexport default cellEdit;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nfunction text2Float (value, f) {\r\n  let svalue = value;\r\n  const t = f.Type.toLowerCase();\r\n  if (typeof svalue === 'string' && (t === 'decimal' || t === 'number' || t === 'double' || t === 'float')) {\r\n    svalue = parseFloat(value * 1.0);\r\n    if (isNaN(value) === true) {\r\n      value = 0;\r\n    }\r\n  }\r\n  return svalue;\r\n}\r\nexport default text2Float;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport casTableUnique from './casTableUnique';\r\nimport computeTableUnique from './computeTableUnique';\r\n\r\n/**\r\n * @description Get unique values for a specific column\r\n * @async\r\n * @module distinctValues\r\n * @category restafedit/core\r\n * @param {string} columnName    column name\r\n * @param {appEnv} appEnv   - app Environment from setup\r\n * @param {casTable|computeTable=} table Optionally point to a different table\r\n * @returns {promise}       - {an array of unique values }\r\n * @example\r\n *  let selectList = await distinctValues('company', appEnv))\r\n *  This is useful to get a list of unique values for selected columns.\r\n *  {company:['IBM', 'Microsoft', 'SAS'] }\r\n */\r\n\r\nasync function distinctValues (columnName, appEnv, table) {\r\n  let data;\r\n  const t = (table != null) ? table : appEnv.appControl.table;\r\n  if (appEnv.source === 'cas') {\r\n    data = await casTableUnique(t, columnName, appEnv);\r\n  } else {\r\n    data = await computeTableUnique(t, columnName, appEnv);\r\n  }\r\n  return data;\r\n};\r\nexport default distinctValues;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nimport { caslRun } from '@sassoftware/restaflib';\r\n\r\n/**\r\n * @description Get unique values for a specific column\r\n * @async\r\n * @private\r\n * @module casTableUnique\r\n * @category restafedit/core\r\n * @param {object} table object\r\n * @param {string} columnName    column name\r\n * @param {appEnv} appEnv   app Environment from setup\r\n * @returns {promise}       {an array of unique values }\r\n * @example\r\n *  let selectList = await casTableUnique('company, appEnv))\r\n *  This is useful to get a list of unique values for selected columns.\r\n *  {columnName:[ array of unque values] }\r\n */\r\n\r\nasync function casTableUnique (table, columnName, appEnv) {\r\n  const { store, session } = appEnv;\r\n\r\n  const src = `\r\n  results = selectionLists(_args_.column,_args_.table.caslib, _args_.table.name);\r\n  send_response({casResults = {data=results}});\r\n  `\r\n  ;\r\n  const args = {\r\n    table,\r\n    column: columnName\r\n  };\r\n\r\n  const result = await caslRun(store, session, src, args, true);\r\n  if (result.results.casResults.data.statusCode !== 0) {\r\n    // eslint-disable-next-line no-throw-literal\r\n    throw 'Failed to create unique list';\r\n  }\r\n\r\n  const data = result.results.casResults.data.data;\r\n\r\n  return data;\r\n};\r\nexport default casTableUnique;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @description Save the current table to disk\r\n * @async\r\n * @module saveTable\r\n * @category restafedit/core\r\n * @param {appEnv} appEnv\r\n * @param {object=} table - save the table to disk\r\n * @returns {promise}  Status object\r\n * @example\r\n * Saves the current cas table and leaves the inmemory table intact.\r\n * If you want to save some other inmemory table pass the optional second parameter\r\n * This is a noop for SAS Tables\r\n **/\r\n\r\nimport { casSaveTable } from '@sassoftware/restaflib';\r\n\r\nasync function saveTable (appEnv, table) {\r\n  const { store, session } = appEnv;\r\n\r\n  if (appEnv.source === 'compute') {\r\n    return { msg: 'Action does not apply to SAS 9 tables', statusCode: 0 };\r\n  }\r\n  const t = (table != null) ? table : appEnv.appControl.table;\r\n  await casSaveTable(store, session, t);\r\n  return { msg: 'Table saved', statusCode: 0 };\r\n}\r\nexport default saveTable;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { computeFetchData, casFetchRows } from '@sassoftware/restaflib';\r\nimport prepFormData from './prepFormData';\r\n/**\r\n * @description Simplify scrolling using next|prev|top\r\n * @async\r\n * @module scrollTable\r\n * @category restafedit/core\r\n * @param {string} direction direction(next|prev|first)\r\n * @param {appEnv} appEnv\r\n * @param {object=} payload  override pogination with custom scrolling\r\n * @returns {promise}  result ready for display or null if it did not scroll\r\n * @example\r\n *  let r = await scrollTable('next', appEnv);\r\n *    r=== { data:data, columns: ecolumns}\r\n *\r\n *  if ( r === null) {\r\n *     handle when no data was retrieved\r\n *  } else {\r\n *     handle new data\r\n * }\r\n *\r\n * init handler(if specified) will be executed for each row.\r\n *\r\n * Make sure you handle exceptions that are thrown.The library does not handle those and\r\n * assumes some higher level code will have a catch\r\n *\r\n * For custom scrolling, pass the scrolling information in the optional third parameter.\r\n * The content of the payload depends on whether the source is cas or compute.\r\n * For compute see the documentation for rowset in compute service.<https://developer.sas.com/apis/rest/Compute/#get-a-row-set-from-a-data-set>\r\n * CAS payload is not as rich the rowset for compute service\r\n * At this time the cas is handled thru custom casl code.\r\n * Future: use rowset from data management API.\r\n * The payload for CAS is as follows\r\n *  { qs: {\r\n *       start: <number>\r\n *       limit: <number>\r\n *       format: true|false,\r\n *       where: <where string>\r\n * };\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function scrollTable (direction, appEnv, payload) {\r\n  let fetchResults;\r\n  if (appEnv.source === 'cas') {\r\n    fetchResults = await icasScroll(direction, appEnv, payload);\r\n  } else {\r\n    fetchResults = await icomputeScroll(direction, appEnv, payload);\r\n  }\r\n  return fetchResults;\r\n}\r\n\r\nasync function icasScroll (direction, appEnv, payload) {\r\n  const { store, session } = appEnv;\r\n  const { initialFetch, table } = appEnv.appControl;\r\n  const cachePolicy = (appEnv.appControl.cachePolicy == null) ? true : appEnv.appControl.cachePolicy;\r\n  let control;\r\n\r\n  if (payload != null) {\r\n    control = { ...payload };\r\n  } else {\r\n    if (direction === 'first') {\r\n      control = { ...initialFetch };\r\n    } else if (direction !== null) {\r\n      control = { ...appEnv.state.pagination[direction] };\r\n      if (control.next === -1 || control.from <= 0) {\r\n        return null;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Need to do this until we change resaflib..\r\n\r\n  let c = {};\r\n  if (control.qs != null) {\r\n    c = { ...control.qs };\r\n    c.from = c.start + 1;\r\n    c.count = c.limit;\r\n  } else {\r\n    c = { ...control };\r\n  }\r\n  if (c.from <= 0 || c.next === -1) {\r\n    return null;\r\n  }\r\n  if (c.where == null) {\r\n    c.where = ' ';\r\n  }\r\n\r\n  c.table = table;\r\n  const r = await casFetchRows(store, session, c);\r\n\r\n  let t = null;\r\n  if (r !== null) {\r\n    t = await prepFormData(r.data, appEnv);\r\n    appEnv.state = {\r\n      modified   : [],\r\n      pagination : { ...r.pagination },\r\n      currentPage: control,\r\n      data       : [],\r\n      columns    : []\r\n    };\r\n    if (cachePolicy === true) {\r\n      appEnv.state.data = t.data;\r\n      appEnv.state.columns = t.columns;\r\n    }\r\n    t.pagination = { ...r.pagination };\r\n    return t;\r\n  }\r\n}\r\n\r\nasync function icomputeScroll (direction, appEnv, payload) {\r\n  const { store, tableSummary } = appEnv;\r\n  const { table, initialFetch } = appEnv.appControl;\r\n  const cachePolicy = (appEnv.appControl.cachePolicy == null) ? true : appEnv.appControl.cachePolicy;\r\n  let control = null;\r\n\r\n  const tname = `${table.libref}.${table.name}`.toLowerCase();\r\n\r\n  if (payload == null) {\r\n    if (direction === 'first') {\r\n      control = { ...initialFetch };\r\n    }\r\n  } else {\r\n    control = { ...payload };\r\n  }\r\n\r\n  // eslint-disable-next-line prefer-const\r\n\r\n  const data = await computeFetchData(store, tableSummary, tname, direction, control);\r\n\r\n  let result = null;\r\n  if (data !== null) {\r\n    result = await prepFormData(data, appEnv);\r\n    appEnv.state = {\r\n      modified   : [],\r\n      pagination : {},\r\n      currentPage: {},\r\n      data       : [],\r\n      columns    : []\r\n    };\r\n    if (cachePolicy === true) {\r\n      appEnv.state.data = result.data;\r\n      appEnv.state.columns = result.columns;\r\n    }\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nexport default scrollTable;\r\n","/* eslint-disable prefer-const */\r\n\r\nimport { initStore } from '@sassoftware/restaf';\r\nimport { casSetup, computeSetup, computeSetupTables, caslRun } from '@sassoftware/restaflib';\r\n// import deepcopy from 'deepcopy';\r\n\r\n/**\r\n * @description Setup an Edit session\r\n * @async\r\n * @module setup\r\n * @category restafedit/core\r\n * @param {logonPayload} logonPayload  -information for connecting to Viya\r\n * @param {appControl} appControl       control information\r\n * @returns {promise}  returns appEnv to control the flow\r\n * @alias module: setup\r\n * @example\r\n *  const appEnv = await setup(logonPayload, appControl);\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n *\r\n */\r\n\r\nasync function setup (logonPayload, appControl) {\r\n  let storeOptions = (logonPayload.storeOptions != null) ? logonPayload.storeOptions : { casProxy: true };\r\n  const store = initStore(storeOptions);\r\n  let appEnv;\r\n  if (logonPayload.authType == null) {\r\n    logonPayload.authType = 'code';\r\n  }\r\n  if (appControl.source === 'cas') {\r\n    appEnv = await icasSetup(store, logonPayload, appControl);\r\n  } else {\r\n    appEnv = await icomputeSetup(store, logonPayload, appControl);\r\n  }\r\n  console.log(appControl.editControl.handlers.initApp);\r\n  if (appControl.editControl.handlers.initApp != null) {\r\n    const r = await appControl.editControl.handlers.initApp(appEnv, 'initApp');\r\n    if (r.statusCode === 2) {\r\n      console.log(JSON.stringify(r, null, 4));\r\n      // eslint-disable-next-line no-throw-literal\r\n      throw 'initApp failed. Please see console';\r\n    }\r\n  }\r\n  return appEnv;\r\n}\r\n\r\nasync function icasSetup (store, logonPayload, appControl) {\r\n  debugger;\r\n  const r = await casSetup(store, logonPayload);\r\n  const preamble = (appControl.editControl.handlers.initApp != null) ? null : appControl.preamble;\r\n\r\n  let appEnv = {\r\n    source: appControl.source,\r\n\r\n    store,\r\n    session  : r.session,\r\n    servers  : r.servers,\r\n    restaflib: null,\r\n\r\n    logonPayload,\r\n    appControl,\r\n\r\n    state: {\r\n      modified   : [],\r\n      pagination : {},\r\n      currentPage: {},\r\n\r\n      data   : {},\r\n      columns: {}\r\n    },\r\n\r\n    id: Date()\r\n  };\r\n\r\n  if (preamble !== null) {\r\n    const rx = await caslRun(store, r.session, preamble);\r\n    if (rx.disposition.statusCode !== 0) {\r\n      console.log(JSON.stringify(rx, null, 4));\r\n      // eslint-disable-next-line no-throw-literal\r\n      throw 'Preamble failed. Please see console';\r\n    };\r\n  };\r\n\r\n  return appEnv;\r\n};\r\n\r\nasync function icomputeSetup (store, logonPayload, appControl) {\r\n  // eslint-disable-next-line prefer-const\r\n  const preamble = (appControl.editControl.handlers.initApp != null) ? null : appControl.preamble;\r\n  let session = await computeSetup(store, appControl.computeContext, logonPayload);\r\n\r\n  let appEnv = {\r\n    source: appControl.source,\r\n\r\n    store,\r\n    session,\r\n    servers  : null,\r\n    restaflib: null,\r\n\r\n    logonPayload,\r\n    appControl,\r\n\r\n    state: {\r\n      modified   : [],\r\n      pagination : {},\r\n      currentPage: {},\r\n\r\n      data   : {},\r\n      columns: {}\r\n    },\r\n\r\n    id: Date()\r\n  };\r\n\r\n  if (appControl.editControl.handlers.initApp != null) {\r\n    const r = await appControl.editControl.handlers.initApp(appEnv, 'initApp');\r\n    if (r.statusCode === 2) {\r\n      console.log(JSON.stringify(r, null, 4));\r\n      // eslint-disable-next-line no-throw-literal\r\n      throw 'initApp failed. Please see console';\r\n    }\r\n  }\r\n\r\n  const tableSummary = await computeSetupTables(store, session, appControl.table, preamble);\r\n  appEnv.tableSummary = tableSummary;\r\n\r\n  return appEnv;\r\n}\r\n\r\nexport default setup;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @description Run termapp handler(if specified) and delete the cas|compute session(optional)\r\n * @async\r\n * @module termSession\r\n * @category restafedit/core\r\n * @param {appEnv} appEnv   app Environment from setup\r\n * @param {boolean=} deleteSession  default is true\r\n * @returns {promise}       status object\r\n * @example\r\n *  let r  = await termSession(appEnv)\r\n *  This is a good option for doing some post processing of the edited data.\r\n *  If the post processing is done on the Viya Server, recommend using restaf and restafedit to make\r\n *  the REST calls.\r\n */\r\n\r\nasync function termApp (appEnv, deleteSession) {\r\n  const { store, session } = appEnv;\r\n  const handlers = appEnv.appControl.editControl.handlers;\r\n  if (handlers.termapp != null) {\r\n    await handlers.termapp(appEnv);\r\n  }\r\n\r\n  // Setup for user supplied session which we do not want to delete\r\n  if (deleteSession !== false) {\r\n    await store.apiCall(session.links('delete'));\r\n  };\r\n\r\n  return { msg: 'Session terminated', statusCode: 0 };\r\n};\r\nexport default termApp;\r\n","/* eslint-disable no-tabs */\r\n/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { casUpload, casAppendTable, computeRun } from '@sassoftware/restaflib';\r\n\r\n/**\r\n * @description Upload client data to a new table on client\r\n * @async\r\n * @module uploadData\r\n * @category restafedit/core\r\n * @param {object} output table\r\n * @param {array}  data if null, data from appEnv.state will be uploded.\r\n * @param {array}  drop fields to drop from the output\r\n * @param {object} addon columns additional columns(useful for adding key fields)\r\n * @param {appEnv} appEnv   - app Environment from setup\r\n * @returns {promise}       - {an array of unique values }\r\n * @example\r\n *  await uploadData(outputTable, data, drop, {},appEnv)\r\n *  This is useful to get a list of unique values for selected columns.\r\n *  {company:['IBM', 'Microsoft', 'SAS'] }\r\n */\r\n\r\nasync function uploadData (table, data, drop, addon, appEnv, masterTable, saveFlag) {\r\n  const { store, session } = appEnv;\r\n  // eslint-disable-next-line prefer-const\r\n  if (data === null) {\r\n    data = appEnv.state.data;\r\n  };\r\n  const t = Object.keys(data[0]);\r\n  let dropArray = ['_index_', '_rowIndex'];\r\n  if (drop !== null) {\r\n    dropArray = dropArray.concat(drop);\r\n  }\r\n  const columns = t.filter(c => {\r\n    return !(dropArray.indexOf(c) >= 0);\r\n  });\r\n  const tempCols = {};\r\n  columns.forEach(k => {\r\n    tempCols[k] = appEnv.state.columns[k];\r\n  });\r\n\r\n  let csvArray = null;\r\n  if (appEnv.source === 'cas') {\r\n    csvArray = columns.join(',') + '\\n';\r\n  };\r\n\r\n  for (let i = 0; i < data.length; i++) {\r\n    let temp = data[i];\r\n    temp = { ...temp, ...addon };\r\n    const valArray = [];\r\n    columns.forEach((c, l) => {\r\n      let v = temp[c];\r\n      if (typeof v === 'string') {\r\n        v = v.trim();\r\n      }\r\n      valArray[l] = v;\r\n    });\r\n    if (csvArray === null) {\r\n      csvArray = valArray.join(',') + '\\n';\r\n    } else {\r\n      csvArray = csvArray + valArray.join(',') + '\\n';\r\n    }\r\n  }\r\n  let result;\r\n  if (appEnv.source === 'cas') {\r\n    result = await _casTableUpload(\r\n      store,\r\n      session,\r\n      table,\r\n      csvArray,\r\n      masterTable,\r\n      saveFlag\r\n    );\r\n  } else {\r\n    result = await _computeUpload(\r\n      store,\r\n      session,\r\n      tempCols,\r\n      table,\r\n      csvArray\r\n    );\r\n  }\r\n  return result;\r\n}\r\n\r\n// TBD: switch to a datastep with arrays for each column. More reliable\r\nasync function _computeUpload (store, session, columns, table, csvArray) {\r\n  let src = `data ${table.libref}.${table.name}; INFILE datalines delimiter=',' ;\\n`;\r\n  let l = '';\r\n  let inx = 'INPUT ';\r\n  for (const k in columns) {\r\n    const c = columns[k];\r\n    inx = inx + c.Column + ' ';\r\n    if (c.Type === 'CHAR') {\r\n      const x = ` ${c.Column} $ ${c.length} \\n`;\r\n      l = l + ' ' + x;\r\n    }\r\n  }\r\n  if (l.length > 0) {\r\n    l = 'LENGTH ' + l + ';\\n';\r\n  };\r\n  inx = inx + ';\\n';\r\n\r\n  src = src + ';\\n' + l + inx + 'datalines;\\n' + csvArray + '\\n; run; proc print;run;\\n';\r\n  await computeRun(store, session, src);\r\n  return { msg: 'done', statusCode: 0 };\r\n}\r\nasync function _casTableUpload (store, session, table, csvArray, masterTable, saveFlag) {\r\n  const t = `${table.caslib}.${table.name}`;\r\n  let r = await casUpload(store, session, null, t, true, csvArray);\r\n  if (masterTable != null) {\r\n    r = await casAppendTable(store, session, table, masterTable, saveFlag);\r\n    return r;\r\n  } else {\r\n    return r;\r\n  }\r\n}\r\nexport default uploadData;\r\n"],"names":["commonHandler","type","data","rowIndex","appEnv","appControl","editControl","handlers","Promise","resolve","statusCode","msg","_ref","e","reject","_settle","pact","state","value","s","_Pact","o","bind","v","then","observer","_computeUpdateData","store","session","payload","table","where","src","libref","name","set","comma","k","value2String","swhere","andbit","_k","p","code","split","apiCall","links","job","jobState","qs","newState","timeout","status","prototype","onFulfilled","onRejected","result","this","callback","_this","handler","source","casUpdateData","_appEnv$appControl","byvars","columns","t","custom","w","forEach","makePayload","updateTableRows","length","_temp3","Array","isArray","_updateData","_updateData3","array","body","i","_temp4","_updateData2","_cycle","thenable","JSON","stringify","toString","prepFormData","eColumns","schema","Column","toLowerCase","Label","Type","customColumns","c","_extends","newRows","rows","row","rown","rowObj","_rowIndex","r","makeRowObject","push","statusi","cellEdit","currentData","_exit3","_temp5","_result","newDataRow","cachePolicy","iautoSave","_commonHandler","_exit2","_updateTableRows","_temp","_temp2","_appEnv$appControl$ed","autoSave","f","svalue","parseFloat","isNaN","text2Float","_temp6","distinctValues","columnName","caslRun","column","results","casResults","casTableUnique","_casTableUnique","computeTableUnique","computeRun","computeSummary","values","res","test","awaitBody","_isSettledPact","shouldContinue","_resumeAfterBody","_resumeAfterTest","computeFetchData","dir","_computeFetchData","map","r1","apply","scrollOptions","indexOf","_computeTableUnique","casSaveTable","scrollTable","direction","fetchResults","control","_appEnv$appControl2","initialFetch","pagination","next","from","start","count","limit","casFetchRows","_prepFormData2","modified","currentPage","icasScroll","_icasScroll","icomputeScroll","tableSummary","tname","_prepFormData","setup","logonPayload","console","log","initApp","initStore","storeOptions","casProxy","authType","icasSetup","casSetup","preamble","servers","restaflib","id","Date","_temp8","rx","disposition","_icasSetup","icomputeSetup","computeSetup","computeContext","_temp7","_result2","computeSetupTables","_icomputeSetup","async","deleteSession","termapp","drop","addon","masterTable","saveFlag","Object","keys","dropArray","concat","filter","tempCols","csvArray","join","temp","valArray","l","trim","_loop","_casTableUpload","casUpload","caslib","casAppendTable","_casAppendTable","_casTableUpload2","_computeUpload","inx"],"mappings":"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"}