{"version":3,"file":"index.module.js","sources":["../src/commonHandler.js","../src/updateTableRows.js","../src/cellEdit.js","../src/text2Float.js","../src/prepFormData.js","../src/fetchTableRows.js","../src/scrollTable.js","../src/setup.js"],"sourcesContent":["/*\r\n * Copyright © 2022, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @description Run init, main or term handlers\r\n * @async\r\n * @module commonHandler\r\n * @category restafedit/core\r\n * @param {string} type   - type of exit (init|main|term)\r\n * @param {rowObject} data        - rowObject\r\n * @param {number} rowIndex    - client-side Row Index\r\n * @param {appEnv} appEnv      - app Environment from setup\r\n * @returns {promise}     - [data, status]\r\n * @example\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function commonHandler (type, data, rowIndex, appEnv) {\r\n  const { handlers } = appEnv.appControl.editControl;\r\n  if (handlers[type] == null) {\r\n    return [data, { statusCode: 0, msg: null }];\r\n  } else {\r\n    const [newDataRow, status] = await handlers[type](data, rowIndex, appEnv, type);\r\n    return [newDataRow, status];\r\n  }\r\n};\r\nexport default commonHandler;\r\n","import { casUpdateData } from '@sassoftware/restaflib';\r\n/**\r\n * @description Update the row on the server\r\n * @async\r\n * @module updateTableRows\r\n * @category restafedit/core\r\n * @param {rowObject} data  - data as a rowObject\r\n * @param {appEnv} appEnv   - app Environment object from setup\r\n * @returns {promise}       - key is completion code\r\n * @example\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function updateTableRows (data, appEnv) {\r\n  let result;\r\n  if (appEnv.source === 'cas') {\r\n    result = await iupdateCasTable(data, appEnv);\r\n  } else {\r\n    result = await iupdateComputeTable(data, appEnv);\r\n  }\r\n  return result;\r\n}\r\n\r\nasync function iupdateCasTable (data, appEnv) {\r\n  const { store, session } = appEnv;\r\n  const { table, byvars } = appEnv.appControl;\r\n  const columns = appEnv.state.columns;\r\n\r\n  if (byvars === null || byvars.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  const t = {};\r\n  for (const k in data) {\r\n    if (k !== '_index_' && columns[k].custom === false) {\r\n      t[k] = data[k];\r\n    };\r\n  };\r\n\r\n  const w = {};\r\n  byvars.forEach((k) => {\r\n    w[k] = t[k];\r\n  });\r\n  const payload = {\r\n    table,\r\n    data : t,\r\n    where: w\r\n  };\r\n\r\n  const result = await casUpdateData(store, session, payload);\r\n  const r = result.items().toJS();\r\n  const status = { statusCode: 0, msg: 'Save successful' };\r\n\r\n  if (r.disposition.severity !== 'Normal') {\r\n    status.statusCode = 2;\r\n    status.msg = t.disposition.severity.reason;\r\n  };\r\n  return status;\r\n}\r\n\r\nasync function iupdateComputeTable (data, appEnv) {\r\n  const { store, session } = appEnv;\r\n  const { table, byvars } = appEnv.appControl;\r\n  const columns = appEnv.state.columns;\r\n  ;\r\n\r\n  if (byvars === null || byvars.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  let src =\r\n    `proc sql; update ${table.libref}.${table.name}`;\r\n  let set = 'SET ';\r\n  let comma = ' ';\r\n  for (const k in data) {\r\n    if (columns[k].custom === false) {\r\n      set = set + comma + k + '=' + value2String(data[k]);\r\n    }\r\n    comma = ', ';\r\n  };\r\n  src = src + ' ' + set;\r\n  let w = ' WHERE ';\r\n  let andBit = ' ';\r\n\r\n  byvars.forEach((k) => {\r\n    w = w + andBit + k + '=' + value2String(data[k]);\r\n    andBit = 'AND ';\r\n  });\r\n  src = src + ' ' + w + ';run;';\r\n  const asrc = src.split(/\\r?\\n/);\r\n\r\n  const payload = {\r\n    data: { code: asrc }\r\n  };\r\n\r\n  // console.log(asrc);\r\n\r\n  const job = await store.apiCall(session.links('execute'), payload);\r\n  const qs = {\r\n    qs: {\r\n      newState: 'Completed',\r\n      timeout : 1\r\n    }\r\n  };\r\n\r\n  // eslint-disable-next-line no-unused-vars\r\n  const status = await store.jobState(job, qs);\r\n  const c = (status.data === 'completed' ? 0 : 1);\r\n\r\n  return { statusCode: c, msg: status.data };\r\n}\r\n\r\nfunction value2String (value) {\r\n  let valueString;\r\n  if (value == null) {\r\n    valueString = '.';\r\n  } else if (typeof value === 'string') {\r\n    valueString = JSON.stringify(value);\r\n  } else {\r\n    valueString = value.toString();\r\n  }\r\n  return valueString;\r\n}\r\n\r\nexport default updateTableRows;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport text2Float from './text2Float';\r\nimport commonHandler from './commonHandler';\r\nimport updateTableRows from './updateTableRows';\r\n\r\n/**\r\n * @description Process edit of a cell and optionally save the data\r\n * @async\r\n * @module cellEdit\r\n * @category restafedit/core\r\n * @param {string} name     - name of the field (lower case)\r\n * @param {*} value         - the new value for name field\r\n * @param {number} rowIndex - row Index ( index in the data array on client)\r\n * @param {rowObject} data  - RowObject for the entire row prior to change\r\n * @param {appEnv} appEnv   - app Environment from setup\r\n * @returns {promise}       - {data: updated data, status: status }\r\n * @example\r\n * data schema {column1: value, column2, value,...}\r\n * status schema {statusCode: 0|1|2, msg: some string}\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function cellEdit (name, value, rowIndex, data, appEnv) {\r\n  /* do not modify the data directly. caller will probably do a setState */\r\n  let newDataRow = (data !== null) ? { ...data } : { ...appEnv.state.data[rowIndex] };\r\n  const columns = appEnv.state.columns;\r\n  const { handlers, autoSave } = appEnv.appControl.editControl;\r\n\r\n  newDataRow[name] = text2Float(value, columns[name]);\r\n  let status = { statusCode: 0, msg: '' };\r\n\r\n  if (handlers[name] != null) {\r\n    const r = await handlers[name](newDataRow, name, rowIndex, appEnv);\r\n    newDataRow = r[0];\r\n    status = r[1];\r\n    if (status.statusCode === 2) {\r\n      return { data: r[0], status };\r\n    }\r\n  }\r\n  let r = await commonHandler('main', newDataRow, rowIndex, appEnv);\r\n  if (autoSave === true) {\r\n    r = await commonHandler('term', r[0], rowIndex, appEnv);\r\n    status = r[1];\r\n    if (status.statusCode === 2) {\r\n      return { data: r[0], status };\r\n    }\r\n    status = await updateTableRows(r[0], appEnv);\r\n  }\r\n  newDataRow = r[0];\r\n\r\n  if (appEnv.appControl.cachePolicy === true) {\r\n    appEnv.state.data[rowIndex] = newDataRow;\r\n  }\r\n\r\n  return ({ data: newDataRow, status });\r\n}\r\nexport default cellEdit;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nfunction text2Float (value, f) {\r\n  let svalue = value;\r\n  const t = f.type.toLowerCase();\r\n  if (typeof svalue === 'string' && (t === 'decimal' || t === 'number' || t === 'double' || t === 'float')) {\r\n    svalue = parseFloat(value * 1.0);\r\n    if (isNaN(value) === true) {\r\n      value = 0;\r\n    }\r\n  }\r\n  return svalue;\r\n}\r\nexport default text2Float;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/*\r\n* output\r\n* extended columns and data ready for use in dataform and table\r\n*/\r\nimport commonHandler from './commonHandler';\r\n/**\r\n * @description reduce fetch results\r\n * @private\r\n * @async\r\n * @module prepFormData\r\n * @param {object} result - result from casFetchRow(rows and schema)\r\n * @param {object} appEnv - app Environment from setup\r\n * @returns {promise}     - {columns: eColumns, rowsObject: newRows}\r\n */\r\nasync function prepFormData (result, appEnv) {\r\n  const { schema, rows } = result;\r\n  const customColumns = appEnv.appControl.customColumns;\r\n  let status = { statusCode: 0, msg: 'Initialization was successful' };\r\n\r\n  const makeRowObject = (columns, row) => {\r\n    const rowObj = {};\r\n    row.forEach((r, i) => {\r\n      const s = columns[i];\r\n      const name = s.Column.toLowerCase();\r\n      if (s.Label == null) {\r\n        s.Label = s.Column;\r\n      }\r\n      rowObj[name] = r;\r\n    });\r\n\r\n    if (customColumns != null) {\r\n      for (const k in customColumns) {\r\n        const c = customColumns[k];\r\n        const name = c.Column.toLowerCase();\r\n        rowObj[name] = c.value;\r\n      }\r\n    }\r\n    return rowObj;\r\n  };\r\n\r\n  const newRows = [];\r\n  for (let i = 0; i < rows.length; i++) {\r\n    const t = makeRowObject(schema, rows[i]);\r\n\r\n    const [t1, statusi] = await commonHandler('init', t, i, appEnv);\r\n    status = statusi;\r\n    newRows.push(t1);\r\n  };\r\n\r\n  // extend column and make it an object\r\n  const eColumns = {};\r\n  schema.forEach((s, i) => {\r\n    const name = s.Column.toLowerCase();\r\n    s.name = name;\r\n    s.Label = (s.Label == null || s.Label.length === 0) ? s.Column : s.Label;\r\n    if (s.type == null) {\r\n      s.type = s.Type;\r\n    }\r\n    s.custom = false;\r\n    eColumns[name] = s;\r\n  });\r\n\r\n  // add computed columns to the array.\r\n  if (customColumns != null) {\r\n    for (const k in customColumns) {\r\n      const c = { ...customColumns[k] };\r\n      c.name = k;\r\n      c.custom = true;\r\n      eColumns[k] = c;\r\n    }\r\n  }\r\n\r\n  return {\r\n    columns: eColumns,\r\n    data   : newRows,\r\n    status\r\n  };\r\n}\r\nexport default prepFormData;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { casFetchRows, computeFetchData } from '@sassoftware/restaflib';\r\n\r\nimport prepFormData from './prepFormData';\r\n/**\r\n * @description Fetch new records based on control argument\r\n * @async\r\n * @module fetchTableRows\r\n * @category restafedit/core\r\n * @param {fetchControl} control - info for records to retrieve\r\n * @param {appEnv} appEnv - appEnv\r\n * @returns {promise}  - { data:data, columns:ecolumns, pagination: pagination}\r\n * @example\r\n *   let control = {from: 10, count:50, format: false};\r\n *   let r = await fetchTableRows(control, appEnv);\r\n *   r is a fetchResult object\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function fetchTableRows (control, appEnv) {\r\n  let result = null;\r\n  if (appEnv.source === 'cas') {\r\n    result = await icasRows(control, appEnv);\r\n  } else {\r\n    result = await icomputeRows(control, appEnv);\r\n  }\r\n  return result;\r\n}\r\n\r\nasync function icasRows (control, appEnv) {\r\n  const { store, session } = appEnv;\r\n  const c = { ...control };\r\n  if (c.table == null) {\r\n    c.table = appEnv.appControl.table;\r\n  }\r\n  if (c.where == null) {\r\n    c.where = {};\r\n  }\r\n  if (c.from <= 0 || c.next === -1) {\r\n    return null;\r\n  }\r\n  \r\n  const r = await casFetchRows(store, session, c);\r\n  \r\n  let t = null;\r\n  if (r !== null) {\r\n    \r\n    t = await prepFormData(r.data, appEnv);\r\n\r\n    appEnv.state = {\r\n      modified   : [],\r\n      pagination : { ...r.pagination },\r\n      currentPage: c,\r\n      data       : [],\r\n      columns    : []\r\n    };\r\n    if (appEnv.appControl.cachePolicy === true) {\r\n      appEnv.state.data = t.data;\r\n      appEnv.state.columns = t.columns;\r\n    }\r\n    t.pagination = { ...r.pagination };\r\n  }\r\n  return t;\r\n}\r\n\r\nasync function icomputeRows (control, appEnv) {\r\n  const { store, tableSummary } = appEnv;\r\n  const { table } = appEnv.appControl;\r\n  const tname = `${table.libref}.${table.name}`.toLowerCase();\r\n  // eslint-disable-next-line prefer-const\r\n  let payload = {\r\n    qs: {\r\n      start : control.from - 1,\r\n      limit : control.count,\r\n      format: (control.format != null) ? false : control.format\r\n    }\r\n  };\r\n  const data = await computeFetchData(store, tableSummary, tname, null, payload);\r\n  ;\r\n\r\n  let result = null;\r\n  if (data !== null) {\r\n    result = await prepFormData(data, appEnv);\r\n    appEnv.state = {\r\n      modified   : [],\r\n      pagination : {},\r\n      currentPage: {},\r\n      data       : result.data,\r\n      columns    : result.columns\r\n    };\r\n  }\r\n  return result;\r\n}\r\nexport default fetchTableRows;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport fetchTableRows from './fetchTableRows';\r\nimport { computeFetchData } from '@sassoftware/restaflib';\r\nimport prepFormData from './prepFormData';\r\n/**\r\n * @description Simplify scrolling using next|prev|top\r\n * @async\r\n * @module scrollTable\r\n * @category restafedit/core\r\n * @param {string} direction direction(next|prev|first)\r\n * @param {appEnv} appEnv\r\n * @returns {promise}  result ready for display or null if it did not scroll\r\n * @example\r\n *  let r = await scrollTable('next', appEnv);\r\n *\r\n *  if ( r === null) {\r\n *     handle when no data was writtten\r\n *  } else {\r\n *     handle new data\r\n * }\r\n *\r\n * Make sure you handle exceptions that are thrown.\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function scrollTable (direction, appEnv) {\r\n  let fetchResults;\r\n  if (appEnv.source === 'cas') {\r\n    fetchResults = await icasScroll(direction, appEnv);\r\n  } else {\r\n    fetchResults = await icomputeScroll(direction, appEnv);\r\n  }\r\n  return fetchResults;\r\n}\r\n\r\nasync function icasScroll (direction, appEnv) {\r\n  const { initialFetch, table } = appEnv.appControl;\r\n  let control;\r\n  if (direction === 'first') {\r\n    control = { ...initialFetch };\r\n    control.table = table;\r\n  } else {\r\n    control = appEnv.state.pagination[direction];\r\n    if (control.next === -1) {\r\n      return null;\r\n    }\r\n  }\r\n  const t = await fetchTableRows(control, appEnv);\r\n  return t;\r\n}\r\n\r\nasync function icomputeScroll (direction, appEnv) {\r\n  const { store, tableSummary } = appEnv;\r\n  const { table } = appEnv.appControl;\r\n\r\n  const tname = `${table.libref}.${table.name}`.toLowerCase();\r\n\r\n  // eslint-disable-next-line prefer-const\r\n\r\n  const payload = { qs: { limit: appEnv.appControl.initialFetch.count } };\r\n  const data = await computeFetchData(store, tableSummary, tname, direction, payload);\r\n\r\n  let result = null;\r\n  if (data !== null) {\r\n    result = await prepFormData(data, appEnv);\r\n    appEnv.state = {\r\n      modified   : [],\r\n      pagination : {},\r\n      currentPage: {},\r\n      data       : result.data,\r\n      columns    : result.columns\r\n    };\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nexport default scrollTable;\r\n","/* eslint-disable prefer-const */\r\n\r\nimport { initStore } from '@sassoftware/restaf';\r\nimport { casSetup, computeSetup, computeSetupTables } from '@sassoftware/restaflib';\r\n\r\n/**\r\n * @description Setup an Edit session\r\n * @async\r\n * @module setup\r\n * @category restafedit/core\r\n * @param {logonPayload} logonPayload  - information for connecting to Viya\r\n * @param {appControl} appControl      - control information\r\n *\r\n * @returns {promise}  returns appEnv to control the flow\r\n * @alias module: setup\r\n * @example\r\n *  const appEnv = await setup(logonPayload, appControl);\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n *\r\n */\r\n\r\nasync function setup (logonPayload, appControl, preamble) {\r\n  const store = initStore();\r\n  let appEnv;\r\n  if (logonPayload.authType == null) {\r\n    logonPayload.authType = 'code';\r\n  }\r\n  if (appControl.source === 'cas') {\r\n    appEnv = await icasSetup(store, logonPayload, appControl);\r\n  } else {\r\n    appEnv = await icomputeSetup(store, logonPayload, appControl, preamble);\r\n  }\r\n  return appEnv;\r\n}\r\n\r\nasync function icasSetup (store, logonPayload, appControl) {\r\n  const r = await casSetup(store, logonPayload);\r\n  let appEnv = {\r\n    source: appControl.source,\r\n\r\n    store,\r\n    session  : r.session,\r\n    servers  : r.servers,\r\n    restaflib: null,\r\n    logonPayload,\r\n    appControl,\r\n\r\n    state: {\r\n      modified   : [],\r\n      pagination : {},\r\n      currentPage: {},\r\n\r\n      data   : {},\r\n      columns: {}\r\n    },\r\n\r\n    id: Date()\r\n  };\r\n  return appEnv;\r\n};\r\n\r\nasync function icomputeSetup (store, logonPayload, appControl, preamble) {\r\n  // eslint-disable-next-line prefer-const\r\n  ;\r\n  let session = await computeSetup(store, appControl.computeContext, logonPayload);\r\n  let tableSummary = await computeSetupTables(store, session, appControl.table, preamble);\r\n  let appEnv = {\r\n    source: appControl.source,\r\n\r\n    store,\r\n    session,\r\n    tableSummary,\r\n    servers  : null,\r\n    restaflib: null,\r\n    logonPayload,\r\n    appControl,\r\n\r\n    state: {\r\n      modified   : [],\r\n      pagination : {},\r\n      currentPage: {},\r\n\r\n      data   : {},\r\n      columns: {}\r\n    },\r\n\r\n    id: Date()\r\n  };\r\n  return appEnv;\r\n}\r\n\r\nexport default setup;\r\n"],"names":["commonHandler","type","data","rowIndex","appEnv","appControl","editControl","handlers","Promise","resolve","statusCode","msg","_ref","e","reject","updateTableRows","_temp2","source","iupdateCasTable","store","session","table","_appEnv$appControl2","byvars","columns","state","length","t","k","custom","w","forEach","casUpdateData","where","result","items","toJS","disposition","severity","status","reason","_iupdateCasTable","_appEnv$appControl","src","libref","name","set","comma","value2String","andBit","payload","code","split","apiCall","links","then","job","jobState","qs","newState","timeout","iupdateComputeTable","_iupdateComputeTable","value","JSON","stringify","toString","cellEdit","_exit3","_temp5","_result","newDataRow","r","_exit2","_result2","cachePolicy","autoSave","_updateTableRows","_temp","_extends","f","svalue","toLowerCase","parseFloat","isNaN","text2Float","_temp6","_settle","pact","s","_Pact","o","bind","v","observer","prepFormData","_temp3","eColumns","schema","i","Column","Label","Type","customColumns","c","newRows","rows","_temp4","array","body","row","rowObj","makeRowObject","push","statusi","_cycle","thenable","prototype","onFulfilled","onRejected","this","callback","_this","control","from","next","casFetchRows","_prepFormData2","modified","pagination","currentPage","icasRows","_icasRows","tableSummary","tname","computeFetchData","start","limit","count","format","_prepFormData","icomputeRows","_icomputeRows","scrollTable","direction","icasScroll","initialFetch","fetchTableRows","_icasScroll","fetchResults","icomputeScroll","logonPayload","preamble","initStore","authType","icasSetup","casSetup","servers","restaflib","id","Date","icomputeSetup","computeSetup","computeContext","computeSetupTables"],"mappings":"2aAiBeA,IAAAA,WAAeC,EAAMC,EAAMC,EAAUC,OAClD,MAAqBA,EAAOC,WAAWC,YAA/BC,SACR,OAAsB,MAAlBA,EAASN,GACJO,QAAAC,QAAA,CAACP,EAAM,CAAEQ,WAAY,EAAGC,IAAK,QAC/BH,QAAAC,QAC8BF,EAASN,GAAMC,EAAMC,EAAUC,EAAQH,qBAC1E,MAAO,CAFFW,EAAA,GAAAA,EAAA,GAAA,EAIR,OAAAC,GAAA,OAAAL,QAAAM,OAAAD,EAAA,CAAA,ECZcE,WAAiBb,EAAME,OACpC,MAD4CY,EAEtB,QAAlBZ,EAAOa,OACMC,QAAAA,iBAOahB,EAAME,GAAQ,IAC5C,IAAQe,EAAmBf,EAAnBe,MAAOC,EAAYhB,EAAZgB,QACWhB,EAAAA,EAAOC,WAAzBgB,EAARC,EAAQD,MAAOE,EAAfD,EAAeC,OACFC,EAAGpB,EAAOqB,MAAMD,QAE7B,GAAe,OAAXD,GAAqC,IAAlBA,EAAOG,OAC5B,OAAOlB,QAAAC,QAAA,MAGT,IAAOkB,EAAG,GACV,IAAK,IAALC,OACY,YAANA,IAAyC,IAAtBJ,EAAQI,GAAGC,SAChCF,EAAEC,GAAK1B,EAAK0B,IAIhB,IAAME,EAAI,CAAA,EAhBkC,OAiB5CP,EAAOQ,QAAQ,SAACH,GACdE,EAAEF,GAAKD,EAAEC,EACV,GAOoBI,QAAAA,QAAAA,EAAcb,EAAOC,EAN1B,CACdC,MAAAA,EACAnB,KAAOyB,EACPM,MAAOH,mBAGHI,GACN,MACe,CAAExB,WAAY,EAAGC,IAAK,mBAMrC,MAJ+B,WAHrBuB,EAAOC,QAAQC,OAGnBC,YAAYC,WAChBC,EAAO7B,WAAa,EACpB6B,EAAO5B,IAAMgB,EAAEU,YAAYC,SAASE,QAE/BD,CAlCqC,EAV/BxB,OAAAA,GAAAA,OAAAA,QAAAA,OAAAA,EAAAA,CAAAA,CAGIG,CAAgBhB,EAAME,IAArC8B,KAAAA,SAAAA,GAAAA,EAH0CO,CAAA,GAAAjC,QAAAC,iBA+CVP,EAAME,OACxC,IAAQe,EAAmBf,EAAnBe,MAAOC,EAAYhB,EAAZgB,QACWhB,EAAAA,EAAOC,WAAzBgB,EAARqB,EAAQrB,MAAOE,EAAfmB,EAAenB,OACFC,EAAGpB,EAAOqB,MAAMD,QAG7B,GAAe,OAAXD,GAAqC,IAAlBA,EAAOG,OAC5B,OAAAlB,QAAAC,QAAO,MAGT,IAAIkC,sBACkBtB,EAAMuB,OADrB,IAC+BvB,EAAMwB,KACrCC,EAAG,OACNC,EAAQ,IACZ,IAAK,IAALnB,KAAA1B,GAC4B,IAAtBsB,EAAQI,GAAGC,SACbiB,EAAMA,EAAMC,EAAQnB,EAAI,IAAMoB,EAAa9C,EAAK0B,KAElDmB,EAAQ,KAEVJ,EAAMA,EAAM,IAAMG,EAClB,IAAIhB,EAAI,UACJmB,EAAS,IAEb1B,EAAOQ,QAAQ,SAACH,GACdE,EAAIA,EAAImB,EAASrB,EAAI,IAAMoB,EAAa9C,EAAK0B,IAC7CqB,EAAS,MACV,GAED,IAEaC,EAAG,CACdhD,KAAM,CAAEiD,MAJVR,EAAMA,EAAM,IAAMb,EAAI,SACLsB,MAAM,WA7ByB,OAAA5C,QAAAC,QAqC9BU,EAAMkC,QAAQjC,EAAQkC,MAAM,WAAYJ,IArCVK,KAAA,SAqC1CC,GArC0C,OA8C3BrC,QAAAA,QAAAA,EAAMsC,SAASD,EARzB,CACTE,GAAI,CACFC,SAAU,YACVC,QAAU,oBAKRrB,GAGN,MAAO,CAAE7B,WAFkB,cAAhB6B,EAAOrC,KAAuB,EAAI,EAErBS,IAAK4B,EAAOrC,KAjDY,EAkDjD,EAvFcgB,OAAAA,GAAAA,OAAAA,QAAAA,OAAAA,EAAAA,CAAAA,CALI2C,CAAoB3D,EAAME,IALCmD,KAAA,SAAAO,GAK1C5B,EAAM4B,CALoC,sDAO5C,OAAO5B,CAPqC,GAOrCA,EA4FT,OAAArB,GAAA,OAAAL,QAAAM,OAAAD,EAAA,CAAA,EAAA,WAAuBkD,GASrB,OAPa,MAATA,EACY,IACY,iBAAVA,EACFC,KAAKC,UAAUF,GAEfA,EAAMG,UAGvB,CChGcC,eAAUtB,EAAMkB,EAAO5D,EAAUD,EAAME,GAAQ,IAAA,IAE5DgE,EAF4DC,EAAA,SAAAC,GAAA,OAAAF,EAAAE,EAAA9D,QAAAC,QAiB9CT,EAAc,OAAQuE,EAAYpE,EAAUC,IAjBEmD,KAAA,SAiBxDiB,GAjBwD,IAAAC,EAAA,SAAAzD,EAAA0D,GAAA,OAAAD,EAAAC,GA0B5DH,EAAaC,EAAE,IAEuB,IAAlCpE,EAAOC,WAAWsE,cACpBvE,EAAOqB,MAAMvB,KAAKC,GAAYoE,GAGxB,CAAErE,KAAMqE,EAAYhC,OAAAA,GAhCgC,CAkBxDqC,IAAAA,EAAAA,WAAAA,IAAa,IAAbA,EAlBwD,OAAApE,QAAAC,QAmBhDT,EAAc,OAAQwE,EAAE,GAAIrE,EAAUC,IAAhDoE,KAAAA,SAAAA,GAEA,OAA0B,KAD1BjC,GADAiC,KACW,IACA9D,YAEV+D,EAAA,EADQ,CAAEvE,KAAMsE,EAAE,GAAIjC,OAAAA,IAERxB,QAAAA,QAAAA,EAAgByD,EAAE,GAAIpE,IAxBqBmD,KAAA,SAAAsB,GAwB1DtC,EAAMsC,CAxBoD,EAE5D,EAAA,CAgBID,GAhBJ,OAAAE,GAAAA,EAAAvB,KAAAuB,EAAAvB,KAAAvC,GAAAA,EAAA8D,EAAA,EAAA,EAAcP,EAAGQ,EAAA,CAAA,EAAU,OAAT7E,EAAsBA,EAAcE,EAAOqB,MAAMvB,KAAKC,IAEzCC,EAAAA,EAAOC,WAAWC,YAAzCC,EAAAA,EAAAA,SAAUqE,EAAAA,EAAAA,SAElBL,EAAW1B,GC5Bb,SAAqBkB,EAAOiB,GAC1B,IAAIC,EAASlB,EACPpC,EAAIqD,EAAE/E,KAAKiF,cAOjB,MANsB,iBAAlBD,GAAqC,YAANtD,GAAyB,WAANA,GAAwB,WAANA,GAAwB,UAANA,IACxFsD,EAASE,WAAmB,EAARpB,IACC,IAAjBqB,MAAMrB,KACRA,EAAQ,IAIbkB,CAAA,CDkBoBI,CAAWtB,EAHd3D,EAAOqB,MAAMD,QAGgBqB,IAC7C,IAAIN,EAAS,CAAE7B,WAAY,EAAGC,IAAK,IAE/BJ,EAAAA,WAAAA,GAAkB,MAAlBA,EAASsC,GACKtC,OAAAA,QAAAA,QAAAA,EAASsC,GAAM0B,EAAY1B,EAAM1C,EAAUC,IAVDmD,KAAA,SAUpDiB,GAVoD,GAW1DD,EAAaC,EAAE,GAEW,KAD1BjC,EAASiC,EAAE,IACA9D,WAb+C,OAAA0D,EAAA,EAcjD,CAAElE,KAAMsE,EAAE,GAAIjC,OAAAA,EAdmC,EAAA,CASxDhC,GATwD,OAAAC,QAAAC,QAAA6E,GAAAA,EAAA/B,KAAA+B,EAAA/B,KAAAc,GAAAA,EAAAiB,wCEavD,SAAAC,EAAiBC,EAAM/D,EAAOsC,GACpC,IAAKyB,EAAKC,EAAG,CACZ,GAAI1B,aAAJ2B,EAA4B,CAC3B,IAAI3B,EAAM0B,EAOT,YADA1B,EAAM4B,EAAIJ,EAAQK,KAAK,KAAMJ,EAAM/D,IALvB,EAARA,IACHA,EAAQsC,EAAM0B,GAEf1B,EAAQA,EAAM8B,CAKf,CACD,GAAI9B,GAASA,EAAMR,KAElB,YADAQ,EAAMR,KAAKgC,EAAQK,KAAK,KAAMJ,EAAM/D,GAAQ8D,EAAQK,KAAK,KAAMJ,EAAM,IAGtEA,EAAKC,EAAIhE,EACT+D,EAAKK,EAAI9B,EACT,IAAc+B,EAAGN,EAAKG,EAClBG,GACHA,EAASN,EAEV,CACD,KA5CcO,WAAc7D,EAAQ9B,OAoCnC,IAAA4F,EAAA,WAAA,IAAcC,EAAG,GAajB,GAZAC,EAAOnE,QAAQ,SAAC0D,EAAGU,GACjB,IAAUtD,EAAG4C,EAAEW,OAAOlB,cACtBO,EAAE5C,KAAOA,EACT4C,EAAEY,MAAoB,MAAXZ,EAAEY,OAAoC,IAAnBZ,EAAEY,MAAM3E,OAAgB+D,EAAEW,OAASX,EAAEY,MACrD,MAAVZ,EAAExF,OACJwF,EAAExF,KAAOwF,EAAEa,MAEbb,EAAE5D,QAAS,EACXoE,EAASpD,GAAQ4C,CAClB,GAGoB,MAAjBc,EACF,IAAK,SAAWA,EAAe,CAC7B,MAAeA,EAAAA,CAAAA,EAAAA,EAAc3E,IAC7B4E,EAAE3D,KAAOjB,EACT4E,EAAE3E,QAAS,EACXoE,EAASrE,GAAK4E,CACf,CAGH,MAAO,CACLhF,QAASyE,EACT/F,KAASuG,EACTlE,OAAAA,EA7DyC,EAC3C2D,EAAyBhE,EAAjBgE,OAAQQ,EAASxE,EAATwE,KACGH,EAAGnG,EAAOC,WAAWkG,cAC9BhE,EAAG,CAAE7B,WAAY,EAAGC,IAAK,iCAuBtB8F,EAAG,GA1B2BE,GA+FtBC,EApEDF,EAoEQG,EA/Fe,SA2BlCV,GACP,IAAMxE,EAvBc,SAACH,EAASsF,GAC9B,IAAMC,EAAS,GAUf,GATAD,EAAI/E,QAAQ,SAACyC,EAAG2B,GACd,IAAOV,EAAGjE,EAAQ2E,GACZtD,EAAO4C,EAAEW,OAAOlB,cACP,MAAXO,EAAEY,QACJZ,EAAEY,MAAQZ,EAAEW,QAEdW,EAAOlE,GAAQ2B,CAChB,GAEoB,MAAjB+B,EACF,IAAK,IAAL3E,OAA+B,CAC7B,IAAM4E,EAAID,EAAc3E,GAClBiB,EAAO2D,EAAEJ,OAAOlB,cACtB6B,EAAOlE,GAAQ2D,EAAEzC,KAClB,CAEH,QACD,CAIWiD,CAAcd,EAAQQ,EAAKP,IADD,OAGRnG,QAAAA,QAAAA,EAAc,OAAQ2B,EAAGwE,EAAG/F,IAHpBmD,KAAA,SAAA3C,GAIpC2B,OACAkE,EAAQQ,KAFGC,EAAAA,GAHyB,EAMrC,EA+DEf,GAAK,EACT,SAASgB,EAAOjF,GACf,IACC,OAASiE,EAAIS,EAAMlF,QAElB,IADAQ,EAAS2E,EAAKV,KACAjE,EAAOqB,KAAM,CAC1B,MAxD0B6D,EAwDPlF,aAvDhBwD,GAA0C,EAAb0B,EAAS3B,GA2DxC,YADAvD,EAAOqB,KAAK4D,EAAQrG,IAAWA,EAASyE,EAAQK,KAAK,KAAMJ,EAAO,IAAAE,EAAa,KAF/ExD,EAASA,EAAO2D,CAKjB,CAEEL,EACHD,EAAQC,EAAM,EAAGtD,GAEjBsD,EAAOtD,CAIR,CAFC,MAAOrB,GACR0E,EAAQC,IAASA,EAAO,IAAZE,GAA0B,EAAG7E,EACzC,CAvEI,IAAwBuG,CAwE7B,CACDD,GACO3B,qFAzBD,IAAgBoB,EAAOC,EACjBrB,EAAM1E,EAAdqF,GAlHE,MAAcT,eAAc,WAClC,SAAiBA,IACjB,CAgCA,OAhCAA,EAAM2B,UAAU9D,KAAO,SAAS+D,EAAaC,GAC5C,QAAe,IAAA7B,EACTjE,EAAQ+F,KAAK/B,EACnB,GAAIhE,EAAO,CACV,QAAyB,EAARA,EAAY6F,EAAcC,EAC3C,GAAIE,EAAU,CACb,IACClC,EAAQrD,EAAQ,EAAGuF,EAASD,KAAK3B,GAGjC,CAFC,MAAOhF,GACR0E,EAAQrD,EAAQ,EAAGrB,EACnB,CACD,OAAOqB,CACP,CACA,OAAOsF,IAER,CAeD,OAdAA,KAAK7B,EAAI,SAAS+B,GACjB,IACC,MAAM3D,EAAQ2D,EAAM7B,EACN,EAAV6B,EAAMjC,EACTF,EAAQrD,EAAQ,EAAGoF,EAAcA,EAAYvD,GAASA,GAC5CwD,EACVhC,EAAQrD,EAAQ,EAAGqF,EAAWxD,IAE9BwB,EAAQrD,EAAQ,EAAG6B,EAIpB,CAFC,MAAOlD,GACR0E,EAAQrD,EAAQ,EAAGrB,EACnB,CACD,EAEDqB,CAAA,EAEDwD,CAAA,CAnCkC,kBCsBJiC,EAASvH,OACtC,IAAU8B,EAAG,KADiClB,EAExB,QAAlBZ,EAAOa,OAFmCT,QAAAC,iBAUvBkH,EAASvH,OAChC,IAAQe,EAAmBf,EAAnBe,MAAOC,EAAYhB,EAAZgB,QACToF,OAASmB,GAOf,OANe,MAAXnB,EAAEnF,QACJmF,EAAEnF,MAAQjB,EAAOC,WAAWgB,OAEf,MAAXmF,EAAEvE,QACJuE,EAAEvE,MAAQ,IAERuE,EAAEoB,MAAQ,IAAiB,IAAZpB,EAAEqB,qBACZ,MAGOC,QAAAA,QAAAA,EAAa3G,EAAOC,EAASoF,kBAAvChC,GAEN,IAAK7C,EAAG,KAfgCgF,EAAA,WAAA,GAgB9B,OAANnC,yBAEQuB,EAAavB,EAAEtE,KAAME,IAlBOmD,KAAA,SAAAwE,GAkBtCpG,EAAAoG,EAEA3H,EAAOqB,MAAQ,CACbuG,SAAa,GACbC,gBAAkBzD,EAAEyD,YACpBC,YAAa1B,EACbtG,KAAa,GACbsB,QAAa,KAEuB,IAAlCpB,EAAOC,WAAWsE,cACpBvE,EAAOqB,MAAMvB,KAAOyB,EAAEzB,KACtBE,EAAOqB,MAAMD,QAAUG,EAAEH,SAE3BG,EAAEsG,WAAkBzD,EAAAA,CAAAA,EAAAA,EAAEyD,WA/BgB,GAAA,sCAiCxC,OAAOtG,CAjCiC,GAiCjCA,CAjCiC,sCAPvBwG,CAASR,EAASvH,IAHWmD,KAAA,SAAA6E,GAG5ClG,EAH4CkG,CAAA,GAAA5H,QAAAC,iBA8CnBkH,EAASvH,GAAQ,IAC5C,IAAQe,EAAwBf,EAAxBe,MAAOkH,EAAiBjI,EAAjBiI,aACPhH,EAAUjB,EAAOC,WAAjBgB,MACFiH,GAAWjH,EAAMuB,OAAUvB,IAAAA,EAAMwB,MAAOqC,cAHF,OAAA1E,QAAAC,QAYzB8H,EAAiBpH,EAAOkH,EAAcC,EAAO,KAPlD,CACZ5E,GAAI,CACF8E,MAAQb,EAAQC,KAAO,EACvBa,MAAQd,EAAQe,MAChBC,OAA2B,MAAlBhB,EAAQgB,QAA0BhB,EAAQgB,WATXpF,KAAA,SAYtCrD,GAGN,MAAa,KACTA,EAAAA,WAAAA,GAAS,OAATA,EAhBwC,OAAAM,QAAAC,QAiB3BsF,EAAa7F,EAAME,IAjBQmD,KAAA,SAAAqF,GAkB1CxI,EAAOqB,MAAQ,CACbuG,SAAa,GACbC,WAAa,GACbC,YAAa,CAAA,EACbhI,MALFgC,EAAA0G,GAKsB1I,KACpBsB,QAAaU,EAAOV,QAvBoB,GAgBxCtB,sCAUJ,OAAOgC,CA1BqC,GA0BrCA,CA1BqC,EApC/BiG,OAAAA,GAAAA,OAAAA,QAAAA,OAAAA,EAAAA,CAAAA,CALIU,CAAalB,EAASvH,IALOmD,KAAA,SAAAuF,GAK5C5G,EAL4C4G,CAAA,GAAA,OAAAtI,QAAAC,QAAAO,GAAAA,EAAAuC,KAAAvC,EAAAuC,KAAA,WAO9C,OAP8CrB,CAAA,GAOvCA,EAmET,OAAArB,GAAA,OAAAL,QAAAM,OAAAD,EAAA,CAAA,ECpEekI,WAAaC,EAAW5I,OACrC,MAD6CY,EAEvB,QAAlBZ,EAAOa,OAFkCT,QAAAC,QAUhCwI,SAAYD,EAAW5I,GAAQ,IAC5C,IACAuH,IADgCvH,EAAOC,WAAjBgB,EAAAA,EAAAA,MAEtB,GAAkB,UAAd2H,GACFrB,EAAeuB,EAAAA,CAAAA,EAHjBxG,EAAQwG,eAIE7H,MAAQA,OAGhB,IAAsB,KADtBsG,EAAUvH,EAAOqB,MAAMwG,WAAWe,IACtBnB,KACV,OAAArH,QAAAC,QAAO,MATiC,OAY5B0I,QAAAA,QAAAA,EAAexB,EAASvH,GAtB3B2I,OAAAA,GAAAA,OAAAA,QAAAA,OAAAA,EAAAA,CAAAA,CAGUE,CAAWD,EAAW5I,IAHAmD,KAAA,SAAA6F,GAG3CC,EAAYD,CAH+B,4BA0BhBJ,EAAW5I,GAAQ,IAChD,IAAQe,EAAwBf,EAAxBe,MAAOkH,EAAiBjI,EAAjBiI,aACPhH,EAAUjB,EAAOC,WAAjBgB,SAESA,EAAMuB,OAAT,IAAmBvB,EAAMwB,MAAOqC,cAJE,OAS7BqD,QAAAA,QAAAA,EAAiBpH,EAAOkH,EAAcC,EAAOU,EADhD,CAAEtF,GAAI,CAAE+E,MAAOrI,EAAOC,WAAW6I,aAAaR,UARdnF,KAAA,SAS1CrD,GAEN,IAAIgC,EAAS,KACThC,EAAAA,WAAAA,GAAS,OAATA,EACa6F,OAAAA,QAAAA,QAAAA,EAAa7F,EAAME,IAAlC8B,KAAAA,SAAAA,GACA9B,EAAOqB,MAAQ,CACbuG,SAAa,GACbC,WAAa,CAFA,EAGbC,YAAa,GACbhI,MALFgC,EAAA0G,GAKsB1I,KACpBsB,QAAaU,EAAOV,QAnBwB,EAuBhD,CAXItB,GAWJ,OAAA8F,GAAAA,EAAAzC,KAAAyC,EAAAzC,KAAA,WAAA,OAvBgDrB,CAAA,GAuBzCA,CAvByC,sCArBzBoH,CAAeN,EAAW5I,IAA/CiJ,KAAAA,SAAAA,GAAAA,GAL2C,GAO7C,OAAA7I,QAAAC,QAAAO,GAAAA,EAAAuC,KAAAvC,EAAAuC,KAAA,WAAA,OAP6C8F,CAAA,GAOtCA,kDCdaE,EAAclJ,EAAYmJ,GAAU,IACxD,MAAMrI,EAAQsI,IAEe,MAAzBF,EAAaG,WACfH,EAAaG,SAAW,QAJ8B,IAAA1I,EAM9B,QAAtBX,EAAWY,OACE0I,QAAAA,iBAOOxI,EAAOoI,EAAclJ,GAAY,IAAA,OAAAG,QAAAC,QACzCmJ,EAASzI,EAAOoI,IAA1B/E,KAAAA,SAAAA,GAsBN,MArBa,CACXvD,OAAQZ,EAAWY,OAEnBE,MAAAA,EACAC,QAAWoD,EAAEpD,QACbyI,QAAWrF,EAAEqF,QACbC,UAAW,KACXP,aAAAA,EACAlJ,WAAAA,EAEAoB,MAAO,CACLuG,SAAa,GACbC,WAAa,CAFR,EAGLC,YAAa,CAAA,EAEbhI,KAAS,GACTsB,QAAS,CAAA,GAGXuI,GAAIC,OArBmD,sCAPxCL,CAAUxI,EAAOoI,EAAclJ,IAA9CD,KAAAA,SAAAA,GAAAA,GAPsD,GASvC6J,QAAAA,iBA+BW9I,EAAOoI,EAAclJ,EAAYmJ,GAAU,IAAA,OAGnDU,QAAAA,QAAAA,EAAa/I,EAAOd,EAAW8J,eAAgBZ,IAA/DnI,KAAAA,SAAAA,0BACqBgJ,EAAmBjJ,EAAOC,EAASf,EAAWgB,MAAOmI,IAA1EnB,KAAAA,SAAAA,GAuBJ,MAtBa,CACXpH,OAAQZ,EAAWY,OAEnBE,MAAAA,EACAC,QAAAA,EACAiH,aAAAA,EACAwB,QAAW,KACXC,UAAW,KACXP,aAAAA,EACAlJ,WAAAA,EAEAoB,MAAO,CACLuG,SAAa,GACbC,WAAa,CAAA,EACbC,YAAa,CAAA,EAEbhI,KAAS,GACTsB,QAAS,CANJ,GASPuI,GAAIC,OAzBiE,wCA/BtDC,CAAc9I,EAAOoI,EAAclJ,EAAYmJ,IAA9DpJ,KAAAA,SAAAA,GAAAA,GATsD,GAWxD,OAAAI,QAAAC,QAAAO,GAAAA,EAAAuC,KAAAvC,EAAAuC,KAAA,WAAA,OAXwDnD,CAAA,GAWjDA,EA2BR,OAAAS,GAAA,OAAAL,QAAAM,OAAAD,EAAA,CAAA"}