{"version":3,"file":"index.umd.js","sources":["../src/commonHandler.js","../src/updateTableRows.js","../src/prepFormData.js","../src/fetchTableRows.js","../src/cellEdit.js","../src/text2Float.js","../src/scrollTable.js","../src/setup.js"],"sourcesContent":["/*\r\n * Copyright © 2022, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @description Run init, main or term handlers\r\n * @async\r\n * @module commonHandler\r\n * @category restafedit/core\r\n * @param {string} type   - type of exit (init|main|term)\r\n * @param {rowObject} data        - rowObject\r\n * @param {number} rowIndex    - client-side Row Index\r\n * @param {appEnv} appEnv      - app Environment from setup\r\n * @returns {promise}     - [data, status]\r\n * @example\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function commonHandler (type, data, rowIndex, appEnv) {\r\n  const { handlers } = appEnv.appControl.editControl;\r\n  if (handlers[type] == null) {\r\n    return [data, { statusCode: 0, msg: null }];\r\n  } else {\r\n    const [newDataRow, status] = await handlers[type](data, rowIndex, appEnv, type);\r\n    return [newDataRow, status];\r\n  }\r\n};\r\nexport default commonHandler;\r\n","\r\nimport { casUpdateData } from '@sassoftware/restaflib';\r\n/**\r\n * @description Update the row on the server\r\n * @async\r\n * @module updateTableRows\r\n * @category restafedit/core\r\n * @param {rowObject} data  - data as a rowObject\r\n * @param {appEnv} appEnv   - app Environment object from setup\r\n * @returns {promise}       - key is completion code\r\n * @example\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function updateTableRows (data, appEnv) {\r\n  let result;\r\n  if (appEnv.source === 'cas') {\r\n    result = await iupdateCasTable(data, appEnv);\r\n  } else {\r\n    result = await iupdateComputeTable(data, appEnv);\r\n  }\r\n  return result;\r\n}\r\n\r\nasync function iupdateCasTable (data, appEnv) {\r\n  const { store, session } = appEnv;\r\n  const { table, byvars } = appEnv.appControl.dataControl;\r\n  const columns = appEnv.state.columns;\r\n  const t = {};\r\n\r\n  if (byvars === null || byvars.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  for (const k in data) {\r\n    if (k !== '_index_' && columns[k].custom === false) {\r\n      t[k] = data[k];\r\n    };\r\n  };\r\n\r\n  const w = {};\r\n  byvars.forEach((k) => {\r\n    w[k] = t[k];\r\n  });\r\n  const payload = {\r\n    table,\r\n    data : t,\r\n    where: w\r\n  };\r\n\r\n  return await casUpdateData(store, session, payload);\r\n}\r\n\r\nasync function iupdateComputeTable (data, appEnv) {\r\n  const { store, session } = appEnv;\r\n  const { table, byvars } = appEnv.appControl.dataControl;\r\n  \r\n  if (byvars === null || byvars.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  let src =\r\n    `proc sql; update ${table.libref}.${table.name};`;\r\n  let set = 'set ';\r\n  let comma = ' ';\r\n  for (const k in data) {\r\n    set = set + comma + k + '=' + value2String(data[k]);\r\n    comma = ', ';\r\n  };\r\n\r\n  let w = 'where  ';\r\n  let andBit = ' ';\r\n\r\n  byvars.forEach((k) => {\r\n    w = w + andBit + k + '=' + value2String(data[k]);\r\n    andBit = 'AND ';\r\n  });\r\n  src = src + ' ' + w + ';run;';\r\n  const asrc = src.split(/\\r?\\n/);\r\n  console.log(asrc);\r\n\r\n  const payload = {\r\n    data: { code: asrc }\r\n  };\r\n\r\n  const job = await store.apiCall(session.links('execute'), payload);\r\n  const qs = {\r\n    qs: {\r\n      newState: 'Completed',\r\n      timeout : 1\r\n    }\r\n  };\r\n\r\n  const status = await store.jobState(job, qs);\r\n  console.log(status.data);\r\n  return true;\r\n}\r\n\r\nfunction value2String (value) {\r\n  let valueString;\r\n  if (value == null) {\r\n    valueString = '.';\r\n  } else if (typeof value === 'string') {\r\n    valueString = JSON.stringify(value);\r\n  } else {\r\n    valueString = value.toString();\r\n  }\r\n  return valueString;\r\n}\r\n\r\nexport default updateTableRows;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/*\r\n* output\r\n* extended columns and data ready for use in dataform and table\r\n*/\r\nimport commonHandler from './commonHandler';\r\n/**\r\n * @description reduce fetch results\r\n * @private\r\n * @async\r\n * @module prepFormData\r\n * @param {object} result - result from casFetchRow(rows and schema)\r\n * @param {object} appEnv - app Environment from setup\r\n * @returns {promise}     - {columns: eColumns, rowsObject: newRows}\r\n */\r\nasync function prepFormData (result, appEnv) {\r\n  const { schema, rows } = result;\r\n  const customColumns = appEnv.appControl.dataControl.customColumns;\r\n\r\n  const makeRowObject = (columns, row) => {\r\n    const rowObj = {};\r\n    row.forEach((r, i) => {\r\n      const s = columns[i];\r\n      const name = s.Column.toLowerCase();\r\n      if (s.Label == null) {\r\n        s.Label = s.Column;\r\n      }\r\n      rowObj[name] = r;\r\n    });\r\n\r\n    if (customColumns != null) {\r\n      for (const k in customColumns) {\r\n        const c = customColumns[k];\r\n        const name = c.Column.toLowerCase();\r\n        rowObj[name] = c.value;\r\n      }\r\n    }\r\n    return rowObj;\r\n  };\r\n\r\n  const newRows = [];\r\n  for (let i = 0; i < rows.length; i++) {\r\n    const t = makeRowObject(schema, rows[i]);\r\n\r\n    const [t1, status] = await commonHandler('init', t, i, appEnv);\r\n\r\n    if (status.code !== 0) {\r\n      console.log(JSON.stringify(status, null, 4));\r\n    }\r\n    newRows.push(t1);\r\n  };\r\n\r\n  // extend column and make it an object\r\n  const eColumns = {};\r\n  schema.forEach((s, i) => {\r\n    const name = s.Column.toLowerCase();\r\n    s.name = name;\r\n    s.Label = (s.Label == null || s.Label.length === 0) ? s.Column : s.Label;\r\n    s.custom = false;\r\n    eColumns[name] = s;\r\n  });\r\n\r\n  // add computed columns to the array.\r\n  if (customColumns != null) {\r\n    for (const k in customColumns) {\r\n      const c = { ...customColumns[k] };\r\n      c.name = k;\r\n      c.custom = true;\r\n      eColumns[k] = c;\r\n    }\r\n  }\r\n\r\n  return {\r\n    columns: eColumns,\r\n    data   : newRows\r\n  };\r\n}\r\nexport default prepFormData;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { casFetchRows, computeFetchData } from '@sassoftware/restaflib';\r\n\r\nimport prepFormData from './prepFormData';\r\n/**\r\n * @description Fetch new records based on control argument\r\n * @async\r\n * @module fetchTableRows\r\n * @category restafedit/core\r\n * @param {fetchControl} control - info for records to retrieve\r\n * @param {appEnv} appEnv - appEnv\r\n * @returns {promise}  - { data:data, columns:ecolumns, pagination: pagination}\r\n * @example\r\n *   let control = {from: 10, count:50, format: false};\r\n *   let r = await fetchTableRows(control, appEnv);\r\n *   r is a fetchResult object\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function fetchTableRows (control, appEnv) {\r\n  let result = null;\r\n  if (appEnv.source === 'cas') {\r\n    result = await icasRows(control, appEnv);\r\n  } else {\r\n    result = await icomputeRows(control, appEnv);\r\n  }\r\n  return result;\r\n}\r\n\r\nasync function icasRows (control, appEnv) {\r\n  const { store, session } = appEnv;\r\n  const c = { ...control };\r\n  if (c.table == null) {\r\n    c.table = appEnv.appControl.dataControl.table;\r\n  }\r\n  if (c.where == null) {\r\n    c.where = {};\r\n  }\r\n  if (c.from <= 0 || c.next === -1) {\r\n    return null;\r\n  }\r\n  const r = await casFetchRows(store, session, c);\r\n  let t = null;\r\n  if (r !== null) {\r\n    t = await prepFormData(r.data, appEnv);\r\n\r\n    appEnv.state = {\r\n      modified   : [],\r\n      pagination : { ...r.pagination },\r\n      currentPage: c,\r\n      data       : [],\r\n      columns    : []\r\n    };\r\n    if (appEnv.appControl.dataControl.cachePolicy === true) {\r\n      appEnv.state.data = t.data;\r\n      appEnv.state.columns = t.columns;\r\n    }\r\n    t.pagination = { ...r.pagination };\r\n  }\r\n  return t;\r\n}\r\n\r\nasync function icomputeRows (control, appEnv) {\r\n  const { store, tableSummary } = appEnv;\r\n  const { table } = appEnv.appControl.dataControl;\r\n  const tname = `${table.libref}.${table.name}`.toLowerCase();\r\n  const qs = {\r\n    offset: control.from - 1,\r\n    limit : control.count\r\n  };\r\n  const data = await computeFetchData(store, tableSummary, tname, null, qs);\r\n\r\n  let result = null;\r\n  if (data !== null) {\r\n    result = await prepFormData(data, appEnv);\r\n    appEnv.state = {\r\n      modified   : [],\r\n      pagination : {},\r\n      currentPage: {},\r\n      data       : result.data,\r\n      columns    : result.columns\r\n    };\r\n  }\r\n  return result;\r\n}\r\nexport default fetchTableRows;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport text2Float from './text2Float';\r\nimport commonHandler from './commonHandler';\r\nimport updateTableRows from './updateTableRows';\r\n\r\n/**\r\n * @description Process edit of a cell and optionally save the data\r\n * @async\r\n * @module cellEdit\r\n * @category restafedit/core\r\n * @param {string} name     - name of the field (lower case)\r\n * @param {*} value         - the new value for name field\r\n * @param {number} rowIndex - row Index ( index in the data array on client)\r\n * @param {rowObject} data  - RowObject for the entire row prior to change\r\n * @param {appEnv} appEnv   - app Environment from setup\r\n * @returns {promise}       - {data: updated data, status: status }\r\n * @example\r\n * data schema {column1: value, column2, value,...}\r\n * status schema {statusCode: 0|1|2, msg: some string}\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function cellEdit (name, value, rowIndex, data, appEnv) {\r\n  /* do not modify the data directly. caller will probably do a setState */\r\n  let newDataRow = (data !== null) ? { ...data } : { ...appEnv.state.data[rowIndex] };\r\n  const columns = appEnv.state.columns;\r\n  const { handlers, autoSave } = appEnv.appControl.editControl;\r\n\r\n  newDataRow[name] = text2Float(value, columns[name]);\r\n  let status = { statusCode: 0, msg: '' };\r\n\r\n  if (handlers[name] != null) {\r\n    const r = await handlers[name](newDataRow, name, rowIndex, appEnv);\r\n    newDataRow = r[0];\r\n    status = r[1];\r\n    if (status.statusCode === 2) {\r\n      return { data: r[0], status };\r\n    }\r\n  }\r\n  let r = await commonHandler('main', newDataRow, rowIndex, appEnv);\r\n  if (autoSave === true) {\r\n    r = await commonHandler('term', r[0], rowIndex, appEnv);\r\n    status = r[1];\r\n    if (status.statusCode === 2) {\r\n      return { data: r[0], status };\r\n    }\r\n\r\n    await updateTableRows(newDataRow, appEnv);\r\n  }\r\n  newDataRow = r[0];\r\n  status.msg = status.msg + ' / ' + r[1];\r\n\r\n  if (appEnv.appControl.dataControl.cachePolicy === true) {\r\n    appEnv.state.data[rowIndex] = newDataRow;\r\n  }\r\n\r\n  return ({ data: newDataRow, status });\r\n}\r\nexport default cellEdit;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nfunction text2Float (value, f) {\r\n  let svalue = value;\r\n  if (typeof svalue === 'string' && (f.Type === 'decimal' || f.Type === 'number' || f.Type === 'double')) {\r\n    svalue = parseFloat(value * 1.0);\r\n    if (isNaN(value) === true) {\r\n      value = 0;\r\n    }\r\n  }\r\n  return svalue;\r\n}\r\nexport default text2Float;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport fetchTableRows from './fetchTableRows';\r\nimport { computeFetchData } from '@sassoftware/restaflib';\r\nimport prepFormData from './prepFormData';\r\n/**\r\n * @description Simplify scrolling using next|prev|top\r\n * @async\r\n * @module scrollTable\r\n * @category restafedit/core\r\n * @param {string} direction direction(next|prev|first)\r\n * @param {appEnv} appEnv\r\n * @returns {promise}  result ready for display or null if it did not scroll\r\n * @example\r\n *  let r = await scrollTable('next', appEnv);\r\n *\r\n *  if ( r === null) {\r\n *     handle when no data was writtten\r\n *  } else {\r\n *     handle new data\r\n * }\r\n *\r\n * Make sure you handle exceptions that are thrown.\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function scrollTable (direction, appEnv) {\r\n  let fetchResults;\r\n  if (appEnv.source === 'cas') {\r\n    fetchResults = await icasScroll(direction, appEnv);\r\n  } else {\r\n    fetchResults = await icomputeScroll(direction, appEnv);\r\n  }\r\n  return fetchResults;\r\n}\r\n\r\nasync function icasScroll (direction, appEnv) {\r\n  const { initialFetch, table } = appEnv.appControl.dataControl;\r\n  let control;\r\n  if (direction === 'first') {\r\n    control = { ...initialFetch };\r\n    control.table = table;\r\n  } else {\r\n    control = appEnv.state.pagination[direction];\r\n    if (control.next === -1) {\r\n      return null;\r\n    }\r\n  }\r\n  const t = await fetchTableRows(control, appEnv);\r\n  return t;\r\n}\r\n\r\nasync function icomputeScroll (direction, appEnv) {\r\n  const { store, tableSummary } = appEnv;\r\n  const { table } = appEnv.appControl.dataControl;\r\n\r\n  const tname = `${table.libref}.${table.name}`.toLowerCase();\r\n\r\n  // eslint-disable-next-line prefer-const\r\n\r\n  const qs = { limit: appEnv.appControl.dataControl.initialFetch.count };\r\n  const data = await computeFetchData(store, tableSummary, tname, direction, qs);\r\n\r\n  let result = null;\r\n  if (data !== null) {\r\n    result = await prepFormData(data, appEnv);\r\n    appEnv.state = {\r\n      modified   : [],\r\n      pagination : {},\r\n      currentPage: {},\r\n      data       : result.data,\r\n      columns    : result.columns\r\n    };\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nexport default scrollTable;\r\n","\r\nimport { initStore } from '@sassoftware/restaf';\r\nimport { casSetup, computeSetup, computeSetupTables } from '@sassoftware/restaflib';\r\n\r\n/**\r\n * @description Setup an Edit session\r\n * @async\r\n * @module setup\r\n * @category restafedit/core\r\n * @param {logonPayload} logonPayload  - information for connecting to Viya\r\n * @param {appControl} appControl      - control information\r\n *\r\n * @returns {promise}  returns appEnv to control the flow\r\n * @alias module: setup\r\n * @example\r\n *  const appEnv = await setup(logonPayload, appControl);\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n *\r\n */\r\n\r\nasync function setup (logonPayload, appControl) {\r\n  const store = initStore();\r\n  let appEnv;\r\n  if (logonPayload.authType == null) {\r\n    logonPayload.authType = 'code';\r\n  }\r\n  const dataControl = appControl.dataControl;\r\n  if (dataControl.source === 'cas') {\r\n    const r = await casSetup(store, logonPayload);\r\n    appEnv = {\r\n      source: dataControl.source,\r\n\r\n      store,\r\n      session  : r.session,\r\n      servers  : r.servers,\r\n      restaflib: null,\r\n      logonPayload,\r\n\r\n      state: {\r\n        modified   : [],\r\n        pagination : {},\r\n        currentPage: {},\r\n        data       : {},\r\n        columns    : {}\r\n      }\r\n    };\r\n  } else {\r\n    \r\n    const session = await computeSetup(store, null, logonPayload);\r\n    \r\n    const tableSummary = await computeSetupTables(store, session, dataControl.table);\r\n    \r\n    appEnv = {\r\n      store,\r\n      session,\r\n      tableSummary,\r\n\r\n      servers  : null,\r\n      restaflib: null,\r\n      logonPayload,\r\n\r\n      state: {\r\n        modified   : [],\r\n        pagination : {},\r\n        currentPage: {},\r\n\r\n        data   : {},\r\n        columns: {}\r\n      }\r\n    };\r\n  };\r\n\r\n  appEnv.appControl = appControl;\r\n  appEnv.id = Date(); /* just assign a new id - placeholder */\r\n  return appEnv;\r\n}\r\nexport default setup;\r\n"],"names":["commonHandler","type","data","rowIndex","appEnv","appControl","editControl","handlers","Promise","resolve","statusCode","msg","_ref","e","reject","updateTableRows","result","source","iupdateCasTable","store","session","_appEnv$appControl$da2","dataControl","table","byvars","columns","state","t","length","k","custom","w","forEach","casUpdateData","where","then","_iupdateCasTable","iupdateComputeTable","_appEnv$appControl$da","src","libref","name","set","comma","value2String","andBit","asrc","split","console","log","payload","code","apiCall","links","job","jobState","qs","newState","timeout","status","_iupdateComputeTable","_temp2","value","JSON","stringify","toString","_settle","pact","s","_Pact","o","bind","v","observer","_temp3","eColumns","schema","i","Column","toLowerCase","Label","customColumns","c","newRows","rows","_temp4","array","body","row","rowObj","r","makeRowObject","t1","push","thenable","_cycle","prototype","onFulfilled","onRejected","this","callback","_this","fetchTableRows","control","icasRows","_extends","from","next","casFetchRows","prepFormData","_prepFormData2","modified","pagination","currentPage","cachePolicy","icomputeRows","tableSummary","tname","computeFetchData","offset","limit","count","_prepFormData","_icomputeRows","cellEdit","_exit3","newDataRow","_exit2","_result2","_temp","autoSave","_commonHandler","_appEnv$appControl$ed","f","svalue","Type","parseFloat","isNaN","text2Float","_temp6","_temp5","direction","initialFetch","scrollTable","icasScroll","_icasScroll","fetchResults","icomputeScroll","setup","logonPayload","id","Date","initStore","authType","casSetup","servers","restaflib","computeSetup","computeSetupTables"],"mappings":"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"}