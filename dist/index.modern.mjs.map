{"version":3,"file":"index.modern.mjs","sources":["../src/commonHandler.js","../src/updateTableRows.js","../src/cellEdit.js","../src/text2Float.js","../src/prepFormData.js","../src/fetchTableRows.js","../src/scrollTable.js","../src/setup.js","../src/distinctValues.js","../src/casTableUnique.js","../src/sasTableUnique.js","../src/uploadData.js","../src/sort.js"],"sourcesContent":["/*\r\n * Copyright © 2022, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @description Run init, main or term handlers\r\n * @async\r\n * @module commonHandler\r\n * @category restafedit/core\r\n * @param {string} type   - type of exit (init|main|term)\r\n * @param {rowObject} data        - rowObject\r\n * @param {number} rowIndex    - client-side Row Index\r\n * @param {appEnv} appEnv      - app Environment from setup\r\n * @returns {promise}     - [data, status]\r\n * @example\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function commonHandler (type, data, rowIndex, appEnv) {\r\n  const { handlers } = appEnv.appControl.editControl;\r\n  if (handlers[type] == null) {\r\n    return [data, { statusCode: 0, msg: null }];\r\n  } else {\r\n    const [newDataRow, status] = await handlers[type](data, rowIndex, appEnv, type);\r\n    return [newDataRow, status];\r\n  }\r\n};\r\nexport default commonHandler;\r\n","import { casUpdateData } from '@sassoftware/restaflib';\r\n/**\r\n * @description Update the row on the server\r\n * @async\r\n * @module updateTableRows\r\n * @category restafedit/core\r\n * @param {rowObject} data  - data as a rowObject\r\n * @param {appEnv} appEnv   - app Environment object from setup\r\n * @returns {promise}       - key is completion code\r\n * @example\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function updateTableRows (data, appEnv) {\r\n  let result;\r\n  if (appEnv.source === 'cas') {\r\n    result = await iupdateCasTable(data, appEnv);\r\n  } else {\r\n    result = await iupdateComputeTable(data, appEnv);\r\n  }\r\n  return result;\r\n}\r\n\r\nasync function iupdateCasTable (data, appEnv) {\r\n  const { store, session } = appEnv;\r\n  const { table, byvars } = appEnv.appControl;\r\n  const columns = appEnv.state.columns;\r\n\r\n  if (byvars === null || byvars.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  const t = {};\r\n  for (const k in data) {\r\n    if (!(k === '_index_' || k === '_rowIndex') && columns[k].custom === false) {\r\n      t[k] = data[k];\r\n    };\r\n  };\r\n\r\n  const w = {};\r\n  byvars.forEach((k) => {\r\n    w[k] = t[k];\r\n  });\r\n  const payload = {\r\n    table,\r\n    data : t,\r\n    where: w\r\n  };\r\n\r\n  const result = await casUpdateData(store, session, payload);\r\n  const r = result.items().toJS();\r\n  const status = { statusCode: 0, msg: 'Save successful' };\r\n\r\n  if (r.disposition.severity !== 'Normal') {\r\n    status.statusCode = 2;\r\n    status.msg = t.disposition.severity.reason;\r\n  };\r\n  return status;\r\n}\r\n\r\nasync function iupdateComputeTable (data, appEnv) {\r\n  const { store, session } = appEnv;\r\n  const { table, byvars } = appEnv.appControl;\r\n  const columns = appEnv.state.columns;\r\n  ;\r\n\r\n  if (byvars === null || byvars.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  let src =\r\n    `proc sql; update ${table.libref}.${table.name}`;\r\n  let set = 'SET ';\r\n  let comma = ' ';\r\n  for (const k in data) {\r\n    if (columns[k].custom === false) {\r\n      set = set + comma + k + '=' + value2String(data[k]);\r\n    }\r\n    comma = ', ';\r\n  };\r\n  src = src + ' ' + set;\r\n  let w = ' WHERE ';\r\n  let andBit = ' ';\r\n\r\n  byvars.forEach((k) => {\r\n    w = w + andBit + k + '=' + value2String(data[k]);\r\n    andBit = 'AND ';\r\n  });\r\n  src = src + ' ' + w + ';run;';\r\n  const asrc = src.split(/\\r?\\n/);\r\n\r\n  const payload = {\r\n    data: { code: asrc }\r\n  };\r\n\r\n  // console.log(asrc);\r\n\r\n  const job = await store.apiCall(session.links('execute'), payload);\r\n  const qs = {\r\n    qs: {\r\n      newState: 'Completed',\r\n      timeout : 1\r\n    }\r\n  };\r\n\r\n  // eslint-disable-next-line no-unused-vars\r\n  const status = await store.jobState(job, qs);\r\n  const c = (status.data === 'completed' ? 0 : 1);\r\n\r\n  return { statusCode: c, msg: status.data };\r\n}\r\n\r\nfunction value2String (value) {\r\n  let valueString;\r\n  if (value == null) {\r\n    valueString = '.';\r\n  } else if (typeof value === 'string') {\r\n    valueString = JSON.stringify(value);\r\n  } else {\r\n    valueString = value.toString();\r\n  }\r\n  return valueString;\r\n}\r\n\r\nexport default updateTableRows;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport text2Float from './text2Float';\r\nimport commonHandler from './commonHandler';\r\nimport updateTableRows from './updateTableRows';\r\n\r\n/**\r\n * @description Process edit of a cell and optionally save the data\r\n * @async\r\n * @module cellEdit\r\n * @category restafedit/core\r\n * @param {string} name     - name of the field (lower case)\r\n * @param {*} value         - the new value for name field\r\n * @param {number} rowIndex - row Index ( index in the data array on client)\r\n * @param {rowObject} data  - RowObject for the entire row prior to change\r\n * @param {appEnv} appEnv   - app Environment from setup\r\n * @returns {promise}       - {data: updated data, status: status }\r\n * @example\r\n * data schema {column1: value, column2, value,...}\r\n * status schema {statusCode: 0|1|2, msg: some string}\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function cellEdit (name, value, rowIndex, data, appEnv) {\r\n  /* do not modify the data directly. caller will probably do a setState */\r\n\r\n  let newDataRow = { ...data };\r\n  const columns = appEnv.state.columns;\r\n  const { handlers, autoSave } = appEnv.appControl.editControl;\r\n\r\n  newDataRow[name] = text2Float(value, columns[name]);\r\n  let status = { statusCode: 0, msg: '' };\r\n\r\n  if (handlers[name] != null) {\r\n    const r = await handlers[name](newDataRow, name, rowIndex, appEnv);\r\n    newDataRow = r[0];\r\n    status = r[1];\r\n    if (status.statusCode === 2) {\r\n      return { data: r[0], status };\r\n    }\r\n  }\r\n  let r = await commonHandler('main', newDataRow, rowIndex, appEnv);\r\n  if (autoSave === true) {\r\n    r = await commonHandler('term', r[0], rowIndex, appEnv);\r\n    status = r[1];\r\n    if (status.statusCode === 2) {\r\n      return { data: r[0], status };\r\n    }\r\n    status = await updateTableRows(r[0], appEnv);\r\n  }\r\n  newDataRow = r[0];\r\n\r\n  if (appEnv.appControl.cachePolicy === true) {\r\n    appEnv.state.data[data._rowIndex] = newDataRow;\r\n  }\r\n\r\n  return ({ data: newDataRow, status });\r\n}\r\nexport default cellEdit;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nfunction text2Float (value, f) {\r\n  let svalue = value;\r\n  const t = f.Type.toLowerCase();\r\n  if (typeof svalue === 'string' && (t === 'decimal' || t === 'number' || t === 'double' || t === 'float')) {\r\n    svalue = parseFloat(value * 1.0);\r\n    if (isNaN(value) === true) {\r\n      value = 0;\r\n    }\r\n  }\r\n  return svalue;\r\n}\r\nexport default text2Float;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/*\r\n* output\r\n* extended columns and data ready for use in dataform and table\r\n*/\r\nimport commonHandler from './commonHandler';\r\n/**\r\n * @description reduce fetch results\r\n * @private\r\n * @async\r\n * @module prepFormData\r\n * @param {object} result - result from casFetchRow(rows and schema)\r\n * @param {object} appEnv - app Environment from setup\r\n * @returns {promise}     - {columns: eColumns, rowsObject: newRows}\r\n */\r\nasync function prepFormData (result, appEnv) {\r\n  const { schema, rows } = result;\r\n  const customColumns = appEnv.appControl.customColumns;\r\n  let status = { statusCode: 0, msg: 'Initialization was successful' };\r\n\r\n  const makeRowObject = (columns, row, rown) => {\r\n    const rowObj = { _rowIndex: rown };\r\n    row.forEach((r, i) => {\r\n      const s = columns[i];\r\n      const name = s.Column.toLowerCase();\r\n      rowObj[name] = r;\r\n    });\r\n\r\n    if (customColumns != null) {\r\n      for (const k in customColumns) {\r\n        const c = customColumns[k];\r\n        const name = c.Column.toLowerCase();\r\n        rowObj[name] = c.value;\r\n      }\r\n    }\r\n    return rowObj;\r\n  };\r\n\r\n  const newRows = [];\r\n  for (let i = 0; i < rows.length; i++) {\r\n    const t = makeRowObject(schema, rows[i], i);\r\n\r\n    const [t1, statusi] = await commonHandler('init', t, i, appEnv);\r\n    status = statusi;\r\n    newRows.push(t1);\r\n  };\r\n\r\n  // extend column and make it an object\r\n  const eColumns = {};\r\n  schema.forEach((s, i) => {\r\n    const name = s.Column.toLowerCase();\r\n    s.name = name;\r\n    s.Label = (s.Label == null || s.Label.length === 0) ? s.Column : s.Label;\r\n    if (s.Type == null) {\r\n      s.Type = (s.type == null) ? 'double' : s.type;\r\n    }\r\n    s.custom = false;\r\n    eColumns[name] = s;\r\n  });\r\n\r\n  // add computed columns to the array.\r\n  if (customColumns != null) {\r\n    for (const k in customColumns) {\r\n      const c = { ...customColumns[k] };\r\n      c.name = k;\r\n      c.custom = true;\r\n      eColumns[k] = c;\r\n    }\r\n  }\r\n\r\n  return {\r\n    columns: eColumns,\r\n    data   : newRows,\r\n    status\r\n  };\r\n}\r\nexport default prepFormData;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { casFetchRows, computeFetchData } from '@sassoftware/restaflib';\r\n\r\nimport prepFormData from './prepFormData';\r\n/**\r\n * @description Fetch new records based on control argument\r\n * @async\r\n * @private\r\n * @module fetchTableRows\r\n * @category restafedit/core\r\n * @param {fetchControl} control - info for records to retrieve\r\n * @param {appEnv} appEnv - appEnv\r\n * @returns {promise}  - { data:data, columns:ecolumns, pagination: pagination}\r\n * @example\r\n *   let control = {from: 10, count:50, format: false};\r\n *   let r = await fetchTableRows(control, appEnv);\r\n *   r is a fetchResult object\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function fetchTableRows (control, appEnv) {\r\n  let result = null;\r\n  if (appEnv.source === 'cas') {\r\n    result = await icasRows(control, appEnv);\r\n  } else {\r\n    result = await icomputeRows(control, appEnv);\r\n  }\r\n  return result;\r\n}\r\n\r\nasync function icasRows (control, appEnv) {\r\n  const { store, session } = appEnv;\r\n  const c = { ...control };\r\n  if (c.from <= 0 || c.next === -1) {\r\n    return null;\r\n  }\r\n  debugger;\r\n  if (c.where == null) {\r\n    c.where = ' ';\r\n  }\r\n  const r = await casFetchRows(store, session, c);\r\n\r\n  let t = null;\r\n  if (r !== null) {\r\n    t = await prepFormData(r.data, appEnv);\r\n\r\n    appEnv.state = {\r\n      modified   : [],\r\n      pagination : { ...r.pagination },\r\n      currentPage: c,\r\n      data       : [],\r\n      columns    : []\r\n    };\r\n    if (appEnv.appControl.cachePolicy === true) {\r\n      appEnv.state.data = t.data;\r\n      appEnv.state.columns = t.columns;\r\n    }\r\n    t.pagination = { ...r.pagination };\r\n  }\r\n  return t;\r\n}\r\n\r\nasync function icomputeRows (control, appEnv) {\r\n  const { store, tableSummary } = appEnv;\r\n  const { table } = appEnv.appControl;\r\n  const tname = `${table.libref}.${table.name}`.toLowerCase();\r\n  // eslint-disable-next-line prefer-const\r\n  let payload = {\r\n    qs: {\r\n      start : control.from - 1,\r\n      limit : control.count,\r\n      format: (control.format != null) ? false : control.format\r\n    }\r\n  };\r\n  const data = await computeFetchData(store, tableSummary, tname, null, payload);\r\n  ;\r\n\r\n  let result = null;\r\n  if (data !== null) {\r\n    result = await prepFormData(data, appEnv);\r\n    appEnv.state = {\r\n      modified   : [],\r\n      pagination : {},\r\n      currentPage: {},\r\n      data       : result.data,\r\n      columns    : result.columns\r\n    };\r\n  }\r\n  return result;\r\n}\r\nexport default fetchTableRows;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n// import fetchTableRows from './fetchTableRows';\r\nimport { computeFetchData, casFetchRows } from '@sassoftware/restaflib';\r\nimport prepFormData from './prepFormData';\r\n/**\r\n * @description Simplify scrolling using next|prev|top\r\n * @async\r\n * @module scrollTable\r\n * @category restafedit/core\r\n * @param {string} direction direction(next|prev|first)\r\n * @param {appEnv} appEnv\r\n * @param {object=} payload  override pogination with custom scrolling\r\n * @returns {promise}  result ready for display or null if it did not scroll\r\n * @example\r\n *  let r = await scrollTable('next', appEnv);\r\n *\r\n *  if ( r === null) {\r\n *     handle when no data was writtten\r\n *  } else {\r\n *     handle new data\r\n * }\r\n *\r\n * Make sure you handle exceptions that are thrown.\r\n *\r\n * For custom scrolling, pass the scrolling information in the optional third parameter.\r\n * The content of the payload depends on whether the source is cas or compute.\r\n * For compute see the documentation for rowset in compute service.<https://developer.sas.com/apis/rest/Compute/#get-a-row-set-from-a-data-set>\r\n * CAS payload is not as rich the rowset for compute service\r\n * The payload for CAS is as follows\r\n *  { start: <number>\r\n *    count: <number>\r\n *    format: true|false,\r\n *    where: <where string>\r\n * };\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function scrollTable (direction, appEnv, payload) {\r\n  let fetchResults;\r\n  if (appEnv.source === 'cas') {\r\n    fetchResults = await icasScroll(direction, appEnv, payload);\r\n  } else {\r\n    fetchResults = await icomputeScroll(direction, appEnv, payload);\r\n  }\r\n  return fetchResults;\r\n}\r\n\r\nasync function icasScroll (direction, appEnv, payload) {\r\n  const { store, session } = appEnv;\r\n  const { initialFetch, table } = appEnv.appControl;\r\n  let control;\r\n\r\n  if (direction === 'first') {\r\n    control = { ...initialFetch };\r\n  } else if (direction !== null) {\r\n    control = { ...appEnv.state.pagination[direction] };\r\n    if (control.next === -1 || control.from <= 0) {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  if (payload != null) {\r\n    control = { ...payload };\r\n  }\r\n\r\n  control.table = table;\r\n  debugger;\r\n  const r = await casFetchRows(store, session, control);\r\n\r\n  let t = null;\r\n  if (r !== null) {\r\n    t = await prepFormData(r.data, appEnv);\r\n    appEnv.state = {\r\n      modified   : [],\r\n      pagination : { ...r.pagination },\r\n      currentPage: control,\r\n      data       : [],\r\n      columns    : []\r\n    };\r\n    if (appEnv.appControl.cachePolicy === true) {\r\n      appEnv.state.data = t.data;\r\n      appEnv.state.columns = t.columns;\r\n    }\r\n    t.pagination = { ...r.pagination };\r\n    return t;\r\n  }\r\n}\r\n\r\nasync function icomputeScroll (direction, appEnv, payload) {\r\n  const { store, tableSummary } = appEnv;\r\n  const { table, initialFetch } = appEnv.appControl;\r\n  let control = null;\r\n\r\n  const tname = `${table.libref}.${table.name}`.toLowerCase();\r\n\r\n  if (payload == null) {\r\n    if (direction === 'first') {\r\n      control = { ...initialFetch };\r\n    }\r\n  } else {\r\n    control = { ...payload };\r\n  }\r\n\r\n  // eslint-disable-next-line prefer-const\r\n\r\n  const data = await computeFetchData(store, tableSummary, tname, direction, control);\r\n\r\n  let result = null;\r\n  if (data !== null) {\r\n    result = await prepFormData(data, appEnv);\r\n    appEnv.state = {\r\n      modified   : [],\r\n      pagination : {},\r\n      currentPage: {},\r\n      data       : result.data,\r\n      columns    : result.columns\r\n    };\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nexport default scrollTable;\r\n","/* eslint-disable prefer-const */\r\n\r\nimport { initStore } from '@sassoftware/restaf';\r\nimport { casSetup, computeSetup, computeSetupTables } from '@sassoftware/restaflib';\r\nimport deepmerge from 'deepmerge';\r\n\r\n/**\r\n * @description Setup an Edit session\r\n * @async\r\n * @module setup\r\n * @category restafedit/core\r\n * @param {logonPayload} logonPayload  - information for connecting to Viya\r\n * @param {appControl} appControl      - control information\r\n *\r\n * @returns {promise}  returns appEnv to control the flow\r\n * @alias module: setup\r\n * @example\r\n *  const appEnv = await setup(logonPayload, appControl);\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n *\r\n */\r\n\r\nasync function setup (logonPayload, appControl, preamble) {\r\n  const store = initStore();\r\n  let appEnv;\r\n  if (logonPayload.authType == null) {\r\n    logonPayload.authType = 'code';\r\n  }\r\n  if (appControl.source === 'cas') {\r\n    appEnv = await icasSetup(store, logonPayload, appControl);\r\n  } else {\r\n    appEnv = await icomputeSetup(store, logonPayload, appControl, preamble);\r\n  }\r\n  return appEnv;\r\n}\r\n\r\nasync function icasSetup (store, logonPayload, appControl) {\r\n  const r = await casSetup(store, logonPayload);\r\n  let appEnv = {\r\n    source: appControl.source,\r\n\r\n    store,\r\n    session  : r.session,\r\n    servers  : r.servers,\r\n    restaflib: null,\r\n    logonPayload,\r\n    appControl,\r\n\r\n    state: {\r\n      modified   : [],\r\n      pagination : {},\r\n      currentPage: {},\r\n\r\n      data   : {},\r\n      columns: {}\r\n    },\r\n\r\n    id: Date()\r\n  };\r\n  return appEnv;\r\n};\r\n\r\nasync function icomputeSetup (store, logonPayload, appControl, preamble) {\r\n  // eslint-disable-next-line prefer-const\r\n  ;\r\n  let session = await computeSetup(store, appControl.computeContext, logonPayload);\r\n  let tableSummary = await computeSetupTables(store, session, appControl.table, preamble);\r\n  let appEnv = {\r\n    source: appControl.source,\r\n\r\n    store,\r\n    session,\r\n    tableSummary,\r\n\r\n    servers  : null,\r\n    restaflib: null,\r\n\r\n    logonPayload,\r\n    appControl: deepmerge(appControl),\r\n\r\n    state: {\r\n      modified   : [],\r\n      pagination : {},\r\n      currentPage: {},\r\n\r\n      data   : {},\r\n      columns: {}\r\n    },\r\n\r\n    id: Date()\r\n  };\r\n  return appEnv;\r\n}\r\n\r\nexport default setup;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport casTableUnique from './casTableUnique';\r\nimport sasTableUnique from './sasTableUnique';\r\n\r\n/**\r\n * @description Get unique values for a specific column\r\n * @async\r\n * @module distinctValues\r\n * @category restafedit/core\r\n * @param {object} table {caslib: xxx, name: yyy}\r\n * @param {string} columnName    column name\r\n * @param {appEnv} appEnv   - app Environment from setup\r\n * @returns {promise}       - {an array of unique values }\r\n * @example\r\n *  let selectList = await distinctValues('company', appEnv))\r\n *  This is useful to get a list of unique values for selected columns.\r\n *  {company:['IBM', 'Microsoft', 'SAS'] }\r\n */\r\n\r\nasync function distinctValues (table, columnName, appEnv, payload) {\r\n  let data;\r\n  if (appEnv.source === 'cas') {\r\n    data = await casTableUnique(table, columnName, appEnv, payload);\r\n  } else {\r\n    data = await sasTableUnique(table, columnName, appEnv, payload);\r\n  }\r\n  return data;\r\n};\r\nexport default distinctValues;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nimport { caslRun } from '@sassoftware/restaflib';\r\n\r\n/**\r\n * @description Get unique values for a specific column\r\n * @async\r\n * @private\r\n * @module casTableUnique\r\n * @category restafedit/core\r\n * @param {object} table object\r\n * @param {string} columnName    column name\r\n * @param {appEnv} appEnv   app Environment from setup\r\n * @returns {promise}       {an array of unique values }\r\n * @example\r\n *  let selectList = await casTableUnique('company, appEnv))\r\n *  This is useful to get a list of unique values for selected columns.\r\n *  {columnName:[ array of unquew values] }\r\n */\r\n\r\nasync function casTableUnique (table, columnName, appEnv, payload) {\r\n  const { store, session } = appEnv;\r\n\r\n  const src = `\r\n  results = selectionLists(_args_.column,_args_.table.caslib, _args_.table.name);\r\n  send_response({casResults = {data=results}});\r\n  `\r\n  ;\r\n  const args = {\r\n    table,\r\n    column: columnName\r\n  };\r\n\r\n  const result = await caslRun(store, session, src, args, true);\r\n  if (result.results.casResults.data.statusCode !== 0) {\r\n    // eslint-disable-next-line no-throw-literal\r\n    throw 'Failed to create unique list';\r\n  }\r\n\r\n  const data = result.results.casResults.data.data;\r\n\r\n  return data;\r\n};\r\nexport default casTableUnique;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @description Get unique values for a specific column(sas table)\r\n * @async\r\n * @private\r\n * @module sasTableUnique\r\n * @category restafedit/core\r\n * @param {string} columnName    column name\r\n * @param {appEnv} appEnv   app Environment from setup\r\n * @returns {promise}       {an array of unique values }\r\n * @example\r\n *  let selectList = await casTableUnique('company, appEnv))\r\n *  This is useful to get a list of unique values for selected columns.\r\n *  {columnName:[ array of unquew values] }\r\n */\r\n\r\nasync function sasTableUnique (columnName, appEnv, payload) {\r\n  const data = {};\r\n  data[columnName] = [];\r\n  return data;\r\n};\r\nexport default sasTableUnique;\r\n","/* eslint-disable no-tabs */\r\n/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { casUpload, caslRun } from '@sassoftware/restaflib';\r\n\r\n/**\r\n * @description Get unique values for a specific column\r\n * @async\r\n * @module uploadData\r\n * @category restafedit/core\r\n * @param {object} output table\r\n * @param {array}  data\r\n * @param {array}  drop fields to delete\r\n * @param {object} addon columns\r\n * @param {appEnv} appEnv   - app Environment from setup\r\n * @returns {promise}       - {an array of unique values }\r\n * @example\r\n *  let selectList = await distinctValues('company', appEnv))\r\n *  This is useful to get a list of unique values for selected columns.\r\n *  {company:['IBM', 'Microsoft', 'SAS'] }\r\n */\r\n\r\nasync function uploadData (table, data, drop, addon, appEnv, append2Table) {\r\n  const { store, session } = appEnv;\r\n  debugger;\r\n  let t = data[0];\r\n  for (let j = 0; j < drop.length; j++) {\r\n    delete t[drop[j]];\r\n  }\r\n  t = { ...addon, ...t };\r\n  const columns = Object.keys(t);\r\n\r\n  let csvArray = columns.join(',') + '\\n';\r\n  debugger;\r\n  for (let i = 0; i < data.length; i++) {\r\n    let temp = data[i];\r\n    temp = { ...temp, ...addon };\r\n    const valArray = [];\r\n    columns.forEach((c, l) => {\r\n      let v = temp[c];\r\n      if (typeof v === 'string') {\r\n        v = v.trim();\r\n      }\r\n      valArray[l] = v;\r\n    });\r\n    csvArray = csvArray + valArray.join(',') + '\\n';\r\n  }\r\n  debugger;\r\n  console.log(csvArray);\r\n  console.log(casUpload);\r\n  console.log(_casTableUpload);\r\n  let result;\r\n  if (appEnv.source === 'cas') {\r\n    result = await _casTableUpload(\r\n      store,\r\n      session,\r\n      table,\r\n      csvArray,\r\n      append2Table\r\n    );\r\n  } else {\r\n    result = {};\r\n  }\r\n  debugger;\r\n  console.log(result.items().toJS());\r\n  return result;\r\n}\r\n\r\nasync function _casTableUpload (store, session, table, csvArray, append2Table) {\r\n  debugger;\r\n  console.log('calling casUpload');\r\n  const t = `${table.caslib}.${table.name}`;\r\n  let r = await casUpload(store, session, null, t, true, csvArray);\r\n  console.log('end of casUpload');\r\n  debugger;\r\n  if (append2Table != null) {\r\n    debugger;\r\n    const args = {\r\n      masterTable: append2Table,\r\n      setTable   : table\r\n    };\r\n    const src = `\r\n\t\t\trc = checkAndLoadTable(_args_.masterTable.caslib, _args_.masterTable.name);\r\n\t\t\tif (rc ne true) then do;\r\n\t\t\t\tresults = {Errors= 'Unable to access ' ||_args_.masterTable.caslib||'.'||_args_.masterTable.name};   \r\n\t\t\t\tsend_response(casResults=results);\r\n\t\t\t\tend; \r\n\t\t\trc = checkAndLoadTable(_args_.setTable.caslib, _args_.setTable.name);\r\n\t\t\tif (rc ne true) then do;\r\n\t\t\t\tresults = {Errors= 'Unable to access ' ||_args_.setTable.caslib||'.'||_args_.setTable.name};   \r\n\t\t\t\tsend_response(casResults=results);\r\n\t\t\t\tend;\r\n\t\t\taction datastep.runCode r=result rc=rc/ code='data ${append2Table.caslib}.${append2Table.name} (append=YES);set ${t};run;'\r\n\t\t\tsend_response({casResults = {code = rc}});\r\n\t\t\t`;\r\n    console.log(src);\r\n    r = await caslRun(store, session, src, args, true);\r\n    console.log(r);\r\n    return r;\r\n  }\r\n}\r\nexport default uploadData;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @description sort data for seelected column\r\n * @async\r\n * @module sort\r\n * @private\r\n * @category restafedit/core\r\n * @param {string} columnName    column name\r\n * @param {string} direction  A|D   (A=ascending, B=descending)\r\n * @param {array}  data if null, the data cached in appEnv will be used.\r\n * @param {appEnv} appEnv   - app Environment from setup\r\n * @returns {promise}       returns the sorted array\r\n * @example\r\n *  let status = await distinctValues('company', appEnv))\r\n *  This is useful to get a list of unique values for selected columns.\r\n *  {company:['IBM', 'Microsoft', 'SAS'] }\r\n */\r\n\r\nasync function sort (columnName, appEnv, payload) {\r\n  return [];\r\n};\r\nexport default sort;\r\n"],"names":["async","type","data","rowIndex","appEnv","handlers","appControl","editControl","statusCode","msg","newDataRow","status","updateTableRows","result","source","store","session","table","byvars","columns","state","length","t","k","custom","w","forEach","payload","where","casUpdateData","items","toJS","disposition","severity","reason","iupdateCasTable","src","libref","name","set","comma","value2String","andBit","code","split","job","apiCall","links","jobState","qs","newState","timeout","iupdateComputeTable","value","valueString","JSON","stringify","toString","cellEdit","_extends","autoSave","f","svalue","Type","toLowerCase","parseFloat","isNaN","text2Float","r","commonHandler","cachePolicy","_rowIndex","prepFormData","schema","rows","customColumns","makeRowObject","row","rown","rowObj","i","Column","c","t1","statusi","newRows","push","s","Label","eColumns","control","from","next","modified","pagination","currentPage","tableSummary","start","limit","count","format","tname","icomputeRows","scrollTable","direction","fetchResults","initialFetch","casFetchRows","icasScroll","computeFetchData","icomputeScroll","setup","logonPayload","preamble","initStore","authType","servers","restaflib","id","Date","icasSetup","computeSetup","computeContext","computeSetupTables","deepmerge","icomputeSetup","distinctValues","columnName","args","column","caslRun","results","casResults","casTableUnique","sasTableUnique","uploadData","drop","addon","append2Table","j","Object","keys","csvArray","join","temp","l","v","trim","valArray","console","log","casUpload","_casTableUpload","caslib","masterTable","setTable","sort"],"mappings":"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"}