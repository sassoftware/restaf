{"version":3,"file":"index.module.js","sources":["../src/commonHandler.js","../src/updateTableRows.js","../src/cellEdit.js","../src/text2Float.js","../src/prepFormData.js","../src/fetchTableRows.js","../src/scrollTable.js","../src/setup.js"],"sourcesContent":["/*\r\n * Copyright © 2022, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @description Run init, main or term handlers\r\n * @async\r\n * @module commonHandler\r\n * @category restafedit/core\r\n * @param {string} type   - type of exit (init|main|term)\r\n * @param {rowObject} data        - rowObject\r\n * @param {number} rowIndex    - client-side Row Index\r\n * @param {appEnv} appEnv      - app Environment from setup\r\n * @returns {promise}     - [data, status]\r\n * @example\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function commonHandler (type, data, rowIndex, appEnv) {\r\n  const { handlers } = appEnv.appControl.editControl;\r\n  if (handlers[type] == null) {\r\n    return [data, { statusCode: 0, msg: null }];\r\n  } else {\r\n    const [newDataRow, status] = await handlers[type](data, rowIndex, appEnv, type);\r\n    return [newDataRow, status];\r\n  }\r\n};\r\nexport default commonHandler;\r\n","import { casUpdateData } from '@sassoftware/restaflib';\r\n/**\r\n * @description Update the row on the server\r\n * @async\r\n * @module updateTableRows\r\n * @category restafedit/core\r\n * @param {rowObject} data  - data as a rowObject\r\n * @param {appEnv} appEnv   - app Environment object from setup\r\n * @returns {promise}       - key is completion code\r\n * @example\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function updateTableRows (data, appEnv) {\r\n  let result;\r\n  if (appEnv.source === 'cas') {\r\n    result = await iupdateCasTable(data, appEnv);\r\n  } else {\r\n    result = await iupdateComputeTable(data, appEnv);\r\n  }\r\n  return result;\r\n}\r\n\r\nasync function iupdateCasTable (data, appEnv) {\r\n  const { store, session } = appEnv;\r\n  const { table, byvars } = appEnv.appControl.dataControl;\r\n  const columns = appEnv.state.columns;\r\n  const t = {};\r\n\r\n  if (byvars === null || byvars.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  for (const k in data) {\r\n    if (k !== '_index_' && columns[k].custom === false) {\r\n      t[k] = data[k];\r\n    };\r\n  };\r\n\r\n  const w = {};\r\n  byvars.forEach((k) => {\r\n    w[k] = t[k];\r\n  });\r\n  const payload = {\r\n    table,\r\n    data : t,\r\n    where: w\r\n  };\r\n\r\n  await casUpdateData(store, session, payload);\r\n  return { statusCode: 0, msg: 'Save successful' };\r\n}\r\n\r\nasync function iupdateComputeTable (data, appEnv) {\r\n  const { store, session } = appEnv;\r\n  const { table, byvars } = appEnv.appControl.dataControl;\r\n\r\n  if (byvars === null || byvars.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  let src =\r\n    `proc sql; update ${table.libref}.${table.name}`;\r\n  let set = 'SET ';\r\n  let comma = ' ';\r\n  for (const k in data) {\r\n    set = set + comma + k + '=' + value2String(data[k]);\r\n    comma = ', ';\r\n  };\r\n  src = src + ' ' + set;\r\n  let w = ' WHERE ';\r\n  let andBit = ' ';\r\n\r\n  byvars.forEach((k) => {\r\n    w = w + andBit + k + '=' + value2String(data[k]);\r\n    andBit = 'AND ';\r\n  });\r\n  src = src + ' ' + w + ';run;';\r\n  const asrc = src.split(/\\r?\\n/);\r\n  console.log(asrc);\r\n\r\n  const payload = {\r\n    data: { code: asrc }\r\n  };\r\n\r\n  const job = await store.apiCall(session.links('execute'), payload);\r\n  const qs = {\r\n    qs: {\r\n      newState: 'Completed',\r\n      timeout : 1\r\n    }\r\n  };\r\n\r\n  // eslint-disable-next-line no-unused-vars\r\n  const status = await store.jobState(job, qs);\r\n  const c = (status.data === 'completed' ? 0 : 1);\r\n  console.log(status);\r\n  return { statusCode: c, msg: status.data };\r\n}\r\n\r\nfunction value2String (value) {\r\n  let valueString;\r\n  if (value == null) {\r\n    valueString = '.';\r\n  } else if (typeof value === 'string') {\r\n    valueString = JSON.stringify(value);\r\n  } else {\r\n    valueString = value.toString();\r\n  }\r\n  return valueString;\r\n}\r\n\r\nexport default updateTableRows;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport text2Float from './text2Float';\r\nimport commonHandler from './commonHandler';\r\nimport updateTableRows from './updateTableRows';\r\n\r\n/**\r\n * @description Process edit of a cell and optionally save the data\r\n * @async\r\n * @module cellEdit\r\n * @category restafedit/core\r\n * @param {string} name     - name of the field (lower case)\r\n * @param {*} value         - the new value for name field\r\n * @param {number} rowIndex - row Index ( index in the data array on client)\r\n * @param {rowObject} data  - RowObject for the entire row prior to change\r\n * @param {appEnv} appEnv   - app Environment from setup\r\n * @returns {promise}       - {data: updated data, status: status }\r\n * @example\r\n * data schema {column1: value, column2, value,...}\r\n * status schema {statusCode: 0|1|2, msg: some string}\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function cellEdit (name, value, rowIndex, data, appEnv) {\r\n  /* do not modify the data directly. caller will probably do a setState */\r\n  let newDataRow = (data !== null) ? { ...data } : { ...appEnv.state.data[rowIndex] };\r\n  const columns = appEnv.state.columns;\r\n  const { handlers, autoSave } = appEnv.appControl.editControl;\r\n\r\n  newDataRow[name] = text2Float(value, columns[name]);\r\n  let status = { statusCode: 0, msg: '' };\r\n\r\n  if (handlers[name] != null) {\r\n    const r = await handlers[name](newDataRow, name, rowIndex, appEnv);\r\n    newDataRow = r[0];\r\n    status = r[1];\r\n    if (status.statusCode === 2) {\r\n      return { data: r[0], status };\r\n    }\r\n  }\r\n  let r = await commonHandler('main', newDataRow, rowIndex, appEnv);\r\n  if (autoSave === true) {\r\n    r = await commonHandler('term', r[0], rowIndex, appEnv);\r\n    status = r[1];\r\n    if (status.statusCode === 2) {\r\n      return { data: r[0], status };\r\n    }\r\n\r\n    await updateTableRows(newDataRow, appEnv);\r\n  }\r\n  newDataRow = r[0];\r\n  status.msg = status.msg + ' / ' + r[1];\r\n\r\n  if (appEnv.appControl.dataControl.cachePolicy === true) {\r\n    appEnv.state.data[rowIndex] = newDataRow;\r\n  }\r\n\r\n  return ({ data: newDataRow, status });\r\n}\r\nexport default cellEdit;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nfunction text2Float (value, f) {\r\n  let svalue = value;\r\n  if (typeof svalue === 'string' && (f.Type === 'decimal' || f.Type === 'number' || f.Type === 'double')) {\r\n    svalue = parseFloat(value * 1.0);\r\n    if (isNaN(value) === true) {\r\n      value = 0;\r\n    }\r\n  }\r\n  return svalue;\r\n}\r\nexport default text2Float;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/*\r\n* output\r\n* extended columns and data ready for use in dataform and table\r\n*/\r\nimport commonHandler from './commonHandler';\r\n/**\r\n * @description reduce fetch results\r\n * @private\r\n * @async\r\n * @module prepFormData\r\n * @param {object} result - result from casFetchRow(rows and schema)\r\n * @param {object} appEnv - app Environment from setup\r\n * @returns {promise}     - {columns: eColumns, rowsObject: newRows}\r\n */\r\nasync function prepFormData (result, appEnv) {\r\n  const { schema, rows } = result;\r\n  const customColumns = appEnv.appControl.dataControl.customColumns;\r\n\r\n  const makeRowObject = (columns, row) => {\r\n    const rowObj = {};\r\n    row.forEach((r, i) => {\r\n      const s = columns[i];\r\n      const name = s.Column.toLowerCase();\r\n      if (s.Label == null) {\r\n        s.Label = s.Column;\r\n      }\r\n      rowObj[name] = r;\r\n    });\r\n\r\n    if (customColumns != null) {\r\n      for (const k in customColumns) {\r\n        const c = customColumns[k];\r\n        const name = c.Column.toLowerCase();\r\n        rowObj[name] = c.value;\r\n      }\r\n    }\r\n    return rowObj;\r\n  };\r\n\r\n  const newRows = [];\r\n  for (let i = 0; i < rows.length; i++) {\r\n    const t = makeRowObject(schema, rows[i]);\r\n\r\n    const [t1, status] = await commonHandler('init', t, i, appEnv);\r\n\r\n    if (status.code !== 0) {\r\n      console.log(JSON.stringify(status, null, 4));\r\n    }\r\n    newRows.push(t1);\r\n  };\r\n\r\n  // extend column and make it an object\r\n  const eColumns = {};\r\n  schema.forEach((s, i) => {\r\n    const name = s.Column.toLowerCase();\r\n    s.name = name;\r\n    s.Label = (s.Label == null || s.Label.length === 0) ? s.Column : s.Label;\r\n    s.custom = false;\r\n    eColumns[name] = s;\r\n  });\r\n\r\n  // add computed columns to the array.\r\n  if (customColumns != null) {\r\n    for (const k in customColumns) {\r\n      const c = { ...customColumns[k] };\r\n      c.name = k;\r\n      c.custom = true;\r\n      eColumns[k] = c;\r\n    }\r\n  }\r\n\r\n  return {\r\n    columns: eColumns,\r\n    data   : newRows\r\n  };\r\n}\r\nexport default prepFormData;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { casFetchRows, computeFetchData } from '@sassoftware/restaflib';\r\n\r\nimport prepFormData from './prepFormData';\r\n/**\r\n * @description Fetch new records based on control argument\r\n * @async\r\n * @module fetchTableRows\r\n * @category restafedit/core\r\n * @param {fetchControl} control - info for records to retrieve\r\n * @param {appEnv} appEnv - appEnv\r\n * @returns {promise}  - { data:data, columns:ecolumns, pagination: pagination}\r\n * @example\r\n *   let control = {from: 10, count:50, format: false};\r\n *   let r = await fetchTableRows(control, appEnv);\r\n *   r is a fetchResult object\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function fetchTableRows (control, appEnv) {\r\n  let result = null;\r\n  if (appEnv.source === 'cas') {\r\n    result = await icasRows(control, appEnv);\r\n  } else {\r\n    result = await icomputeRows(control, appEnv);\r\n  }\r\n  return result;\r\n}\r\n\r\nasync function icasRows (control, appEnv) {\r\n  const { store, session } = appEnv;\r\n  const c = { ...control };\r\n  if (c.table == null) {\r\n    c.table = appEnv.appControl.dataControl.table;\r\n  }\r\n  if (c.where == null) {\r\n    c.where = {};\r\n  }\r\n  if (c.from <= 0 || c.next === -1) {\r\n    return null;\r\n  }\r\n  const r = await casFetchRows(store, session, c);\r\n  let t = null;\r\n  if (r !== null) {\r\n    t = await prepFormData(r.data, appEnv);\r\n\r\n    appEnv.state = {\r\n      modified   : [],\r\n      pagination : { ...r.pagination },\r\n      currentPage: c,\r\n      data       : [],\r\n      columns    : []\r\n    };\r\n    if (appEnv.appControl.dataControl.cachePolicy === true) {\r\n      appEnv.state.data = t.data;\r\n      appEnv.state.columns = t.columns;\r\n    }\r\n    t.pagination = { ...r.pagination };\r\n  }\r\n  return t;\r\n}\r\n\r\nasync function icomputeRows (control, appEnv) {\r\n  const { store, tableSummary } = appEnv;\r\n  const { table } = appEnv.appControl.dataControl;\r\n  const tname = `${table.libref}.${table.name}`.toLowerCase();\r\n  // eslint-disable-next-line prefer-const\r\n  let payload = {\r\n    qs: {\r\n      start : control.from - 1,\r\n      limit : control.count,\r\n      format: (control.format != null) ? false : control.format\r\n    }\r\n  };\r\n  const data = await computeFetchData(store, tableSummary, tname, null, payload);\r\n  debugger;\r\n\r\n  let result = null;\r\n  if (data !== null) {\r\n    result = await prepFormData(data, appEnv);\r\n    appEnv.state = {\r\n      modified   : [],\r\n      pagination : {},\r\n      currentPage: {},\r\n      data       : result.data,\r\n      columns    : result.columns\r\n    };\r\n  }\r\n  return result;\r\n}\r\nexport default fetchTableRows;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport fetchTableRows from './fetchTableRows';\r\nimport { computeFetchData } from '@sassoftware/restaflib';\r\nimport prepFormData from './prepFormData';\r\n/**\r\n * @description Simplify scrolling using next|prev|top\r\n * @async\r\n * @module scrollTable\r\n * @category restafedit/core\r\n * @param {string} direction direction(next|prev|first)\r\n * @param {appEnv} appEnv\r\n * @returns {promise}  result ready for display or null if it did not scroll\r\n * @example\r\n *  let r = await scrollTable('next', appEnv);\r\n *\r\n *  if ( r === null) {\r\n *     handle when no data was writtten\r\n *  } else {\r\n *     handle new data\r\n * }\r\n *\r\n * Make sure you handle exceptions that are thrown.\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function scrollTable (direction, appEnv) {\r\n  let fetchResults;\r\n  if (appEnv.source === 'cas') {\r\n    fetchResults = await icasScroll(direction, appEnv);\r\n  } else {\r\n    fetchResults = await icomputeScroll(direction, appEnv);\r\n  }\r\n  return fetchResults;\r\n}\r\n\r\nasync function icasScroll (direction, appEnv) {\r\n  const { initialFetch, table } = appEnv.appControl.dataControl;\r\n  let control;\r\n  if (direction === 'first') {\r\n    control = { ...initialFetch };\r\n    control.table = table;\r\n  } else {\r\n    control = appEnv.state.pagination[direction];\r\n    if (control.next === -1) {\r\n      return null;\r\n    }\r\n  }\r\n  const t = await fetchTableRows(control, appEnv);\r\n  return t;\r\n}\r\n\r\nasync function icomputeScroll (direction, appEnv) {\r\n  const { store, tableSummary } = appEnv;\r\n  const { table } = appEnv.appControl.dataControl;\r\n\r\n  const tname = `${table.libref}.${table.name}`.toLowerCase();\r\n\r\n  // eslint-disable-next-line prefer-const\r\n\r\n  const payload = { qs: { limit: appEnv.appControl.dataControl.initialFetch.count } };\r\n  const data = await computeFetchData(store, tableSummary, tname, direction, payload);\r\n\r\n  let result = null;\r\n  if (data !== null) {\r\n    result = await prepFormData(data, appEnv);\r\n    appEnv.state = {\r\n      modified   : [],\r\n      pagination : {},\r\n      currentPage: {},\r\n      data       : result.data,\r\n      columns    : result.columns\r\n    };\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nexport default scrollTable;\r\n","\r\nimport { initStore } from '@sassoftware/restaf';\r\nimport { casSetup, computeSetup, computeSetupTables } from '@sassoftware/restaflib';\r\n\r\n/**\r\n * @description Setup an Edit session\r\n * @async\r\n * @module setup\r\n * @category restafedit/core\r\n * @param {logonPayload} logonPayload  - information for connecting to Viya\r\n * @param {appControl} appControl      - control information\r\n *\r\n * @returns {promise}  returns appEnv to control the flow\r\n * @alias module: setup\r\n * @example\r\n *  const appEnv = await setup(logonPayload, appControl);\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n *\r\n */\r\n\r\nasync function setup (logonPayload, appControl) {\r\n  const store = initStore();\r\n  let appEnv;\r\n  if (logonPayload.authType == null) {\r\n    logonPayload.authType = 'code';\r\n  }\r\n  const dataControl = appControl.dataControl;\r\n  if (dataControl.source === 'cas') {\r\n    const r = await casSetup(store, logonPayload);\r\n    appEnv = {\r\n      source: dataControl.source,\r\n\r\n      store,\r\n      session  : r.session,\r\n      servers  : r.servers,\r\n      restaflib: null,\r\n      logonPayload,\r\n\r\n      state: {\r\n        modified   : [],\r\n        pagination : {},\r\n        currentPage: {},\r\n        data       : {},\r\n        columns    : {}\r\n      }\r\n    };\r\n  } else {\r\n    \r\n    const session = await computeSetup(store, null, logonPayload);\r\n    \r\n    const tableSummary = await computeSetupTables(store, session, dataControl.table);\r\n    \r\n    appEnv = {\r\n      store,\r\n      session,\r\n      tableSummary,\r\n\r\n      servers  : null,\r\n      restaflib: null,\r\n      logonPayload,\r\n\r\n      state: {\r\n        modified   : [],\r\n        pagination : {},\r\n        currentPage: {},\r\n\r\n        data   : {},\r\n        columns: {}\r\n      }\r\n    };\r\n  };\r\n\r\n  appEnv.appControl = appControl;\r\n  appEnv.id = Date(); /* just assign a new id - placeholder */\r\n  return appEnv;\r\n}\r\nexport default setup;\r\n"],"names":["commonHandler","type","data","rowIndex","appEnv","appControl","editControl","handlers","Promise","resolve","statusCode","msg","_ref","e","reject","updateTableRows","result","source","iupdateCasTable","store","session","dataControl","table","byvars","state","columns","t","length","k","custom","w","forEach","casUpdateData","where","then","_iupdateCasTable","iupdateComputeTable","_appEnv$appControl$da","src","libref","name","set","comma","value2String","andBit","asrc","split","console","log","payload","code","apiCall","links","job","jobState","qs","newState","timeout","status","c","_iupdateComputeTable","_temp2","value","JSON","stringify","toString","cellEdit","_exit3","newDataRow","r","_exit2","_result2","cachePolicy","_temp","autoSave","_commonHandler","_appEnv$appControl$ed","f","svalue","Type","parseFloat","isNaN","text2Float","_temp6","_temp5","_settle","pact","s","_Pact","o","bind","v","observer","_temp3","eColumns","schema","i","Column","toLowerCase","Label","customColumns","newRows","rows","_temp4","array","body","row","rowObj","makeRowObject","t1","push","thenable","_cycle","prototype","onFulfilled","onRejected","this","callback","_this","control","_extends","from","next","casFetchRows","prepFormData","modified","pagination","currentPage","icasRows","_icasRows","tableSummary","tname","computeFetchData","start","limit","count","format","_prepFormData","icomputeRows","_icomputeRows","scrollTable","direction","fetchResults","icasScroll","initialFetch","fetchTableRows","icomputeScroll","_icomputeScroll","setup","logonPayload","id","Date","initStore","authType","casSetup","servers","restaflib","computeSetup","computeSetupTables"],"mappings":"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"}