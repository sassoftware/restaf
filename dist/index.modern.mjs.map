{"version":3,"file":"index.modern.mjs","sources":["../src/commonHandler.js","../src/updateTableRows.js","../src/cellEdit.js","../src/text2Float.js","../src/prepFormData.js","../src/fetchTableRows.js","../src/scrollTable.js","../src/setup.js"],"sourcesContent":["/*\r\n * Copyright © 2022, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @description Run init, main or term handlers\r\n * @async\r\n * @module commonHandler\r\n * @category restafedit/core\r\n * @param {string} type   - type of exit (init|main|term)\r\n * @param {rowObject} data        - rowObject\r\n * @param {number} rowIndex    - client-side Row Index\r\n * @param {appEnv} appEnv      - app Environment from setup\r\n * @returns {promise}     - [data, status]\r\n * @example\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function commonHandler (type, data, rowIndex, appEnv) {\r\n  const { handlers } = appEnv.appControl.editControl;\r\n  if (handlers[type] == null) {\r\n    return [data, { statusCode: 0, msg: null }];\r\n  } else {\r\n    const [newDataRow, status] = await handlers[type](data, rowIndex, appEnv, type);\r\n    return [newDataRow, status];\r\n  }\r\n};\r\nexport default commonHandler;\r\n","import { casUpdateData } from '@sassoftware/restaflib';\r\n/**\r\n * @description Update the row on the server\r\n * @async\r\n * @module updateTableRows\r\n * @category restafedit/core\r\n * @param {rowObject} data  - data as a rowObject\r\n * @param {appEnv} appEnv   - app Environment object from setup\r\n * @returns {promise}       - key is completion code\r\n * @example\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function updateTableRows (data, appEnv) {\r\n  let result;\r\n  if (appEnv.source === 'cas') {\r\n    result = await iupdateCasTable(data, appEnv);\r\n  } else {\r\n    result = await iupdateComputeTable(data, appEnv);\r\n  }\r\n  return result;\r\n}\r\n\r\nasync function iupdateCasTable (data, appEnv) {\r\n  const { store, session } = appEnv;\r\n  const { table, byvars } = appEnv.appControl;\r\n  const columns = appEnv.state.columns;\r\n\r\n  if (byvars === null || byvars.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  const t = {};\r\n  for (const k in data) {\r\n    if (k !== '_index_' && columns[k].custom === false) {\r\n      t[k] = data[k];\r\n    };\r\n  };\r\n\r\n  const w = {};\r\n  byvars.forEach((k) => {\r\n    w[k] = t[k];\r\n  });\r\n  const payload = {\r\n    table,\r\n    data : t,\r\n    where: w\r\n  };\r\n\r\n  const result = await casUpdateData(store, session, payload);\r\n  const r = result.items().toJS();\r\n  const status = { statusCode: 0, msg: 'Save successful' };\r\n\r\n  if (r.disposition.severity !== 'Normal') {\r\n    status.statusCode = 2;\r\n    status.msg = t.disposition.severity.reason;\r\n  };\r\n  return status;\r\n}\r\n\r\nasync function iupdateComputeTable (data, appEnv) {\r\n  const { store, session } = appEnv;\r\n  const { table, byvars } = appEnv.appControl;\r\n  const columns = appEnv.state.columns;\r\n  ;\r\n\r\n  if (byvars === null || byvars.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  let src =\r\n    `proc sql; update ${table.libref}.${table.name}`;\r\n  let set = 'SET ';\r\n  let comma = ' ';\r\n  for (const k in data) {\r\n    if (columns[k].custom === false) {\r\n      set = set + comma + k + '=' + value2String(data[k]);\r\n    }\r\n    comma = ', ';\r\n  };\r\n  src = src + ' ' + set;\r\n  let w = ' WHERE ';\r\n  let andBit = ' ';\r\n\r\n  byvars.forEach((k) => {\r\n    w = w + andBit + k + '=' + value2String(data[k]);\r\n    andBit = 'AND ';\r\n  });\r\n  src = src + ' ' + w + ';run;';\r\n  const asrc = src.split(/\\r?\\n/);\r\n\r\n  const payload = {\r\n    data: { code: asrc }\r\n  };\r\n\r\n  console.log(asrc);\r\n\r\n  const job = await store.apiCall(session.links('execute'), payload);\r\n  const qs = {\r\n    qs: {\r\n      newState: 'Completed',\r\n      timeout : 1\r\n    }\r\n  };\r\n\r\n  // eslint-disable-next-line no-unused-vars\r\n  const status = await store.jobState(job, qs);\r\n  const c = (status.data === 'completed' ? 0 : 1);\r\n\r\n  return { statusCode: c, msg: status.data };\r\n}\r\n\r\nfunction value2String (value) {\r\n  let valueString;\r\n  if (value == null) {\r\n    valueString = '.';\r\n  } else if (typeof value === 'string') {\r\n    valueString = JSON.stringify(value);\r\n  } else {\r\n    valueString = value.toString();\r\n  }\r\n  return valueString;\r\n}\r\n\r\nexport default updateTableRows;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport text2Float from './text2Float';\r\nimport commonHandler from './commonHandler';\r\nimport updateTableRows from './updateTableRows';\r\n\r\n/**\r\n * @description Process edit of a cell and optionally save the data\r\n * @async\r\n * @module cellEdit\r\n * @category restafedit/core\r\n * @param {string} name     - name of the field (lower case)\r\n * @param {*} value         - the new value for name field\r\n * @param {number} rowIndex - row Index ( index in the data array on client)\r\n * @param {rowObject} data  - RowObject for the entire row prior to change\r\n * @param {appEnv} appEnv   - app Environment from setup\r\n * @returns {promise}       - {data: updated data, status: status }\r\n * @example\r\n * data schema {column1: value, column2, value,...}\r\n * status schema {statusCode: 0|1|2, msg: some string}\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function cellEdit (name, value, rowIndex, data, appEnv) {\r\n  /* do not modify the data directly. caller will probably do a setState */\r\n  let newDataRow = (data !== null) ? { ...data } : { ...appEnv.state.data[rowIndex] };\r\n  const columns = appEnv.state.columns;\r\n  const { handlers, autoSave } = appEnv.appControl.editControl;\r\n\r\n  newDataRow[name] = text2Float(value, columns[name]);\r\n  let status = { statusCode: 0, msg: '' };\r\n\r\n  if (handlers[name] != null) {\r\n    const r = await handlers[name](newDataRow, name, rowIndex, appEnv);\r\n    newDataRow = r[0];\r\n    status = r[1];\r\n    if (status.statusCode === 2) {\r\n      return { data: r[0], status };\r\n    }\r\n  }\r\n  let r = await commonHandler('main', newDataRow, rowIndex, appEnv);\r\n  if (autoSave === true) {\r\n    r = await commonHandler('term', r[0], rowIndex, appEnv);\r\n    status = r[1];\r\n    if (status.statusCode === 2) {\r\n      return { data: r[0], status };\r\n    }\r\n    status = await updateTableRows(r[0], appEnv);\r\n  }\r\n  newDataRow = r[0];\r\n  status.msg = status.msg + ' / ' + r[1];\r\n\r\n  if (appEnv.appControl.cachePolicy === true) {\r\n    appEnv.state.data[rowIndex] = newDataRow;\r\n  }\r\n\r\n  return ({ data: newDataRow, status });\r\n}\r\nexport default cellEdit;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nfunction text2Float (value, f) {\r\n  let svalue = value;\r\n  if (typeof svalue === 'string' && (f.Type === 'decimal' || f.Type === 'number' || f.Type === 'double')) {\r\n    svalue = parseFloat(value * 1.0);\r\n    if (isNaN(value) === true) {\r\n      value = 0;\r\n    }\r\n  }\r\n  return svalue;\r\n}\r\nexport default text2Float;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/*\r\n* output\r\n* extended columns and data ready for use in dataform and table\r\n*/\r\nimport commonHandler from './commonHandler';\r\n/**\r\n * @description reduce fetch results\r\n * @private\r\n * @async\r\n * @module prepFormData\r\n * @param {object} result - result from casFetchRow(rows and schema)\r\n * @param {object} appEnv - app Environment from setup\r\n * @returns {promise}     - {columns: eColumns, rowsObject: newRows}\r\n */\r\nasync function prepFormData (result, appEnv) {\r\n  const { schema, rows } = result;\r\n  const customColumns = appEnv.appControl.customColumns;\r\n  let status = { statusCode: 0, msg: 'Initialization was successful' };\r\n\r\n  const makeRowObject = (columns, row) => {\r\n    const rowObj = {};\r\n    row.forEach((r, i) => {\r\n      const s = columns[i];\r\n      const name = s.Column.toLowerCase();\r\n      if (s.Label == null) {\r\n        s.Label = s.Column;\r\n      }\r\n      rowObj[name] = r;\r\n    });\r\n\r\n    if (customColumns != null) {\r\n      for (const k in customColumns) {\r\n        const c = customColumns[k];\r\n        const name = c.Column.toLowerCase();\r\n        rowObj[name] = c.value;\r\n      }\r\n    }\r\n    return rowObj;\r\n  };\r\n\r\n  const newRows = [];\r\n  for (let i = 0; i < rows.length; i++) {\r\n    const t = makeRowObject(schema, rows[i]);\r\n\r\n    const [t1, statusi] = await commonHandler('init', t, i, appEnv);\r\n    status = statusi;\r\n    newRows.push(t1);\r\n  };\r\n\r\n  // extend column and make it an object\r\n  const eColumns = {};\r\n  schema.forEach((s, i) => {\r\n    const name = s.Column.toLowerCase();\r\n    s.name = name;\r\n    s.Label = (s.Label == null || s.Label.length === 0) ? s.Column : s.Label;\r\n    s.custom = false;\r\n    eColumns[name] = s;\r\n  });\r\n\r\n  // add computed columns to the array.\r\n  if (customColumns != null) {\r\n    for (const k in customColumns) {\r\n      const c = { ...customColumns[k] };\r\n      c.name = k;\r\n      c.custom = true;\r\n      eColumns[k] = c;\r\n    }\r\n  }\r\n\r\n  return {\r\n    columns: eColumns,\r\n    data   : newRows,\r\n    status\r\n  };\r\n}\r\nexport default prepFormData;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { casFetchRows, computeFetchData } from '@sassoftware/restaflib';\r\n\r\nimport prepFormData from './prepFormData';\r\n/**\r\n * @description Fetch new records based on control argument\r\n * @async\r\n * @module fetchTableRows\r\n * @category restafedit/core\r\n * @param {fetchControl} control - info for records to retrieve\r\n * @param {appEnv} appEnv - appEnv\r\n * @returns {promise}  - { data:data, columns:ecolumns, pagination: pagination}\r\n * @example\r\n *   let control = {from: 10, count:50, format: false};\r\n *   let r = await fetchTableRows(control, appEnv);\r\n *   r is a fetchResult object\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function fetchTableRows (control, appEnv) {\r\n  let result = null;\r\n  if (appEnv.source === 'cas') {\r\n    result = await icasRows(control, appEnv);\r\n  } else {\r\n    result = await icomputeRows(control, appEnv);\r\n  }\r\n  return result;\r\n}\r\n\r\nasync function icasRows (control, appEnv) {\r\n  const { store, session } = appEnv;\r\n  const c = { ...control };\r\n  if (c.table == null) {\r\n    c.table = appEnv.appControl.table;\r\n  }\r\n  if (c.where == null) {\r\n    c.where = {};\r\n  }\r\n  if (c.from <= 0 || c.next === -1) {\r\n    return null;\r\n  }\r\n  \r\n  const r = await casFetchRows(store, session, c);\r\n  \r\n  let t = null;\r\n  if (r !== null) {\r\n    \r\n    t = await prepFormData(r.data, appEnv);\r\n\r\n    appEnv.state = {\r\n      modified   : [],\r\n      pagination : { ...r.pagination },\r\n      currentPage: c,\r\n      data       : [],\r\n      columns    : []\r\n    };\r\n    if (appEnv.appControl.cachePolicy === true) {\r\n      appEnv.state.data = t.data;\r\n      appEnv.state.columns = t.columns;\r\n    }\r\n    t.pagination = { ...r.pagination };\r\n  }\r\n  return t;\r\n}\r\n\r\nasync function icomputeRows (control, appEnv) {\r\n  const { store, tableSummary } = appEnv;\r\n  const { table } = appEnv.appControl;\r\n  const tname = `${table.libref}.${table.name}`.toLowerCase();\r\n  // eslint-disable-next-line prefer-const\r\n  let payload = {\r\n    qs: {\r\n      start : control.from - 1,\r\n      limit : control.count,\r\n      format: (control.format != null) ? false : control.format\r\n    }\r\n  };\r\n  const data = await computeFetchData(store, tableSummary, tname, null, payload);\r\n  ;\r\n\r\n  let result = null;\r\n  if (data !== null) {\r\n    result = await prepFormData(data, appEnv);\r\n    appEnv.state = {\r\n      modified   : [],\r\n      pagination : {},\r\n      currentPage: {},\r\n      data       : result.data,\r\n      columns    : result.columns\r\n    };\r\n  }\r\n  return result;\r\n}\r\nexport default fetchTableRows;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport fetchTableRows from './fetchTableRows';\r\nimport { computeFetchData } from '@sassoftware/restaflib';\r\nimport prepFormData from './prepFormData';\r\n/**\r\n * @description Simplify scrolling using next|prev|top\r\n * @async\r\n * @module scrollTable\r\n * @category restafedit/core\r\n * @param {string} direction direction(next|prev|first)\r\n * @param {appEnv} appEnv\r\n * @returns {promise}  result ready for display or null if it did not scroll\r\n * @example\r\n *  let r = await scrollTable('next', appEnv);\r\n *\r\n *  if ( r === null) {\r\n *     handle when no data was writtten\r\n *  } else {\r\n *     handle new data\r\n * }\r\n *\r\n * Make sure you handle exceptions that are thrown.\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function scrollTable (direction, appEnv) {\r\n  let fetchResults;\r\n  if (appEnv.source === 'cas') {\r\n    fetchResults = await icasScroll(direction, appEnv);\r\n  } else {\r\n    fetchResults = await icomputeScroll(direction, appEnv);\r\n  }\r\n  return fetchResults;\r\n}\r\n\r\nasync function icasScroll (direction, appEnv) {\r\n  const { initialFetch, table } = appEnv.appControl;\r\n  let control;\r\n  if (direction === 'first') {\r\n    control = { ...initialFetch };\r\n    control.table = table;\r\n  } else {\r\n    control = appEnv.state.pagination[direction];\r\n    if (control.next === -1) {\r\n      return null;\r\n    }\r\n  }\r\n  const t = await fetchTableRows(control, appEnv);\r\n  return t;\r\n}\r\n\r\nasync function icomputeScroll (direction, appEnv) {\r\n  const { store, tableSummary } = appEnv;\r\n  const { table } = appEnv.appControl;\r\n\r\n  const tname = `${table.libref}.${table.name}`.toLowerCase();\r\n\r\n  // eslint-disable-next-line prefer-const\r\n\r\n  const payload = { qs: { limit: appEnv.appControl.initialFetch.count } };\r\n  const data = await computeFetchData(store, tableSummary, tname, direction, payload);\r\n\r\n  let result = null;\r\n  if (data !== null) {\r\n    result = await prepFormData(data, appEnv);\r\n    appEnv.state = {\r\n      modified   : [],\r\n      pagination : {},\r\n      currentPage: {},\r\n      data       : result.data,\r\n      columns    : result.columns\r\n    };\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nexport default scrollTable;\r\n","/* eslint-disable prefer-const */\r\n\r\nimport { initStore } from '@sassoftware/restaf';\r\nimport { casSetup, computeSetup, computeSetupTables } from '@sassoftware/restaflib';\r\n\r\n/**\r\n * @description Setup an Edit session\r\n * @async\r\n * @module setup\r\n * @category restafedit/core\r\n * @param {logonPayload} logonPayload  - information for connecting to Viya\r\n * @param {appControl} appControl      - control information\r\n *\r\n * @returns {promise}  returns appEnv to control the flow\r\n * @alias module: setup\r\n * @example\r\n *  const appEnv = await setup(logonPayload, appControl);\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n *\r\n */\r\n\r\nasync function setup (logonPayload, appControl, preamble) {\r\n  const store = initStore();\r\n  let appEnv;\r\n  if (logonPayload.authType == null) {\r\n    logonPayload.authType = 'code';\r\n  }\r\n  if (appControl.source === 'cas') {\r\n    appEnv = await icasSetup(store, logonPayload, appControl);\r\n  } else {\r\n    appEnv = await icomputeSetup(store, logonPayload, appControl, preamble);\r\n  }\r\n  return appEnv;\r\n}\r\n\r\nasync function icasSetup (store, logonPayload, appControl) {\r\n  const r = await casSetup(store, logonPayload);\r\n  let appEnv = {\r\n    source: appControl.source,\r\n\r\n    store,\r\n    session  : r.session,\r\n    servers  : r.servers,\r\n    restaflib: null,\r\n    logonPayload,\r\n    appControl,\r\n\r\n    state: {\r\n      modified   : [],\r\n      pagination : {},\r\n      currentPage: {},\r\n\r\n      data   : {},\r\n      columns: {}\r\n    },\r\n\r\n    id: Date()\r\n  };\r\n  return appEnv;\r\n};\r\n\r\nasync function icomputeSetup (store, logonPayload, appControl, preamble) {\r\n  // eslint-disable-next-line prefer-const\r\n  ;\r\n  let session = await computeSetup(store, appControl.computeContext, logonPayload);\r\n  let tableSummary = await computeSetupTables(store, session, appControl.table, preamble);\r\n  let appEnv = {\r\n    source: appControl.source,\r\n\r\n    store,\r\n    session,\r\n    tableSummary,\r\n    servers  : null,\r\n    restaflib: null,\r\n    logonPayload,\r\n    appControl,\r\n\r\n    state: {\r\n      modified   : [],\r\n      pagination : {},\r\n      currentPage: {},\r\n\r\n      data   : {},\r\n      columns: {}\r\n    },\r\n\r\n    id: Date()\r\n  };\r\n  return appEnv;\r\n}\r\n\r\nexport default setup;\r\n"],"names":["async","type","data","rowIndex","appEnv","handlers","appControl","editControl","statusCode","msg","newDataRow","status","updateTableRows","result","source","store","session","table","byvars","columns","state","length","t","k","custom","forEach","w","payload","where","casUpdateData","items","toJS","disposition","severity","reason","iupdateCasTable","src","libref","name","set","comma","value2String","andBit","asrc","split","code","console","log","job","apiCall","links","jobState","qs","newState","timeout","iupdateComputeTable","value","valueString","JSON","stringify","toString","cellEdit","autoSave","f","svalue","Type","parseFloat","isNaN","text2Float","r","commonHandler","cachePolicy","schema","rows","customColumns","row","rowObj","i","s","Column","toLowerCase","Label","c","makeRowObject","t1","statusi","newRows","push","eColumns","_extends","fetchTableRows","control","from","next","casFetchRows","modified","pagination","currentPage","icasRows","tableSummary","tname","start","limit","count","format","icomputeRows","scrollTable","direction","fetchResults","initialFetch","icasScroll","computeFetchData","prepFormData","icomputeScroll","setup","logonPayload","preamble","initStore","authType","casSetup","servers","restaflib","id","Date","icasSetup","computeContext","computeSetupTables","icomputeSetup"],"mappings":"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"}