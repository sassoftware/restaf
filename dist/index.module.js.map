{"version":3,"file":"index.module.js","sources":["../src/commonHandler.js","../src/updateTableRows.js","../src/cellEdit.js","../src/text2Float.js","../src/prepFormData.js","../src/scrollTable.js","../src/setup.js","../src/computeTableUnique.js","../src/distinctValues.js","../src/casTableUnique.js","../src/uploadData.js","../src/saveTable.js"],"sourcesContent":["/*\r\n * Copyright © 2022, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @description Run init, main or term handlers\r\n * @async\r\n * @private\r\n * @module commonHandler\r\n * @category restafedit/core\r\n * @param {string} type   - type of exit (init|main|term)\r\n * @param {rowObject} data        - rowObject\r\n * @param {number} rowIndex    - client-side Row Index\r\n * @param {appEnv} appEnv      - app Environment from setup\r\n * @returns {promise}     - [data, status]\r\n * @example\r\n * The function returns the updated data and the status.\r\n * This function is called by cellEdit, so there is probably little reason\r\n * to call this directly\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function commonHandler (type, data, rowIndex, appEnv) {\r\n  const { handlers } = appEnv.appControl.editControl;\r\n  if (handlers[type] == null) {\r\n    return [data, { statusCode: 0, msg: null }];\r\n  } else {\r\n    const [newDataRow, status] = await handlers[type](data, rowIndex, appEnv, type);\r\n    return [newDataRow, status];\r\n  }\r\n};\r\nexport default commonHandler;\r\n","import { casUpdateData } from '@sassoftware/restaflib';\r\n/**\r\n * @description Update the row on the server\r\n * @async\r\n * @private\r\n * @module updateTableRows\r\n * @category restafedit/core\r\n * @param {rowObjectArray|rowObject} data  - data as a rowObject or Array of rowObjects\r\n * @param {appEnv} appEnv   - app Environment object from setup\r\n * @returns {promise}       - {msg: string, statusCode: 0|1|2}\r\n * @example\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function updateTableRows (data, appEnv) {\r\n  let result;\r\n  const byvars = appEnv.appControl.byvars;\r\n  if (byvars === null || byvars.length === 0) {\r\n    return [null, { msg: 'Error: Please specify a by variable', statusCode: 1 }];\r\n  }\r\n\r\n  if (Array.isArray(data) === true) {\r\n    for (let i = 0; i < data.length; i++) {\r\n      result = await _updateData(data[i], appEnv);\r\n    }\r\n  } else {\r\n    result = await _updateData(data, appEnv);\r\n  }\r\n  return result;\r\n}\r\n\r\nfunction makePayload (data, appEnv) {\r\n  const { table, byvars } = appEnv.appControl;\r\n  const columns = appEnv.state.columns;\r\n\r\n  const t = {};\r\n  for (const k in data) {\r\n    if (!(k === '_index_' || k === '_rowIndex') && columns[k].custom === false) {\r\n      t[k] = data[k];\r\n    };\r\n  };\r\n\r\n  const w = {};\r\n  byvars.forEach((k) => {\r\n    w[k] = t[k];\r\n  });\r\n  const payload = {\r\n    table,\r\n    data : t,\r\n    where: w\r\n  };\r\n  return payload;\r\n}\r\n\r\nasync function _updateData (data, appEnv) {\r\n  const { store, session } = appEnv;\r\n  const handler = (appEnv.source === 'cas') ? casUpdateData : _computeUpdateData;\r\n  const payload = makePayload(data, appEnv);\r\n  const status = await handler(store, session, payload);\r\n  return status;\r\n}\r\n// TBD: Move to restaflib\r\n\r\nasync function _computeUpdateData (store, session, payload) {\r\n  const { data, table, where } = payload;\r\n  let src =\r\n    `proc sql; update ${table.libref}.${table.name}`;\r\n  let set = 'SET ';\r\n  let comma = ' ';\r\n  for (const k in data) {\r\n    set = set + comma + k + '=' + value2String(data[k]);\r\n    comma = ', ';\r\n  };\r\n  src = src + ' ' + set;\r\n  let swhere = ' WHERE ';\r\n  let andbit = ' ';\r\n\r\n  for (const k in where) {\r\n    const v = where[k];\r\n    swhere = swhere + andbit + k + `= ${value2String(v)} `;\r\n    andbit = ' AND ';\r\n  }\r\n  src = src + ' ' + swhere + ';run;';\r\n  const asrc = src.split(/\\r?\\n/);\r\n\r\n  // TBD: switch to computeRun on next pass\r\n  const p = {\r\n    data: { code: asrc }\r\n  };\r\n  const job = await store.apiCall(session.links('execute'), p);\r\n  const qs = {\r\n    qs: {\r\n      newState: 'Completed',\r\n      timeout : 1\r\n    }\r\n  };\r\n  const status = await store.jobState(job, qs);\r\n  const c = (status.data === 'completed' ? 0 : 1);\r\n\r\n  return { statusCode: c, msg: status.data };\r\n}\r\n\r\nfunction value2String (value) {\r\n  let valueString;\r\n  if (value == null) {\r\n    valueString = '.';\r\n  } else if (typeof value === 'string') {\r\n    valueString = JSON.stringify(value);\r\n  } else {\r\n    valueString = value.toString();\r\n  }\r\n  return valueString;\r\n}\r\nexport default updateTableRows;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport text2Float from './text2Float';\r\nimport commonHandler from './commonHandler';\r\nimport updateTableRows from './updateTableRows';\r\n\r\n/**\r\n * @description Process edit of a cell and optionally save the data\r\n * @async\r\n * @module cellEdit\r\n * @category restafedit/core\r\n * @param {string} name     - name of the field (lower case)\r\n * @param {*} value         - the new value for name field\r\n * @param {number} rowIndex - row Index ( index in the data array on client)\r\n * @param {rowObject} currentData  - RowObject for the entire row prior to change\r\n * @param {appEnv} appEnv   - app Environment from setup\r\n * @returns {promise}       - {data: updated data, status: status }\r\n * @example\r\n * data schema {column1: value, column2, value,...}\r\n * status schema {statusCode: 0|1|2, msg: some string}\r\n * The currentData object is also updated with the latest values.\r\n *\r\n * const r = await cellEdit'x1',100, 1, d, appEnv)\r\n    - If the column has an handler it will be called.\r\n    - If 'main\" handler is specified, it will be called.\r\n    - If autoSave is true\r\n      - The 'term' handler(if specified) will be called\r\n      - The data for that row will be persisted to the server\r\n */\r\nasync function cellEdit (name, value, rowIndex, currentData, appEnv) {\r\n  /* do not modify the data directly. caller will probably do a setState */\r\n\r\n  let newDataRow = { ...currentData };\r\n  const columns = appEnv.state.columns;\r\n  const { handlers, autoSave } = appEnv.appControl.editControl;\r\n  const iautoSave = (autoSave == null) ? true : autoSave;\r\n  const cachePolicy = (appEnv.appControl.cachePolicy == null) ? true : appEnv.appControl.cachePolicy;\r\n\r\n  newDataRow[name] = text2Float(value, columns[name]);\r\n  let status = { statusCode: 0, msg: '' };\r\n\r\n  if (handlers[name] != null) {\r\n    const r = await handlers[name](newDataRow, name, rowIndex, appEnv);\r\n    newDataRow = r[0];\r\n    status = r[1];\r\n    if (status.statusCode === 2) {\r\n      return { data: r[0], status };\r\n    }\r\n  }\r\n  let r = await commonHandler('main', newDataRow, rowIndex, appEnv);\r\n  if (iautoSave === true) {\r\n    r = await commonHandler('term', r[0], rowIndex, appEnv);\r\n    status = r[1];\r\n    if (status.statusCode === 2) {\r\n      return { data: r[0], status };\r\n    }\r\n    status = await updateTableRows(r[0], appEnv);\r\n  }\r\n  newDataRow = r[0];\r\n\r\n  if (cachePolicy === true) {\r\n    appEnv.state.data[currentData._rowIndex] = newDataRow;\r\n  }\r\n\r\n  return ({ data: newDataRow, status });\r\n}\r\nexport default cellEdit;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nfunction text2Float (value, f) {\r\n  let svalue = value;\r\n  const t = f.Type.toLowerCase();\r\n  if (typeof svalue === 'string' && (t === 'decimal' || t === 'number' || t === 'double' || t === 'float')) {\r\n    svalue = parseFloat(value * 1.0);\r\n    if (isNaN(value) === true) {\r\n      value = 0;\r\n    }\r\n  }\r\n  return svalue;\r\n}\r\nexport default text2Float;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/*\r\n* output\r\n* extended columns and data ready for use in dataform and table\r\n*/\r\nimport commonHandler from './commonHandler';\r\n/**\r\n * @description reduce fetch results\r\n * @private\r\n * @async\r\n * @module prepFormData\r\n * @param {object} result - result from casFetchRow(rows and schema)\r\n * @param {object} appEnv - app Environment from setup\r\n * @returns {promise}     - {columns: eColumns, rowsObject: newRows}\r\n */\r\nasync function prepFormData (result, appEnv) {\r\n  const { schema, rows } = result;\r\n  const customColumns = appEnv.appControl.customColumns;\r\n  let status = { statusCode: 0, msg: 'Initialization was successful' };\r\n\r\n  const makeRowObject = (columns, row, rown) => {\r\n    const rowObj = { _rowIndex: rown };\r\n    row.forEach((r, i) => {\r\n      const s = columns[i];\r\n      const name = s.Column.toLowerCase();\r\n      rowObj[name] = r;\r\n    });\r\n\r\n    if (customColumns != null) {\r\n      for (const k in customColumns) {\r\n        const c = customColumns[k];\r\n        const name = c.Column.toLowerCase();\r\n        rowObj[name] = c.value;\r\n      }\r\n    }\r\n    return rowObj;\r\n  };\r\n\r\n  const newRows = [];\r\n  for (let i = 0; i < rows.length; i++) {\r\n    const t = makeRowObject(schema, rows[i], i);\r\n\r\n    const [t1, statusi] = await commonHandler('init', t, i, appEnv);\r\n    status = statusi;\r\n    newRows.push(t1);\r\n  };\r\n\r\n  // extend column and make it an object\r\n  const eColumns = {};\r\n  schema.forEach((s, i) => {\r\n    const name = s.Column.toLowerCase();\r\n    s.name = name;\r\n    s.Label = (s.Label == null || s.Label.length === 0) ? s.Column : s.Label;\r\n    if (s.Type == null) {\r\n      s.Type = (s.type == null) ? 'double' : s.type;\r\n    }\r\n    s.custom = false;\r\n    eColumns[name] = s;\r\n  });\r\n\r\n  // add computed columns to the array.\r\n  if (customColumns != null) {\r\n    for (const k in customColumns) {\r\n      const c = { ...customColumns[k] };\r\n      c.name = k;\r\n      c.custom = true;\r\n      eColumns[k] = c;\r\n    }\r\n  }\r\n\r\n  return {\r\n    columns: eColumns,\r\n    data   : newRows,\r\n    status\r\n  };\r\n}\r\nexport default prepFormData;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { computeFetchData, casFetchRows } from '@sassoftware/restaflib';\r\nimport prepFormData from './prepFormData';\r\n/**\r\n * @description Simplify scrolling using next|prev|top\r\n * @async\r\n * @module scrollTable\r\n * @category restafedit/core\r\n * @param {string} direction direction(next|prev|first)\r\n * @param {appEnv} appEnv\r\n * @param {object=} payload  override pogination with custom scrolling\r\n * @returns {promise}  result ready for display or null if it did not scroll\r\n * @example\r\n *  let r = await scrollTable('next', appEnv);\r\n *    r=== { data:data, columns: ecolumns}\r\n *\r\n *  if ( r === null) {\r\n *     handle when no data was retrieved\r\n *  } else {\r\n *     handle new data\r\n * }\r\n *\r\n * init handler(if specified) will be executed for each row.\r\n *\r\n * Make sure you handle exceptions that are thrown.The library does not handle those and\r\n * assumes some higher level code will have a catch\r\n *\r\n * For custom scrolling, pass the scrolling information in the optional third parameter.\r\n * The content of the payload depends on whether the source is cas or compute.\r\n * For compute see the documentation for rowset in compute service.<https://developer.sas.com/apis/rest/Compute/#get-a-row-set-from-a-data-set>\r\n * CAS payload is not as rich the rowset for compute service\r\n * At this time the cas is handled thru custom casl code.\r\n * Future: use rowset from data management API.\r\n * The payload for CAS is as follows\r\n *  { qs: {\r\n *       start: <number>\r\n *       limit: <number>\r\n *       format: true|false,\r\n *       where: <where string>\r\n * };\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function scrollTable (direction, appEnv, payload) {\r\n  let fetchResults;\r\n  if (appEnv.source === 'cas') {\r\n    fetchResults = await icasScroll(direction, appEnv, payload);\r\n  } else {\r\n    fetchResults = await icomputeScroll(direction, appEnv, payload);\r\n  }\r\n  return fetchResults;\r\n}\r\n\r\nasync function icasScroll (direction, appEnv, payload) {\r\n  const { store, session } = appEnv;\r\n  const { initialFetch, table } = appEnv.appControl;\r\n  const cachePolicy = (appEnv.appControl.cachePolicy == null) ? true : appEnv.appControl.cachePolicy;\r\n  let control;\r\n\r\n  if (payload != null) {\r\n    control = { ...payload };\r\n  } else {\r\n    if (direction === 'first') {\r\n      control = { ...initialFetch };\r\n    } else if (direction !== null) {\r\n      control = { ...appEnv.state.pagination[direction] };\r\n      if (control.next === -1 || control.from <= 0) {\r\n        return null;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Need to do this until we change resaflib..\r\n\r\n  let c = {};\r\n  if (control.qs != null) {\r\n    c = { ...control.qs };\r\n    c.from = c.start + 1;\r\n    c.count = c.limit;\r\n  } else {\r\n    c = { ...control };\r\n  }\r\n  if (c.from <= 0 || c.next === -1) {\r\n    return null;\r\n  }\r\n  if (c.where == null) {\r\n    c.where = ' ';\r\n  }\r\n\r\n  c.table = table;\r\n  const r = await casFetchRows(store, session, c);\r\n\r\n  let t = null;\r\n  if (r !== null) {\r\n    t = await prepFormData(r.data, appEnv);\r\n    appEnv.state = {\r\n      modified   : [],\r\n      pagination : { ...r.pagination },\r\n      currentPage: control,\r\n      data       : [],\r\n      columns    : []\r\n    };\r\n    if (cachePolicy === true) {\r\n      appEnv.state.data = t.data;\r\n      appEnv.state.columns = t.columns;\r\n    }\r\n    t.pagination = { ...r.pagination };\r\n    return t;\r\n  }\r\n}\r\n\r\nasync function icomputeScroll (direction, appEnv, payload) {\r\n  const { store, tableSummary } = appEnv;\r\n  const { table, initialFetch } = appEnv.appControl;\r\n  const cachePolicy = (appEnv.appControl.cachePolicy == null) ? true : appEnv.appControl.cachePolicy;\r\n  let control = null;\r\n\r\n  const tname = `${table.libref}.${table.name}`.toLowerCase();\r\n\r\n  if (payload == null) {\r\n    if (direction === 'first') {\r\n      control = { ...initialFetch };\r\n    }\r\n  } else {\r\n    control = { ...payload };\r\n  }\r\n\r\n  // eslint-disable-next-line prefer-const\r\n\r\n  const data = await computeFetchData(store, tableSummary, tname, direction, control);\r\n\r\n  let result = null;\r\n  if (data !== null) {\r\n    result = await prepFormData(data, appEnv);\r\n    appEnv.state = {\r\n      modified   : [],\r\n      pagination : {},\r\n      currentPage: {},\r\n      data       : [],\r\n      columns    : []\r\n    };\r\n    if (cachePolicy === true) {\r\n      appEnv.state.data = result.data;\r\n      appEnv.state.columns = result.columns;\r\n    }\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nexport default scrollTable;\r\n","/* eslint-disable prefer-const */\r\n\r\nimport { initStore } from '@sassoftware/restaf';\r\nimport { casSetup, computeSetup, computeSetupTables, caslRun } from '@sassoftware/restaflib';\r\n// import deepcopy from 'deepcopy';\r\n\r\n/**\r\n * @description Setup an Edit session\r\n * @async\r\n * @module setup\r\n * @category restafedit/core\r\n * @param {logonPayload} logonPayload  -information for connecting to Viya\r\n * @param {appControl} appControl       control information\r\n * @returns {promise}  returns appEnv to control the flow\r\n * @alias module: setup\r\n * @example\r\n *  const appEnv = await setup(logonPayload, appControl);\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n *\r\n */\r\n\r\nasync function setup (logonPayload, appControl) {\r\n  const store = initStore();\r\n  let appEnv;\r\n  if (logonPayload.authType == null) {\r\n    logonPayload.authType = 'code';\r\n  }\r\n  if (appControl.source === 'cas') {\r\n    appEnv = await icasSetup(store, logonPayload, appControl);\r\n  } else {\r\n    appEnv = await icomputeSetup(store, logonPayload, appControl);\r\n  }\r\n  return appEnv;\r\n}\r\n\r\nasync function icasSetup (store, logonPayload, appControl) {\r\n  const r = await casSetup(store, logonPayload);\r\n  let appEnv = {\r\n    source: appControl.source,\r\n\r\n    store,\r\n    session  : r.session,\r\n    servers  : r.servers,\r\n    restaflib: null,\r\n\r\n    logonPayload,\r\n    appControl,\r\n\r\n    state: {\r\n      modified   : [],\r\n      pagination : {},\r\n      currentPage: {},\r\n\r\n      data   : {},\r\n      columns: {}\r\n    },\r\n\r\n    id: Date()\r\n  };\r\n  if (appControl.preamble != null) {\r\n    const rx = await caslRun(store, r.session, appControl.preamble);\r\n    if (rx.disposition.statusCode !== 0) {\r\n      console.log(JSON.stringify(rx, null, 4));\r\n      // eslint-disable-next-line no-throw-literal\r\n      throw 'Preamble failed. Please see console';\r\n    };\r\n  }\r\n  return appEnv;\r\n};\r\n\r\nasync function icomputeSetup (store, logonPayload, appControl) {\r\n  // eslint-disable-next-line prefer-const\r\n  ;\r\n  let session = await computeSetup(store, appControl.computeContext, logonPayload);\r\n  let tableSummary = await computeSetupTables(store, session, appControl.table, appControl.preamble);\r\n  let appEnv = {\r\n    source: appControl.source,\r\n\r\n    store,\r\n    session,\r\n    tableSummary,\r\n\r\n    servers  : null,\r\n    restaflib: null,\r\n\r\n    logonPayload,\r\n    appControl,\r\n\r\n    state: {\r\n      modified   : [],\r\n      pagination : {},\r\n      currentPage: {},\r\n\r\n      data   : {},\r\n      columns: {}\r\n    },\r\n\r\n    id: Date()\r\n  };\r\n  return appEnv;\r\n}\r\n\r\nexport default setup;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { computeRun, computeFetchData } from '@sassoftware/restaflib';\r\n/**\r\n * @description Get unique values for a specific column(sas table)\r\n * @async\r\n * @private\r\n * @module sasTableUnique\r\n * @category restafedit/core\r\n * @param {string} columnName    column name\r\n * @param {appEnv} appEnv   app Environment from setup\r\n * @returns {promise}       {an array of unique values }\r\n * @example\r\n *  let selectList = await casTableUnique('company, appEnv))\r\n *  This is useful to get a list of unique values for selected columns.\r\n *  {columnName:[ array of unquew values] }\r\n */\r\n\r\nasync function computeTableUnique (table, columnName, appEnv) {\r\n  const { store, session } = appEnv;\r\n  const t = `${table.libref}.${table.name}`;\r\n\r\n  const code = `\r\n    PROC SQL;\r\n    CREATE TABLE WORK.QUERY\r\n    AS\r\n    SELECT distinct(${columnName}) as utype FROM ${t};\r\n   QUIT;`;\r\n\r\n  const computeSummary = await computeRun(store, session, code);\r\n  const values = {};\r\n  let dir = 'first';\r\n  const res = [];\r\n  let data;\r\n  do {\r\n    data = await computeFetchData(store, computeSummary, 'QUERY', dir);\r\n    const r = data.rows.map(r1 => r1[0]);\r\n    res.push(...r);\r\n    dir = 'next';\r\n  } while (data.scrollOptions.indexOf('next') >= 0);\r\n\r\n  values[columnName] = res;\r\n  return values;\r\n};\r\nexport default computeTableUnique;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport casTableUnique from './casTableUnique';\r\nimport computeTableUnique from './computeTableUnique';\r\n\r\n/**\r\n * @description Get unique values for a specific column\r\n * @async\r\n * @module distinctValues\r\n * @category restafedit/core\r\n * @param {string} columnName    column name\r\n * @param {appEnv} appEnv   - app Environment from setup\r\n * @param {casTable|computeTable=} table Optionally point to a different table\r\n * @returns {promise}       - {an array of unique values }\r\n * @example\r\n *  let selectList = await distinctValues('company', appEnv))\r\n *  This is useful to get a list of unique values for selected columns.\r\n *  {company:['IBM', 'Microsoft', 'SAS'] }\r\n */\r\n\r\nasync function distinctValues (columnName, appEnv, table) {\r\n  let data;\r\n  const t = (table != null) ? table : appEnv.appControl.table;\r\n  if (appEnv.source === 'cas') {\r\n    data = await casTableUnique(t, columnName, appEnv);\r\n  } else {\r\n    data = await computeTableUnique(t, columnName, appEnv);\r\n  }\r\n  return data;\r\n};\r\nexport default distinctValues;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nimport { caslRun } from '@sassoftware/restaflib';\r\n\r\n/**\r\n * @description Get unique values for a specific column\r\n * @async\r\n * @private\r\n * @module casTableUnique\r\n * @category restafedit/core\r\n * @param {object} table object\r\n * @param {string} columnName    column name\r\n * @param {appEnv} appEnv   app Environment from setup\r\n * @returns {promise}       {an array of unique values }\r\n * @example\r\n *  let selectList = await casTableUnique('company, appEnv))\r\n *  This is useful to get a list of unique values for selected columns.\r\n *  {columnName:[ array of unque values] }\r\n */\r\n\r\nasync function casTableUnique (table, columnName, appEnv) {\r\n  const { store, session } = appEnv;\r\n\r\n  const src = `\r\n  results = selectionLists(_args_.column,_args_.table.caslib, _args_.table.name);\r\n  send_response({casResults = {data=results}});\r\n  `\r\n  ;\r\n  const args = {\r\n    table,\r\n    column: columnName\r\n  };\r\n\r\n  const result = await caslRun(store, session, src, args, true);\r\n  if (result.results.casResults.data.statusCode !== 0) {\r\n    // eslint-disable-next-line no-throw-literal\r\n    throw 'Failed to create unique list';\r\n  }\r\n\r\n  const data = result.results.casResults.data.data;\r\n\r\n  return data;\r\n};\r\nexport default casTableUnique;\r\n","/* eslint-disable no-tabs */\r\n/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { casUpload, casAppendTable, computeRun } from '@sassoftware/restaflib';\r\n\r\n/**\r\n * @description Upload client data to a new table on client\r\n * @async\r\n * @module uploadData\r\n * @category restafedit/core\r\n * @param {object} output table\r\n * @param {array}  data if null, data from appEnv.state will be uploded.\r\n * @param {array}  drop fields to drop from the output\r\n * @param {object} addon columns additional columns(useful for adding key fields)\r\n * @param {appEnv} appEnv   - app Environment from setup\r\n * @returns {promise}       - {an array of unique values }\r\n * @example\r\n *  await uploadData(outputTable, data, drop, {},appEnv)\r\n *  This is useful to get a list of unique values for selected columns.\r\n *  {company:['IBM', 'Microsoft', 'SAS'] }\r\n */\r\n\r\nasync function uploadData (table, data, drop, addon, appEnv, masterTable, saveFlag) {\r\n  const { store, session } = appEnv;\r\n  // eslint-disable-next-line prefer-const\r\n  if (data === null) {\r\n    data = appEnv.state.data;\r\n  };\r\n  const t = Object.keys(data[0]);\r\n  let dropArray = ['_index_', '_rowIndex'];\r\n  if (drop !== null) {\r\n    dropArray = dropArray.concat(drop);\r\n  }\r\n  const columns = t.filter(c => {\r\n    return !(dropArray.indexOf(c) >= 0);\r\n  });\r\n  const tempCols = {};\r\n  columns.forEach(k => {\r\n    tempCols[k] = appEnv.state.columns[k];\r\n  });\r\n\r\n  let csvArray = null;\r\n  if (appEnv.source === 'cas') {\r\n    csvArray = columns.join(',') + '\\n';\r\n  };\r\n\r\n  for (let i = 0; i < data.length; i++) {\r\n    let temp = data[i];\r\n    temp = { ...temp, ...addon };\r\n    const valArray = [];\r\n    columns.forEach((c, l) => {\r\n      let v = temp[c];\r\n      if (typeof v === 'string') {\r\n        v = v.trim();\r\n      }\r\n      valArray[l] = v;\r\n    });\r\n    if (csvArray === null) {\r\n      csvArray = valArray.join(',') + '\\n';\r\n    } else {\r\n      csvArray = csvArray + valArray.join(',') + '\\n';\r\n    }\r\n  }\r\n  let result;\r\n  if (appEnv.source === 'cas') {\r\n    result = await _casTableUpload(\r\n      store,\r\n      session,\r\n      table,\r\n      csvArray,\r\n      masterTable,\r\n      saveFlag\r\n    );\r\n  } else {\r\n    result = await _computeUpload(\r\n      store,\r\n      session,\r\n      tempCols,\r\n      table,\r\n      csvArray\r\n    );\r\n  }\r\n  return result;\r\n}\r\n\r\n// TBD: switch to a datastep with arrays for each column. More reliable\r\nasync function _computeUpload (store, session, columns, table, csvArray) {\r\n  let src = `data ${table.libref}.${table.name}; INFILE datalines delimiter=',' ;\\n`;\r\n  let l = '';\r\n  let inx = 'INPUT ';\r\n  for (const k in columns) {\r\n    const c = columns[k];\r\n    inx = inx + c.Column + ' ';\r\n    if (c.Type === 'CHAR') {\r\n      const x = ` ${c.Column} $ ${c.length} \\n`;\r\n      l = l + ' ' + x;\r\n    }\r\n  }\r\n  if (l.length > 0) {\r\n    l = 'LENGTH ' + l + ';\\n';\r\n  };\r\n  inx = inx + ';\\n';\r\n\r\n  src = src + ';\\n' + l + inx + 'datalines;\\n' + csvArray + '\\n; run; proc print;run;\\n';\r\n  await computeRun(store, session, src);\r\n  return { msg: 'done', statusCode: 0 };\r\n}\r\nasync function _casTableUpload (store, session, table, csvArray, masterTable, saveFlag) {\r\n  const t = `${table.caslib}.${table.name}`;\r\n  let r = await casUpload(store, session, null, t, true, csvArray);\r\n  if (masterTable != null) {\r\n    r = await casAppendTable(store, session, table, masterTable, saveFlag);\r\n    return r;\r\n  } else {\r\n    return r;\r\n  }\r\n}\r\nexport default uploadData;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @description Save the current table to disk\r\n * @async\r\n * @module saveTable\r\n * @category restafedit/core\r\n * @param {appEnv} appEnv\r\n * @param {object=} table - save the table to disk\r\n * @returns {promise}  Status object\r\n * @example\r\n * Saves the current cas table and leaves the inmemory table intact.\r\n * If you want to save some other inmemory table pass the optional second parameter\r\n * This is a noop for SAS Tables\r\n **/\r\n\r\nimport { casSaveTable } from '@sassoftware/restaflib';\r\n\r\nasync function saveTable (appEnv, table) {\r\n  const { store, session } = appEnv;\r\n\r\n  if (appEnv.source === 'compute') {\r\n    return { msg: 'Action does not apply to SAS 9 tables', statusCode: 0 };\r\n  }\r\n  const t = (table != null) ? table : appEnv.appControl.table;\r\n  await casSaveTable(store, session, t);\r\n  return { msg: 'Table saved', statusCode: 0 };\r\n}\r\nexport default saveTable;\r\n"],"names":["commonHandler","type","data","rowIndex","appEnv","appControl","editControl","handlers","Promise","resolve","statusCode","msg","_ref","e","reject","_settle","pact","state","value","s","_Pact","o","bind","v","then","observer","_computeUpdateData","store","session","payload","table","where","src","libref","name","set","comma","k","value2String","swhere","andbit","_k","p","code","split","apiCall","links","job","jobState","qs","newState","timeout","status","prototype","onFulfilled","onRejected","result","this","callback","_this","handler","source","casUpdateData","_appEnv$appControl","byvars","columns","t","custom","w","forEach","makePayload","updateTableRows","length","_temp3","Array","isArray","_updateData","_updateData3","array","body","i","_temp4","_updateData2","_cycle","thenable","JSON","stringify","toString","cellEdit","currentData","_exit3","_temp5","_result","newDataRow","r","cachePolicy","_rowIndex","iautoSave","_commonHandler","_exit2","_updateTableRows","_temp","_temp2","_extends","_appEnv$appControl$ed","autoSave","f","svalue","Type","toLowerCase","parseFloat","isNaN","text2Float","_temp6","prepFormData","eColumns","schema","Column","Label","customColumns","c","newRows","rows","row","rown","rowObj","makeRowObject","push","statusi","scrollTable","direction","fetchResults","control","_appEnv$appControl2","initialFetch","pagination","next","from","start","count","limit","casFetchRows","_prepFormData2","modified","currentPage","icasScroll","_icasScroll","icomputeScroll","tableSummary","tname","computeFetchData","_prepFormData","logonPayload","initStore","authType","casSetup","servers","restaflib","id","Date","preamble","caslRun","rx","disposition","console","log","icasSetup","icomputeSetup","computeSetup","computeContext","computeSetupTables","_icomputeSetup","distinctValues","columnName","column","results","casResults","casTableUnique","_casTableUnique","computeTableUnique","computeRun","computeSummary","values","res","test","awaitBody","_isSettledPact","shouldContinue","_resumeAfterBody","_resumeAfterTest","dir","_computeFetchData","map","r1","apply","scrollOptions","indexOf","_computeTableUnique","drop","addon","masterTable","saveFlag","Object","keys","dropArray","concat","filter","tempCols","csvArray","join","temp","valArray","l","trim","_loop","_casTableUpload","casUpload","caslib","casAppendTable","_casAppendTable","_casTableUpload2","_computeUpload","inx","saveTable","casSaveTable"],"mappings":"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"}