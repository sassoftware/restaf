import{casUpdateData as t,casFetchRows as a,computeFetchData as n,casSetup as o,computeSetup as e,computeSetupTables as s}from"@sassoftware/restaflib";import{initStore as l}from"@sassoftware/restaf";function r(){return r=Object.assign?Object.assign.bind():function(t){for(var a=1;a<arguments.length;a++){var n=arguments[a];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o])}return t},r.apply(this,arguments)}async function i(t,a,n,o){const{handlers:e}=o.appControl.editControl;if(null==e[t])return[a,{statusCode:0,msg:null}];{const[s,l]=await e[t](a,n,o,t);return[s,l]}}async function c(a,n){let o;return o="cas"===n.source?await async function(a,n){const{store:o,session:e}=n,{table:s,byvars:l}=n.appControl.dataControl,r=n.state.columns,i={};if(null===l||0===l.length)return null;for(const t in a)"_index_"!==t&&!1===r[t].custom&&(i[t]=a[t]);const c={};l.forEach(t=>{c[t]=i[t]});const u={table:s,data:i,where:c};return await t(o,e,u)}(a,n):await async function(t,a){const{store:n,session:o}=a,{table:e,byvars:s}=a.appControl.dataControl;if(null===s||0===s.length)return null;let l=`proc sql; update ${e.libref}.${e.name};`,r="set ",i=" ";for(const a in t)r=r+i+a+"="+u(t[a]),i=", ";let c="where  ",f=" ";s.forEach(a=>{c=c+f+a+"="+u(t[a]),f="AND "}),l=l+" "+c+";run;";const d=l.split(/\r?\n/);console.log(d);const p={data:{code:d}},m=await n.apiCall(o.links("execute"),p),C=await n.jobState(m,{qs:{newState:"Completed",timeout:1}});return console.log(C.data),!0}(a,n),o}function u(t){let a;return a=null==t?".":"string"==typeof t?JSON.stringify(t):t.toString(),a}async function f(t,a,n,o,e){let s=r({},null!==o?o:e.state.data[n]);const l=e.state.columns,{handlers:u,autoSave:f}=e.appControl.editControl;s[t]=function(t,a){let n=t;return"string"!=typeof n||"decimal"!==a.Type&&"number"!==a.Type&&"double"!==a.Type||(n=parseFloat(1*t),!0===isNaN(t)&&(t=0)),n}(a,l[t]);let d={statusCode:0,msg:""};if(null!=u[t]){const a=await u[t](s,t,n,e);if(s=a[0],d=a[1],2===d.statusCode)return{data:a[0],status:d}}let p=await i("main",s,n,e);if(!0===f){if(p=await i("term",p[0],n,e),d=p[1],2===d.statusCode)return{data:p[0],status:d};await c(s,e)}return s=p[0],d.msg=d.msg+" / "+p[1],!0===e.appControl.dataControl.cachePolicy&&(e.state.data[n]=s),{data:s,status:d}}async function d(t,a){const{schema:n,rows:o}=t,e=a.appControl.dataControl.customColumns,s=(t,a)=>{const n={};if(a.forEach((a,o)=>{const e=t[o],s=e.Column.toLowerCase();null==e.Label&&(e.Label=e.Column),n[s]=a}),null!=e)for(const t in e){const a=e[t],o=a.Column.toLowerCase();n[o]=a.value}return n},l=[];for(let t=0;t<o.length;t++){const e=s(n,o[t]),[r,c]=await i("init",e,t,a);0!==c.code&&console.log(JSON.stringify(c,null,4)),l.push(r)}const c={};if(n.forEach((t,a)=>{const n=t.Column.toLowerCase();t.name=n,t.Label=null==t.Label||0===t.Label.length?t.Column:t.Label,t.custom=!1,c[n]=t}),null!=e)for(const t in e){const a=r({},e[t]);a.name=t,a.custom=!0,c[t]=a}return{columns:c,data:l}}async function p(t,n){const{store:o,session:e}=n,s=r({},t);if(null==s.table&&(s.table=n.appControl.dataControl.table),null==s.where&&(s.where={}),s.from<=0||-1===s.next)return null;const l=await a(o,e,s),i=await d(l.data,n);return n.state={modified:[],pagination:r({},l.pagination),currentPage:s,data:[],columns:[]},!0===n.appControl.dataControl.cachePolicy&&(n.state.data=i.data,n.state.columns=i.columns),i.pagination=r({},l.pagination),i}async function m(t,a){let o;return o="cas"===a.source?await async function(t,a){const{initialFetch:n,table:o}=a.appControl.dataControl;let e;if("first"===t)e=r({},n),e.table=o;else if(e=a.state.pagination[t],-1===e.next)return null;return await p(e,a)}(t,a):await async function(t,a){const{store:o,tableSummary:e}=a,{table:s}=a.appControl.dataControl,l=`${s.libref}.${s.name}`.toLowerCase(),r={limit:a.appControl.dataControl.initialFetch.count},i=await n(o,e,l,t,r);console.log(i);const c=await d(i,a);return a.state={modified:[],pagination:{},currentPage:{},data:c.data,columns:c.columns},c}(t,a),o}async function C(t,a){const n=l();let r;null==t.authType&&(t.authType="code");const i=a.dataControl;if("cas"===i.source){const a=await o(n,t);r={source:i.source,store:n,session:a.session,servers:a.servers,restaflib:null,logonPayload:t,state:{modified:[],pagination:{},currentPage:{},data:{},columns:{}}}}else{const a=await e(n,null,t);r={store:n,session:a,tableSummary:await s(n,a,i.table),servers:null,restaflib:null,logonPayload:t,state:{modified:[],pagination:{},currentPage:{},data:{},columns:{}}}}return r.appControl=a,r.id=Date(),r}export{f as cellEdit,i as commonHandler,p as fetchTableRows,m as scrollTable,C as setup,c as updateTableRows};
//# sourceMappingURL=index.modern.mjs.map
