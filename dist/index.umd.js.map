{"version":3,"file":"index.umd.js","sources":["../src/commonHandler.js","../src/updateTableRows.js","../src/prepFormData.js","../src/fetchTableRows.js","../src/cellEdit.js","../src/text2Float.js","../src/scrollTable.js","../src/setup.js"],"sourcesContent":["/*\r\n * Copyright © 2022, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @description Run init, main or term handlers\r\n * @async\r\n * @module commonHandler\r\n * @category restafedit/core\r\n * @param {string} type   - type of exit (init|main|term)\r\n * @param {rowObject} data        - rowObject\r\n * @param {number} rowIndex    - client-side Row Index\r\n * @param {appEnv} appEnv      - app Environment from setup\r\n * @returns {promise}     - [data, status]\r\n * @example\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function commonHandler (type, data, rowIndex, appEnv) {\r\n  const { handlers } = appEnv.appControl.editControl;\r\n  if (handlers[type] == null) {\r\n    return [data, { statusCode: 0, msg: null }];\r\n  } else {\r\n    const [newDataRow, status] = await handlers[type](data, rowIndex, appEnv, type);\r\n    return [newDataRow, status];\r\n  }\r\n};\r\nexport default commonHandler;\r\n","import { casUpdateData } from '@sassoftware/restaflib';\r\n/**\r\n * @description Update the row on the server\r\n * @async\r\n * @module updateTableRows\r\n * @category restafedit/core\r\n * @param {rowObject} data  - data as a rowObject\r\n * @param {appEnv} appEnv   - app Environment object from setup\r\n * @returns {promise}       - key is completion code\r\n * @example\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function updateTableRows (data, appEnv) {\r\n  let result;\r\n  if (appEnv.source === 'cas') {\r\n    result = await iupdateCasTable(data, appEnv);\r\n  } else {\r\n    result = await iupdateComputeTable(data, appEnv);\r\n  }\r\n  return result;\r\n}\r\n\r\nasync function iupdateCasTable (data, appEnv) {\r\n  const { store, session } = appEnv;\r\n  const { table, byvars } = appEnv.appControl;\r\n  const columns = appEnv.state.columns;\r\n\r\n  if (byvars === null || byvars.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  const t = {};\r\n  for (const k in data) {\r\n    if (k !== '_index_' && columns[k].custom === false) {\r\n      t[k] = data[k];\r\n    };\r\n  };\r\n\r\n  const w = {};\r\n  byvars.forEach((k) => {\r\n    w[k] = t[k];\r\n  });\r\n  const payload = {\r\n    table,\r\n    data : t,\r\n    where: w\r\n  };\r\n\r\n  await casUpdateData(store, session, payload);\r\n  return { statusCode: 0, msg: 'Save successful' };\r\n}\r\n\r\nasync function iupdateComputeTable (data, appEnv) {\r\n  const { store, session } = appEnv;\r\n  const { table, byvars } = appEnv.appControl;\r\n  const columns = appEnv.state.columns;\r\n  ;\r\n\r\n  if (byvars === null || byvars.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  let src =\r\n    `proc sql; update ${table.libref}.${table.name}`;\r\n  let set = 'SET ';\r\n  let comma = ' ';\r\n  for (const k in data) {\r\n    if (columns[k].custom === false) {\r\n      set = set + comma + k + '=' + value2String(data[k]);\r\n    }\r\n    comma = ', ';\r\n  };\r\n  src = src + ' ' + set;\r\n  let w = ' WHERE ';\r\n  let andBit = ' ';\r\n\r\n  byvars.forEach((k) => {\r\n    w = w + andBit + k + '=' + value2String(data[k]);\r\n    andBit = 'AND ';\r\n  });\r\n  src = src + ' ' + w + ';run;';\r\n  const asrc = src.split(/\\r?\\n/);\r\n\r\n  const payload = {\r\n    data: { code: asrc }\r\n  };\r\n\r\n  const job = await store.apiCall(session.links('execute'), payload);\r\n  const qs = {\r\n    qs: {\r\n      newState: 'Completed',\r\n      timeout : 1\r\n    }\r\n  };\r\n\r\n  // eslint-disable-next-line no-unused-vars\r\n  const status = await store.jobState(job, qs);\r\n  const c = (status.data === 'completed' ? 0 : 1);\r\n  ;\r\n  return { statusCode: c, msg: status.data };\r\n}\r\n\r\nfunction value2String (value) {\r\n  let valueString;\r\n  if (value == null) {\r\n    valueString = '.';\r\n  } else if (typeof value === 'string') {\r\n    valueString = JSON.stringify(value);\r\n  } else {\r\n    valueString = value.toString();\r\n  }\r\n  return valueString;\r\n}\r\n\r\nexport default updateTableRows;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/*\r\n* output\r\n* extended columns and data ready for use in dataform and table\r\n*/\r\nimport commonHandler from './commonHandler';\r\n/**\r\n * @description reduce fetch results\r\n * @private\r\n * @async\r\n * @module prepFormData\r\n * @param {object} result - result from casFetchRow(rows and schema)\r\n * @param {object} appEnv - app Environment from setup\r\n * @returns {promise}     - {columns: eColumns, rowsObject: newRows}\r\n */\r\nasync function prepFormData (result, appEnv) {\r\n  const { schema, rows } = result;\r\n  const customColumns = appEnv.appControl.customColumns;\r\n\r\n  const makeRowObject = (columns, row) => {\r\n    const rowObj = {};\r\n    row.forEach((r, i) => {\r\n      const s = columns[i];\r\n      const name = s.Column.toLowerCase();\r\n      if (s.Label == null) {\r\n        s.Label = s.Column;\r\n      }\r\n      rowObj[name] = r;\r\n    });\r\n\r\n    if (customColumns != null) {\r\n      for (const k in customColumns) {\r\n        const c = customColumns[k];\r\n        const name = c.Column.toLowerCase();\r\n        rowObj[name] = c.value;\r\n      }\r\n    }\r\n    return rowObj;\r\n  };\r\n\r\n  const newRows = [];\r\n  for (let i = 0; i < rows.length; i++) {\r\n    const t = makeRowObject(schema, rows[i]);\r\n\r\n    const [t1, status] = await commonHandler('init', t, i, appEnv);\r\n\r\n    if (status.code !== 0) {\r\n      console.log(JSON.stringify(status, null, 4));\r\n    }\r\n    newRows.push(t1);\r\n  };\r\n\r\n  // extend column and make it an object\r\n  const eColumns = {};\r\n  schema.forEach((s, i) => {\r\n    const name = s.Column.toLowerCase();\r\n    s.name = name;\r\n    s.Label = (s.Label == null || s.Label.length === 0) ? s.Column : s.Label;\r\n    s.custom = false;\r\n    eColumns[name] = s;\r\n  });\r\n\r\n  // add computed columns to the array.\r\n  if (customColumns != null) {\r\n    for (const k in customColumns) {\r\n      const c = { ...customColumns[k] };\r\n      c.name = k;\r\n      c.custom = true;\r\n      eColumns[k] = c;\r\n    }\r\n  }\r\n\r\n  return {\r\n    columns: eColumns,\r\n    data   : newRows\r\n  };\r\n}\r\nexport default prepFormData;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { casFetchRows, computeFetchData } from '@sassoftware/restaflib';\r\n\r\nimport prepFormData from './prepFormData';\r\n/**\r\n * @description Fetch new records based on control argument\r\n * @async\r\n * @module fetchTableRows\r\n * @category restafedit/core\r\n * @param {fetchControl} control - info for records to retrieve\r\n * @param {appEnv} appEnv - appEnv\r\n * @returns {promise}  - { data:data, columns:ecolumns, pagination: pagination}\r\n * @example\r\n *   let control = {from: 10, count:50, format: false};\r\n *   let r = await fetchTableRows(control, appEnv);\r\n *   r is a fetchResult object\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function fetchTableRows (control, appEnv) {\r\n  let result = null;\r\n  if (appEnv.source === 'cas') {\r\n    result = await icasRows(control, appEnv);\r\n  } else {\r\n    result = await icomputeRows(control, appEnv);\r\n  }\r\n  return result;\r\n}\r\n\r\nasync function icasRows (control, appEnv) {\r\n  const { store, session } = appEnv;\r\n  const c = { ...control };\r\n  if (c.table == null) {\r\n    c.table = appEnv.appControl.table;\r\n  }\r\n  if (c.where == null) {\r\n    c.where = {};\r\n  }\r\n  if (c.from <= 0 || c.next === -1) {\r\n    return null;\r\n  }\r\n  const r = await casFetchRows(store, session, c);\r\n  let t = null;\r\n  if (r !== null) {\r\n    t = await prepFormData(r.data, appEnv);\r\n\r\n    appEnv.state = {\r\n      modified   : [],\r\n      pagination : { ...r.pagination },\r\n      currentPage: c,\r\n      data       : [],\r\n      columns    : []\r\n    };\r\n    if (appEnv.appControl.cachePolicy === true) {\r\n      appEnv.state.data = t.data;\r\n      appEnv.state.columns = t.columns;\r\n    }\r\n    t.pagination = { ...r.pagination };\r\n  }\r\n  return t;\r\n}\r\n\r\nasync function icomputeRows (control, appEnv) {\r\n  const { store, tableSummary } = appEnv;\r\n  const { table } = appEnv.appControl;\r\n  const tname = `${table.libref}.${table.name}`.toLowerCase();\r\n  // eslint-disable-next-line prefer-const\r\n  let payload = {\r\n    qs: {\r\n      start : control.from - 1,\r\n      limit : control.count,\r\n      format: (control.format != null) ? false : control.format\r\n    }\r\n  };\r\n  const data = await computeFetchData(store, tableSummary, tname, null, payload);\r\n  ;\r\n\r\n  let result = null;\r\n  if (data !== null) {\r\n    result = await prepFormData(data, appEnv);\r\n    appEnv.state = {\r\n      modified   : [],\r\n      pagination : {},\r\n      currentPage: {},\r\n      data       : result.data,\r\n      columns    : result.columns\r\n    };\r\n  }\r\n  return result;\r\n}\r\nexport default fetchTableRows;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport text2Float from './text2Float';\r\nimport commonHandler from './commonHandler';\r\nimport updateTableRows from './updateTableRows';\r\n\r\n/**\r\n * @description Process edit of a cell and optionally save the data\r\n * @async\r\n * @module cellEdit\r\n * @category restafedit/core\r\n * @param {string} name     - name of the field (lower case)\r\n * @param {*} value         - the new value for name field\r\n * @param {number} rowIndex - row Index ( index in the data array on client)\r\n * @param {rowObject} data  - RowObject for the entire row prior to change\r\n * @param {appEnv} appEnv   - app Environment from setup\r\n * @returns {promise}       - {data: updated data, status: status }\r\n * @example\r\n * data schema {column1: value, column2, value,...}\r\n * status schema {statusCode: 0|1|2, msg: some string}\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function cellEdit (name, value, rowIndex, data, appEnv) {\r\n  /* do not modify the data directly. caller will probably do a setState */\r\n  let newDataRow = (data !== null) ? { ...data } : { ...appEnv.state.data[rowIndex] };\r\n  const columns = appEnv.state.columns;\r\n  const { handlers, autoSave } = appEnv.appControl.editControl;\r\n\r\n  newDataRow[name] = text2Float(value, columns[name]);\r\n  let status = { statusCode: 0, msg: '' };\r\n\r\n  if (handlers[name] != null) {\r\n    const r = await handlers[name](newDataRow, name, rowIndex, appEnv);\r\n    newDataRow = r[0];\r\n    status = r[1];\r\n    if (status.statusCode === 2) {\r\n      return { data: r[0], status };\r\n    }\r\n  }\r\n  let r = await commonHandler('main', newDataRow, rowIndex, appEnv);\r\n  if (autoSave === true) {\r\n    r = await commonHandler('term', r[0], rowIndex, appEnv);\r\n    status = r[1];\r\n    if (status.statusCode === 2) {\r\n      return { data: r[0], status };\r\n    }\r\n\r\n    await updateTableRows(newDataRow, appEnv);\r\n  }\r\n  newDataRow = r[0];\r\n  status.msg = status.msg + ' / ' + r[1];\r\n\r\n  if (appEnv.appControl.cachePolicy === true) {\r\n    appEnv.state.data[rowIndex] = newDataRow;\r\n  }\r\n\r\n  return ({ data: newDataRow, status });\r\n}\r\nexport default cellEdit;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nfunction text2Float (value, f) {\r\n  let svalue = value;\r\n  if (typeof svalue === 'string' && (f.Type === 'decimal' || f.Type === 'number' || f.Type === 'double')) {\r\n    svalue = parseFloat(value * 1.0);\r\n    if (isNaN(value) === true) {\r\n      value = 0;\r\n    }\r\n  }\r\n  return svalue;\r\n}\r\nexport default text2Float;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport fetchTableRows from './fetchTableRows';\r\nimport { computeFetchData } from '@sassoftware/restaflib';\r\nimport prepFormData from './prepFormData';\r\n/**\r\n * @description Simplify scrolling using next|prev|top\r\n * @async\r\n * @module scrollTable\r\n * @category restafedit/core\r\n * @param {string} direction direction(next|prev|first)\r\n * @param {appEnv} appEnv\r\n * @returns {promise}  result ready for display or null if it did not scroll\r\n * @example\r\n *  let r = await scrollTable('next', appEnv);\r\n *\r\n *  if ( r === null) {\r\n *     handle when no data was writtten\r\n *  } else {\r\n *     handle new data\r\n * }\r\n *\r\n * Make sure you handle exceptions that are thrown.\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function scrollTable (direction, appEnv) {\r\n  let fetchResults;\r\n  if (appEnv.source === 'cas') {\r\n    fetchResults = await icasScroll(direction, appEnv);\r\n  } else {\r\n    fetchResults = await icomputeScroll(direction, appEnv);\r\n  }\r\n  return fetchResults;\r\n}\r\n\r\nasync function icasScroll (direction, appEnv) {\r\n  const { initialFetch, table } = appEnv.appControl;\r\n  let control;\r\n  if (direction === 'first') {\r\n    control = { ...initialFetch };\r\n    control.table = table;\r\n  } else {\r\n    control = appEnv.state.pagination[direction];\r\n    if (control.next === -1) {\r\n      return null;\r\n    }\r\n  }\r\n  const t = await fetchTableRows(control, appEnv);\r\n  return t;\r\n}\r\n\r\nasync function icomputeScroll (direction, appEnv) {\r\n  const { store, tableSummary } = appEnv;\r\n  const { table } = appEnv.appControl;\r\n\r\n  const tname = `${table.libref}.${table.name}`.toLowerCase();\r\n\r\n  // eslint-disable-next-line prefer-const\r\n\r\n  const payload = { qs: { limit: appEnv.appControl.initialFetch.count } };\r\n  const data = await computeFetchData(store, tableSummary, tname, direction, payload);\r\n\r\n  let result = null;\r\n  if (data !== null) {\r\n    result = await prepFormData(data, appEnv);\r\n    appEnv.state = {\r\n      modified   : [],\r\n      pagination : {},\r\n      currentPage: {},\r\n      data       : result.data,\r\n      columns    : result.columns\r\n    };\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nexport default scrollTable;\r\n","/* eslint-disable prefer-const */\r\n\r\nimport { initStore } from '@sassoftware/restaf';\r\nimport { casSetup, computeSetup, computeSetupTables } from '@sassoftware/restaflib';\r\n\r\n/**\r\n * @description Setup an Edit session\r\n * @async\r\n * @module setup\r\n * @category restafedit/core\r\n * @param {logonPayload} logonPayload  - information for connecting to Viya\r\n * @param {appControl} appControl      - control information\r\n *\r\n * @returns {promise}  returns appEnv to control the flow\r\n * @alias module: setup\r\n * @example\r\n *  const appEnv = await setup(logonPayload, appControl);\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n *\r\n */\r\n\r\nasync function setup (logonPayload, appControl, preamble) {\r\n  const store = initStore();\r\n  let appEnv;\r\n  if (logonPayload.authType == null) {\r\n    logonPayload.authType = 'code';\r\n  }\r\n  if (appControl.source === 'cas') {\r\n    appEnv = await icasSetup(store, logonPayload, appControl);\r\n  } else {\r\n    appEnv = await icomputeSetup(store, logonPayload, appControl, preamble);\r\n  }\r\n  return appEnv;\r\n}\r\n\r\nasync function icasSetup (store, logonPayload, appControl) {\r\n  const r = await casSetup(store, logonPayload);\r\n  let appEnv = {\r\n    source: appControl.source,\r\n\r\n    store,\r\n    session  : r.session,\r\n    servers  : r.servers,\r\n    restaflib: null,\r\n    logonPayload,\r\n    appControl,\r\n\r\n    state: {\r\n      modified   : [],\r\n      pagination : {},\r\n      currentPage: {},\r\n\r\n      data   : {},\r\n      columns: {}\r\n    },\r\n\r\n    id: Date()\r\n  };\r\n  return appEnv;\r\n};\r\n\r\nasync function icomputeSetup (store, logonPayload, appControl, preamble) {\r\n  // eslint-disable-next-line prefer-const\r\n  ;\r\n  let session = await computeSetup(store, appControl.computeContext, logonPayload);\r\n  let tableSummary = await computeSetupTables(store, session, appControl.table, preamble);\r\n  let appEnv = {\r\n    source: appControl.source,\r\n\r\n    store,\r\n    session,\r\n    tableSummary,\r\n    servers  : null,\r\n    restaflib: null,\r\n    logonPayload,\r\n    appControl,\r\n\r\n    state: {\r\n      modified   : [],\r\n      pagination : {},\r\n      currentPage: {},\r\n\r\n      data   : {},\r\n      columns: {}\r\n    },\r\n\r\n    id: Date()\r\n  };\r\n  return appEnv;\r\n}\r\n\r\nexport default setup;\r\n"],"names":["commonHandler","type","data","rowIndex","appEnv","appControl","editControl","handlers","Promise","resolve","statusCode","msg","_ref","e","reject","updateTableRows","result","source","iupdateCasTable","store","session","_appEnv$appControl2","table","byvars","columns","state","length","t","k","custom","w","forEach","casUpdateData","where","then","_iupdateCasTable","iupdateComputeTable","_appEnv$appControl","src","libref","name","set","comma","value2String","andBit","payload","code","split","apiCall","links","job","jobState","qs","newState","timeout","status","_iupdateComputeTable","_temp2","value","JSON","stringify","toString","_settle","pact","s","_Pact","o","bind","v","observer","_temp3","eColumns","schema","i","Column","toLowerCase","Label","customColumns","c","newRows","rows","array","body","row","r","rowObj","makeRowObject","t1","console","log","push","thenable","_cycle","_temp4","prototype","onFulfilled","onRejected","this","callback","_this","control","from","next","casFetchRows","prepFormData","_prepFormData2","modified","pagination","currentPage","cachePolicy","icasRows","_icasRows","tableSummary","tname","computeFetchData","start","limit","count","format","_prepFormData","icomputeRows","_icomputeRows","cellEdit","_exit3","newDataRow","_exit2","_result2","autoSave","_commonHandler","_temp","_extends","_appEnv$appControl$ed","f","svalue","Type","parseFloat","isNaN","text2Float","_temp6","_temp5","direction","icasScroll","initialFetch","fetchTableRows","scrollTable","_icasScroll","fetchResults","icomputeScroll","logonPayload","preamble","initStore","authType","icasSetup","casSetup","servers","restaflib","id","Date","icomputeSetup","computeSetup","computeContext","computeSetupTables"],"mappings":"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"}