{"version":3,"file":"index.js","sources":["../src/commonHandler.js","../src/updateTableRows.js","../src/prepFormData.js","../src/fetchTableRows.js","../src/cellEdit.js","../src/text2Float.js","../src/scrollTable.js","../src/setup.js"],"sourcesContent":["/*\r\n * Copyright © 2022, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @description Run init, main or term handlers\r\n * @async\r\n * @module commonHandler\r\n * @category restafedit/core\r\n * @param {string} type   - type of exit (init|main|term)\r\n * @param {rowObject} data        - rowObject\r\n * @param {number} rowIndex    - client-side Row Index\r\n * @param {appEnv} appEnv      - app Environment from setup\r\n * @returns {promise}     - [data, status]\r\n * @example\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function commonHandler (type, data, rowIndex, appEnv){\r\n   const {handlers} = appEnv.appControl.editControl;\r\n    if (handlers[type] == null) {\r\n      \r\n       return [data, { status: 0, msg: null}];\r\n    }\r\n    else {\r\n      \r\n      let [newDataRow, status] = await handlers[type](data, rowIndex, appEnv, type);\r\n      return [newDataRow, status];\r\n    }\r\n  };\r\n  export default commonHandler;","\r\nimport { casUpdateData } from '@sassoftware/restaflib';\r\n/**\r\n * @description Update the row on the server\r\n * @async\r\n * @module updateTableRows\r\n * @category restafedit/core\r\n * @param {rowObject} data  - data as a rowObject\r\n * @param {appEnv} appEnv   - app Environment object from setup   \r\n * @returns {promise}       - key is completion code\r\n * @example\r\n * \r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function updateTableRows (data, appEnv) {\r\n    const { store, session } = appEnv;\r\n    const {table, byvars} = appEnv.appControl.dataControl;\r\n    const columns = appEnv.state.columns;\r\n    \r\n    if (byvars === null || byvars.length === 0) {\r\n        return;\r\n    }\r\n    const t = {};\r\n    for (const k in data) {\r\n        if (k !== '_index_' && columns[k].custom === false) {\r\n            t[k] = data[k];\r\n        };\r\n    };\r\n\r\n    let w = {};\r\n    byvars.forEach((k) => {\r\n        w[k] = t[k];\r\n    });\r\n    const payload = {\r\n        table : table,\r\n        data  : t,\r\n        where : w\r\n    };\r\n    \r\n    return await casUpdateData(store, session, payload);\r\n}\r\n\r\nexport default updateTableRows;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n\r\n/* \r\n* output\r\n* extended columns and data ready for use in dataform and table\r\n*/\r\nimport commonHandler from './commonHandler';\r\n/**\r\n * @description reduce fetch results\r\n * @private\r\n * @async\r\n * @module prepFormData\r\n * @param {object} result - result from casFetchRow(rows and schema)\r\n * @param {object} appEnv - app Environment from setup\r\n * @returns {promise}     - {columns: eColumns, rowsObject: newRows}\r\n */\r\nasync function prepFormData (result, appEnv) {\r\n  const {schema, rows} =  result;\r\n  const customColumns = appEnv.appControl.dataControl.customColumns;\r\n  \r\n  const makeRowObject = (columns, row) => {\r\n    let rowObj = {};\r\n    row.forEach((r, i) => {\r\n      let s = columns[i];\r\n      let name = s.Column.toLowerCase();\r\n      if (s.Label == null) {\r\n        s.Label = s.Column;\r\n      }\r\n      rowObj[name] = r;\r\n    });\r\n\r\n    if (customColumns != null) {\r\n      for (let k in customColumns) {\r\n        let c = customColumns[k];\r\n        let name = c.Column.toLowerCase();\r\n        rowObj[name] = c.value;\r\n      }\r\n    }\r\n    return rowObj;\r\n  };\r\n\r\n\r\n  let newRows = [];\r\n  for (let i=0; i < rows.length; i++) {\r\n     let t = makeRowObject(schema, rows[i]);\r\n     \r\n     let [t1,status] = await commonHandler('init', t, i, appEnv);\r\n     \r\n     if (status.code !== 0) {\r\n       console.log(JSON.stringify(status, null,4));\r\n     }\r\n     newRows.push(t1);\r\n    };\r\n  \r\n  //extend column and make it an object\r\n  let eColumns = {};\r\n  schema.forEach((s,i) => {\r\n      let name = s.Column.toLowerCase();\r\n      s.name    = name;\r\n      s.Label   = (s.Label == null || s.Label.length === 0) ? s.Column : s.Label;\r\n      s.custom  = false;\r\n      eColumns[name] = s;\r\n    });\r\n\r\n  // add computed columns to the array.\r\n  if (customColumns != null) {\r\n    for (let k in customColumns) {\r\n      let c = { ...customColumns[k] };\r\n      c.name = k;\r\n      c.custom = true;\r\n      eColumns[k] = c;\r\n    }\r\n  }\r\n\r\n  \r\n  return {\r\n    columns: eColumns,\r\n    data   : newRows\r\n  };\r\n\r\n}\r\nexport default prepFormData;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport {casFetchRows} from '@sassoftware/restaflib';\r\nimport prepFormData from \"./prepFormData\";\r\n/**\r\n * @description Fetch new records based on control argument\r\n * @async\r\n * @module fetchTableRows\r\n * @category restafedit/core\r\n * @param {fetchControl} control - info for records to retrieve\r\n * @param {appEnv} appEnv - appEnv\r\n * @returns {promise}  - { data:data, columns:ecolumns, pagination: pagination} \r\n * @example\r\n *   let control = {from: 10, count:50, format: false};\r\n *   let r = await fetchTableRows(control, appEnv);\r\n *   r is a fetchResult object\r\n * \r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function fetchTableRows (control, appEnv) {\r\n    let {store, session} = appEnv;\r\n    // eslint-disable-next-line no-useless-catch\r\n    let c   = {...control};\r\n    if (c.table == null) {\r\n        c.table = appEnv.appControl.dataControl.table;\r\n    }\r\n    if (c.where == null) {\r\n        c.where = {};\r\n    }\r\n    if (c.from <= 0 || c.next === -1) {\r\n        return null;\r\n    }\r\n    let r = await casFetchRows(store, session, c);\r\n    let t = await prepFormData(r.data, appEnv);\r\n    \r\n    appEnv.state = {\r\n        modified  : [],\r\n        pagination: {...r.pagination},\r\n        currentPage: c,\r\n        data      : [],\r\n        columns   : []\r\n    };\r\n    \r\n    if (appEnv.appControl.dataControl.cachePolicy === true) {\r\n       appEnv.state.data = t.data;\r\n       appEnv.state.columns = t.columns;\r\n    }\r\n\r\n    t.pagination = {...r.pagination};\r\n    return t;\r\n        \r\n}\r\nexport default fetchTableRows;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport text2Float from \"./text2Float\";\r\nimport commonHandler from './commonHandler';\r\nimport updateTableRows from './updateTableRows';\r\n\r\n/**\r\n * @description Process edit of a cell and optionally save the data\r\n * @async\r\n * @module cellEdit\r\n * @category restafedit/core\r\n * @param {string} name     - name of the field (lower case)\r\n * @param {*} value         - the new value for name field\r\n * @param {number} rowIndex - row Index ( index in the data array on client)\r\n * @param {rowObject} data  - RowObject for the entire row prior to change\r\n * @param {appEnv} appEnv   - app Environment from setup\r\n * @returns {promise}       - {data: updated data, status: status }\r\n * @example\r\n * data schema {column1: value, column2, value,...}\r\n * status schema {status: 0|1|2, msg: some string}\r\n * \r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function cellEdit (name, value, rowIndex, data, appEnv) {\r\n   /* do not modify the data directly. caller will probably do a setState */\r\n    let newDataRow = (data !== null) ? {...data} : {...appEnv.state.data[rowIndex]}\r\n    let columns = appEnv.state.columns;\r\n    const {handlers,autoSave} = appEnv.appControl.editControl;\r\n\r\n    newDataRow[name] = text2Float(value, columns[name]);\r\n    let status = {status: 0, msg: ''};\r\n  \r\n    if (handlers[name] != null) {\r\n        let r = await handlers[name](newDataRow, name, rowIndex, appEnv);\r\n        newDataRow = r[0];\r\n        status = r[1];\r\n    } \r\n    let r = await commonHandler(\"main\", newDataRow, rowIndex, appEnv);\r\n    if (autoSave === true) {\r\n        r = await commonHandler(\"term\",r[0], rowIndex, appEnv);\r\n        await updateTableRows(newDataRow, appEnv);\r\n    }\r\n    newDataRow = r[0]; \r\n    status.msg = status.msg + ' / ' + r[1];\r\n\r\n    if (appEnv.appControl.dataControl.cachePolicy === true) {\r\n        appEnv.state.data[rowIndex] = newDataRow;\r\n    }\r\n\r\n    return ({data: newDataRow, status: status});\r\n    \r\n}\r\nexport default cellEdit;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nfunction text2Float (value, f) {\r\n    let svalue = value;\r\n    if (typeof svalue === 'string' && (f.Type === 'decimal' || f.Type === 'number' || f.Type === 'double')) {\r\n        svalue = parseFloat(value * 1.0);\r\n        if (isNaN(value) === true) {\r\n            value = 0;\r\n        }\r\n    }\r\n    return svalue;\r\n}\r\nexport default text2Float;","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport fetchTableRows from './fetchTableRows';\r\n/**\r\n * @description Simplify scrolling using next|prev|top\r\n * @async\r\n * @module scrollTable\r\n * @category restafedit/core\r\n * @param {string} direction direction(next|prev|first)\r\n * @param {appEnv} appEnv \r\n * @returns {promise}  result ready for display or null if it did not scroll\r\n * @example\r\n *  let r = await scrollTable('next', appEnv);\r\n * \r\n *  if ( r === null) {\r\n *     handle when no data was writtten\r\n *  } else {\r\n *     handle new data\r\n * }\r\n * \r\n * Make sure you handle exceptions that are thrown.\r\n * \r\n * Please see the restafeditExample in the Tutorial pulldown \r\n */\r\nasync function scrollTable (direction,appEnv) {\r\n    const {initialFetch, table} = appEnv.appControl.dataControl;\r\n    \r\n    let control;\r\n    if (direction === 'first') {\r\n        control = {...initialFetch};\r\n        control.table = table;\r\n    } else {\r\n        control = appEnv.state.pagination[direction];\r\n        if (control.next === -1) {\r\n           return null;\r\n        }\r\n    }\r\n    let t = await fetchTableRows(control, appEnv);\r\n    return  t;\r\n        \r\n}\r\nexport default scrollTable;\r\n","\r\nimport { initStore } from '@sassoftware/restaf';\r\nimport { casSetup }   from '@sassoftware/restaflib';\r\n\r\n/**\r\n * @description Setup an Edit session\r\n * @async\r\n * @module setup\r\n * @category restafedit/core\r\n * @param {logonPayload} logonPayload  - information for connecting to Viya\r\n * @param {appControl} appControl      - control information \r\n * \r\n * @returns {promise}  returns appEnv to control the flow \r\n * @alias module: setup\r\n * @example\r\n *  const appEnv = await setup(logonPayload, appControl);\r\n * \r\n * Please see the restafeditExample in the Tutorial pulldown\r\n *  \r\n */\r\n\r\nasync function setup (logonPayload, appControl) {\r\n    let store = initStore();\r\n    if (logonPayload.authType == null) {\r\n        logonPayload.authType = 'code';\r\n    }\r\n    \r\n    let r = await casSetup(store, logonPayload);\r\n    \r\n    let appEnv = {\r\n        store       : store,\r\n        session     : r.session,\r\n        servers     : r.servers,\r\n        restaflib   : null,\r\n        logonPayload: logonPayload,\r\n        state       : {\r\n            modified   : [],\r\n            pagination : {},\r\n            currentPage: {},\r\n            data       : {},\r\n            columns    : {}\r\n        }\r\n    };\r\n    appEnv.appControl = appControl;\r\n    appEnv.id       = Date(); /* just assign a new id - placeholder */\r\n    return appEnv;\r\n}\r\nexport default setup;"],"names":["commonHandler","type","data","rowIndex","appEnv","appControl","editControl","handlers","Promise","resolve","status","msg","_ref","e","reject","updateTableRows","store","session","_appEnv$appControl$da","dataControl","table","byvars","columns","state","length","t","k","custom","w","forEach","casUpdateData","where","_settle","pact","value","s","_Pact","o","bind","v","then","observer","prototype","onFulfilled","onRejected","result","this","callback","_this","fetchTableRows","control","c","from","next","casFetchRows","r","_temp3","eColumns","schema","i","name","Column","toLowerCase","Label","customColumns","newRows","rows","_temp4","array","body","row","rowObj","makeRowObject","t1","code","console","log","JSON","stringify","push","thenable","_cycle","prepFormData","modified","pagination","currentPage","cachePolicy","cellEdit","newDataRow","_temp2","autoSave","_commonHandler","_temp","_extends","_appEnv$appControl$ed","f","svalue","Type","parseFloat","isNaN","text2Float","_temp6","_temp5","direction","initialFetch","setup","logonPayload","initStore","authType","casSetup","servers","restaflib","id","Date"],"mappings":"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"}