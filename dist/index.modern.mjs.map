{"version":3,"file":"index.modern.mjs","sources":["../src/commonHandler.js","../src/updateTableRows.js","../src/cellEdit.js","../src/text2Float.js","../src/fetchTableRows.js","../src/prepFormData.js","../src/scrollTable.js","../src/setup.js"],"sourcesContent":["/*\r\n * Copyright © 2022, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @description Run init, main or term handlers\r\n * @async\r\n * @module commonHandler\r\n * @param {string} type   - type of exit (init|main|term)\r\n * @param {rowObject} data        - rowObject\r\n * @param {number} rowIndex    - client-side Row Index\r\n * @param {appEnv} appEnv      - app Environment from setup\r\n * @returns {promise}     - [data, status]\r\n */\r\nasync function commonHandler (type, data, rowIndex, appEnv){\r\n   const {handlers} = appEnv.appControl.editControl;\r\n    if (handlers[type] == null) {\r\n      \r\n       return [data, { status: 0, msg: null}];\r\n    }\r\n    else {\r\n      \r\n      let [newDataRow, status] = await handlers[type](data, rowIndex, appEnv, type);\r\n      return [newDataRow, status];\r\n    }\r\n  };\r\n  export default commonHandler;","\r\nimport { casUpdateData } from '@sassoftware/restaflib';\r\n/**\r\n * @description Update the row on the server\r\n * @async\r\n * @module updateTableRows\r\n * @param {rowObject} data  - data as a rowObject\r\n * @param {appEnv} appEnv   - app Environment object from setup   \r\n * @returns {promise}       - key is completion code\r\n */\r\nasync function updateTableRows (data, appEnv) {\r\n    const { store, session } = appEnv;\r\n    const {table, byvars} = appEnv.appControl.dataControl;\r\n    const columns = appEnv.state.columns;\r\n    \r\n    if (byvars === null || byvars.length === 0) {\r\n        return;\r\n    }\r\n    const t = {};\r\n    for (const k in data) {\r\n        if (k !== '_index_' && columns[k].custom === false) {\r\n            t[k] = data[k];\r\n        };\r\n    };\r\n\r\n    let w = {};\r\n    byvars.forEach((k) => {\r\n        w[k] = t[k];\r\n    });\r\n    const payload = {\r\n        table : table,\r\n        data  : t,\r\n        where : w\r\n    };\r\n    \r\n    return await casUpdateData(store, session, payload);\r\n}\r\n\r\nexport default updateTableRows;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport text2Float from \"./text2Float\";\r\nimport commonHandler from './commonHandler';\r\nimport updateTableRows from './updateTableRows';\r\n\r\n/**\r\n * @description Process edit of a cell and optionally save the data\r\n * @async\r\n * @module cellEdit\r\n * @param {string} name     - name of the field (lower case)\r\n * @param {*} value         - the new value for name field\r\n * @param {number} rowIndex - row Index ( index in the data array on client)\r\n * @param {rowObject} data  - RowObject for the entire row prior to change\r\n * @param {appEnv} appEnv   - app Environment from setup\r\n * @returns {promise}       - {data: updated data, status: status }\r\n * @examples\r\n * data schema {column1: value, column2, value,...}\r\n * status schema {status: 0|1|2, msg: some string}\r\n */\r\nasync function cellEdit (name, value, rowIndex, data, appEnv) {\r\n   /* do not modify the data directly. caller will probably do a setState */\r\n    let newDataRow = (data !== null) ? {...data} : {...appEnv.state.data[rowIndex]}\r\n    let columns = appEnv.state.columns;\r\n    const {handlers,autoSave} = appEnv.appControl.editControl;\r\n\r\n    newDataRow[name] = text2Float(value, columns[name]);\r\n    let status = {status: 0, msg: ''};\r\n  \r\n    if (handlers[name] != null) {\r\n        let r = await handlers[name](newDataRow, name, rowIndex, appEnv);\r\n        newDataRow = r[0];\r\n        status = r[1];\r\n    } \r\n    let r = await commonHandler(\"main\", newDataRow, rowIndex, appEnv);\r\n    newDataRow = r[0];\r\n    status.msg = status.msg + ' / ' + r[1];\r\n\r\n    if (appEnv.appControl.dataControl.cachePolicy === true) {\r\n        appEnv.state.data[rowIndex] = newDataRow;\r\n    }\r\n\r\n    if (autoSave === true) {    \r\n        await updateTableRows(newDataRow, appEnv);\r\n    }\r\n\r\n    return ({data: newDataRow, status: status});\r\n    \r\n}\r\nexport default cellEdit;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nfunction text2Float (value, f) {\r\n    let svalue = value;\r\n    if (typeof svalue === 'string' && (f.Type === 'decimal' || f.Type === 'number' || f.Type === 'double')) {\r\n        svalue = parseFloat(value * 1.0);\r\n        if (isNaN(value) === true) {\r\n            value = 0;\r\n        }\r\n    }\r\n    return svalue;\r\n}\r\nexport default text2Float;","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport {casFetchRows} from '@sassoftware/restaflib';\r\nimport prepFormData from \"./prepFormData\";\r\n/**\r\n * @description Fetch new records based on control argument\r\n * @async\r\n * @module fetchTableRows\r\n * @param {fetchControl} control - info for records to retrieve\r\n * @param {appEnv} appEnv - appEnv\r\n * @returns {promise}  - { data:data, columns:ecolumns, pagination: pagination} \r\n * @examples\r\n *   let control = {from: 10, count:50, format: false};\r\n *   let r = await fetchTableRows(control, appEnv);\r\n *   r is a fetchResult object\r\n */\r\nasync function fetchTableRows (control, appEnv) {\r\n    let {store, session} = appEnv;\r\n    // eslint-disable-next-line no-useless-catch\r\n    let c   = {...control};\r\n    if (c.table == null) {\r\n        c.table = appEnv.appControl.dataControl.table;\r\n    }\r\n    if (c.where == null) {\r\n        c.where = {};\r\n    }\r\n    if (c.from <= 0 || c.next === -1) {\r\n        return null;\r\n    }\r\n    let r = await casFetchRows(store, session, c);\r\n    let t = await prepFormData(r.data, appEnv);\r\n    \r\n    appEnv.state = {\r\n        modified  : [],\r\n        pagination: {...r.pagination},\r\n        currentPage: c,\r\n        data      : [],\r\n        columns   : []\r\n    };\r\n    \r\n    if (appEnv.appControl.dataControl.cachePolicy === true) {\r\n       appEnv.state.data = t.data;\r\n       appEnv.state.columns = t.columns;\r\n    }\r\n\r\n    t.pagination = {...r.pagination};\r\n    return t;\r\n        \r\n}\r\nexport default fetchTableRows;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n\r\n/* \r\n* output\r\n* extended columns and data ready for use in dataform and table\r\n*/\r\nimport commonHandler from './commonHandler';\r\n/**\r\n * @description reduce fetch results\r\n * @private\r\n * @async\r\n * @module prepFormData\r\n * @param {object} result - result from casFetchRow(rows and schema)\r\n * @param {object} appEnv - app Environment from setup\r\n * @returns {promise}     - {columns: eColumns, rowsObject: newRows}\r\n */\r\nasync function prepFormData (result, appEnv) {\r\n  const {schema, rows} =  result;\r\n  const customColumns = appEnv.appControl.dataControl.customColumns;\r\n  \r\n  const makeRowObject = (columns, row) => {\r\n    let rowObj = {};\r\n    row.forEach((r, i) => {\r\n      let s = columns[i];\r\n      let name = s.Column.toLowerCase();\r\n      if (s.Label == null) {\r\n        s.Label = s.Column;\r\n      }\r\n      rowObj[name] = r;\r\n    });\r\n\r\n    if (customColumns != null) {\r\n      for (let k in customColumns) {\r\n        let c = customColumns[k];\r\n        let name = c.Column.toLowerCase();\r\n        rowObj[name] = c.value;\r\n      }\r\n    }\r\n    return rowObj;\r\n  };\r\n\r\n\r\n  let newRows = [];\r\n  for (let i=0; i < rows.length; i++) {\r\n     let t = makeRowObject(schema, rows[i]);\r\n     \r\n     let [t1,status] = await commonHandler('init', t, i, appEnv);\r\n     \r\n     if (status.code !== 0) {\r\n       console.log(JSON.stringify(status, null,4));\r\n     }\r\n     newRows.push(t1);\r\n    };\r\n  \r\n  //extend column and make it an object\r\n  let eColumns = {};\r\n  schema.forEach((s,i) => {\r\n      let name = s.Column.toLowerCase();\r\n      s.name    = name;\r\n      s.Label   = (s.Label == null || s.Label.length === 0) ? s.Column : s.Label;\r\n      s.custom  = false;\r\n      eColumns[name] = s;\r\n    });\r\n\r\n  // add computed columns to the array.\r\n  if (customColumns != null) {\r\n    for (let k in customColumns) {\r\n      let c = { ...customColumns[k] };\r\n      c.name = k;\r\n      c.custom = true;\r\n      eColumns[k] = c;\r\n    }\r\n  }\r\n\r\n  \r\n  return {\r\n    columns: eColumns,\r\n    data   : newRows\r\n  };\r\n\r\n}\r\nexport default prepFormData;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport fetchTableRows from './fetchTableRows';\r\n/**\r\n * @description Simplify scrolling using next|prev|top\r\n * @async\r\n * @module scrollTable\r\n * @param {string} direction direction(next|prev|first)\r\n * @param {appEnv} appEnv \r\n * @returns {promise}  result ready for display or null if it did not scroll\r\n * @example\r\n *  let r = await scrollTable('next', appEnv);\r\n * \r\n *  if ( r === null) {\r\n *     handle when no data was writtten\r\n *  } else {\r\n *     handle new data\r\n * }\r\n * \r\n * Make sure you handle exceptions that are thrown. \r\n */\r\nasync function scrollTable (direction,appEnv) {\r\n    const {initialFetch, table} = appEnv.appControl.dataControl;\r\n    \r\n    let control;\r\n    if (direction === 'first') {\r\n        control = {...initialFetch};\r\n        control.table = table;\r\n    } else {\r\n        control = appEnv.state.pagination[direction];\r\n        if (control.next === -1) {\r\n           return null;\r\n        }\r\n    }\r\n    console.log(control);\r\n    let t = await fetchTableRows(control, appEnv);\r\n    return  t;\r\n        \r\n}\r\nexport default scrollTable;\r\n","\r\nimport { initStore } from '@sassoftware/restaf';\r\nimport { casSetup }   from '@sassoftware/restaflib';\r\n\r\n/**\r\n * @description Setup an Edit session\r\n * @async\r\n * @module setup\r\n * @param {logonPayload} logonPayload  - information for connecting to Viya\r\n * @param {appControl} appControl      - control information \r\n * \r\n * @returns {promise}  returns appEnv to control the flow \r\n * @alias module: setup\r\n * @example\r\n *  const appEnv = await setup(logonPayload, appControl);\r\n *  \r\n */\r\n\r\nasync function setup (logonPayload, appControl) {\r\n    let store = initStore();\r\n    if (logonPayload.authType == null) {\r\n        logonPayload.authType = 'code';\r\n    }\r\n    \r\n    let r = await casSetup(store, logonPayload);\r\n    \r\n    let appEnv = {\r\n        store       : store,\r\n        session     : r.session,\r\n        servers     : r.servers,\r\n        restaflib   : null,\r\n        logonPayload: logonPayload,\r\n        state       : {\r\n            modified   : [],\r\n            pagination : {},\r\n            currentPage: {},\r\n            data       : {},\r\n            columns    : {}\r\n        }\r\n    };\r\n    appEnv.appControl = appControl;\r\n    appEnv.id       = Date(); /* just assign a new id - placeholder */\r\n    return appEnv;\r\n}\r\nexport default setup;"],"names":["async","type","data","rowIndex","appEnv","handlers","appControl","editControl","status","msg","newDataRow","updateTableRows","store","session","table","byvars","dataControl","columns","state","length","t","k","custom","w","forEach","payload","where","casUpdateData","cellEdit","name","value","autoSave","f","svalue","Type","parseFloat","isNaN","text2Float","r","commonHandler","cachePolicy","fetchTableRows","control","c","from","next","casFetchRows","result","schema","rows","customColumns","makeRowObject","row","rowObj","i","s","Column","toLowerCase","Label","t1","code","console","log","JSON","stringify","newRows","push","eColumns","_extends","prepFormData","modified","pagination","currentPage","scrollTable","direction","initialFetch","setup","logonPayload","initStore","authType","casSetup","servers","restaflib","id","Date"],"mappings":"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"}