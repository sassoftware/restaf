{"version":3,"file":"index.umd.js","sources":["../src/commonHandler.js","../src/updateTableRows.js","../src/prepFormData.js","../src/fetchTableRows.js","../src/cellEdit.js","../src/text2Float.js","../src/scrollTable.js","../src/setup.js"],"sourcesContent":["/*\r\n * Copyright © 2022, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @description Run init, main or term handlers\r\n * @async\r\n * @module commonHandler\r\n * @category restafedit/core\r\n * @param {string} type   - type of exit (init|main|term)\r\n * @param {rowObject} data        - rowObject\r\n * @param {number} rowIndex    - client-side Row Index\r\n * @param {appEnv} appEnv      - app Environment from setup\r\n * @returns {promise}     - [data, status]\r\n * @example\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function commonHandler (type, data, rowIndex, appEnv) {\r\n  const { handlers } = appEnv.appControl.editControl;\r\n  if (handlers[type] == null) {\r\n    return [data, { statusCode: 0, msg: null }];\r\n  } else {\r\n    const [newDataRow, status] = await handlers[type](data, rowIndex, appEnv, type);\r\n    return [newDataRow, status];\r\n  }\r\n};\r\nexport default commonHandler;\r\n","import { casUpdateData } from '@sassoftware/restaflib';\r\n/**\r\n * @description Update the row on the server\r\n * @async\r\n * @module updateTableRows\r\n * @category restafedit/core\r\n * @param {rowObject} data  - data as a rowObject\r\n * @param {appEnv} appEnv   - app Environment object from setup\r\n * @returns {promise}       - key is completion code\r\n * @example\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function updateTableRows (data, appEnv) {\r\n  let result;\r\n  if (appEnv.source === 'cas') {\r\n    result = await iupdateCasTable(data, appEnv);\r\n  } else {\r\n    result = await iupdateComputeTable(data, appEnv);\r\n  }\r\n  return result;\r\n}\r\n\r\nasync function iupdateCasTable (data, appEnv) {\r\n  const { store, session } = appEnv;\r\n  const { table, byvars } = appEnv.appControl;\r\n  const columns = appEnv.state.columns;\r\n\r\n  if (byvars === null || byvars.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  const t = {};\r\n  for (const k in data) {\r\n    if (k !== '_index_' && columns[k].custom === false) {\r\n      t[k] = data[k];\r\n    };\r\n  };\r\n\r\n  const w = {};\r\n  byvars.forEach((k) => {\r\n    w[k] = t[k];\r\n  });\r\n  const payload = {\r\n    table,\r\n    data : t,\r\n    where: w\r\n  };\r\n\r\n  debugger;\r\n  console.log('updating record');\r\n  const result = await casUpdateData(store, session, payload);\r\n  console.log(result);\r\n  console.log(result.items().toJS());\r\n  debugger;\r\n\r\n  return { statusCode: 0, msg: 'Save successful' };\r\n}\r\n\r\nasync function iupdateComputeTable (data, appEnv) {\r\n  const { store, session } = appEnv;\r\n  const { table, byvars } = appEnv.appControl;\r\n  const columns = appEnv.state.columns;\r\n  ;\r\n\r\n  if (byvars === null || byvars.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  let src =\r\n    `proc sql; update ${table.libref}.${table.name}`;\r\n  let set = 'SET ';\r\n  let comma = ' ';\r\n  for (const k in data) {\r\n    if (columns[k].custom === false) {\r\n      set = set + comma + k + '=' + value2String(data[k]);\r\n    }\r\n    comma = ', ';\r\n  };\r\n  src = src + ' ' + set;\r\n  let w = ' WHERE ';\r\n  let andBit = ' ';\r\n\r\n  byvars.forEach((k) => {\r\n    w = w + andBit + k + '=' + value2String(data[k]);\r\n    andBit = 'AND ';\r\n  });\r\n  src = src + ' ' + w + ';run;';\r\n  const asrc = src.split(/\\r?\\n/);\r\n\r\n  const payload = {\r\n    data: { code: asrc }\r\n  };\r\n\r\n  const job = await store.apiCall(session.links('execute'), payload);\r\n  const qs = {\r\n    qs: {\r\n      newState: 'Completed',\r\n      timeout : 1\r\n    }\r\n  };\r\n\r\n  // eslint-disable-next-line no-unused-vars\r\n  const status = await store.jobState(job, qs);\r\n  const c = (status.data === 'completed' ? 0 : 1);\r\n  ;\r\n  return { statusCode: c, msg: status.data };\r\n}\r\n\r\nfunction value2String (value) {\r\n  let valueString;\r\n  if (value == null) {\r\n    valueString = '.';\r\n  } else if (typeof value === 'string') {\r\n    valueString = JSON.stringify(value);\r\n  } else {\r\n    valueString = value.toString();\r\n  }\r\n  return valueString;\r\n}\r\n\r\nexport default updateTableRows;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/*\r\n* output\r\n* extended columns and data ready for use in dataform and table\r\n*/\r\nimport commonHandler from './commonHandler';\r\n/**\r\n * @description reduce fetch results\r\n * @private\r\n * @async\r\n * @module prepFormData\r\n * @param {object} result - result from casFetchRow(rows and schema)\r\n * @param {object} appEnv - app Environment from setup\r\n * @returns {promise}     - {columns: eColumns, rowsObject: newRows}\r\n */\r\nasync function prepFormData (result, appEnv) {\r\n  const { schema, rows } = result;\r\n  const customColumns = appEnv.appControl.customColumns;\r\n\r\n  const makeRowObject = (columns, row) => {\r\n    const rowObj = {};\r\n    row.forEach((r, i) => {\r\n      const s = columns[i];\r\n      const name = s.Column.toLowerCase();\r\n      if (s.Label == null) {\r\n        s.Label = s.Column;\r\n      }\r\n      rowObj[name] = r;\r\n    });\r\n\r\n    if (customColumns != null) {\r\n      for (const k in customColumns) {\r\n        const c = customColumns[k];\r\n        const name = c.Column.toLowerCase();\r\n        rowObj[name] = c.value;\r\n      }\r\n    }\r\n    return rowObj;\r\n  };\r\n\r\n  const newRows = [];\r\n  for (let i = 0; i < rows.length; i++) {\r\n    const t = makeRowObject(schema, rows[i]);\r\n\r\n    const [t1, status] = await commonHandler('init', t, i, appEnv);\r\n\r\n    if (status.code !== 0) {\r\n      console.log(JSON.stringify(status, null, 4));\r\n    }\r\n    newRows.push(t1);\r\n  };\r\n\r\n  // extend column and make it an object\r\n  const eColumns = {};\r\n  schema.forEach((s, i) => {\r\n    const name = s.Column.toLowerCase();\r\n    s.name = name;\r\n    s.Label = (s.Label == null || s.Label.length === 0) ? s.Column : s.Label;\r\n    s.custom = false;\r\n    eColumns[name] = s;\r\n  });\r\n\r\n  // add computed columns to the array.\r\n  if (customColumns != null) {\r\n    for (const k in customColumns) {\r\n      const c = { ...customColumns[k] };\r\n      c.name = k;\r\n      c.custom = true;\r\n      eColumns[k] = c;\r\n    }\r\n  }\r\n\r\n  return {\r\n    columns: eColumns,\r\n    data   : newRows\r\n  };\r\n}\r\nexport default prepFormData;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { casFetchRows, computeFetchData } from '@sassoftware/restaflib';\r\n\r\nimport prepFormData from './prepFormData';\r\n/**\r\n * @description Fetch new records based on control argument\r\n * @async\r\n * @module fetchTableRows\r\n * @category restafedit/core\r\n * @param {fetchControl} control - info for records to retrieve\r\n * @param {appEnv} appEnv - appEnv\r\n * @returns {promise}  - { data:data, columns:ecolumns, pagination: pagination}\r\n * @example\r\n *   let control = {from: 10, count:50, format: false};\r\n *   let r = await fetchTableRows(control, appEnv);\r\n *   r is a fetchResult object\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function fetchTableRows (control, appEnv) {\r\n  let result = null;\r\n  if (appEnv.source === 'cas') {\r\n    result = await icasRows(control, appEnv);\r\n  } else {\r\n    result = await icomputeRows(control, appEnv);\r\n  }\r\n  return result;\r\n}\r\n\r\nasync function icasRows (control, appEnv) {\r\n  const { store, session } = appEnv;\r\n  const c = { ...control };\r\n  if (c.table == null) {\r\n    c.table = appEnv.appControl.table;\r\n  }\r\n  if (c.where == null) {\r\n    c.where = {};\r\n  }\r\n  if (c.from <= 0 || c.next === -1) {\r\n    return null;\r\n  }\r\n  debugger;\r\n  const r = await casFetchRows(store, session, c);\r\n  debugger;\r\n  let t = null;\r\n  if (r !== null) {\r\n    debugger;\r\n    t = await prepFormData(r.data, appEnv);\r\n\r\n    appEnv.state = {\r\n      modified   : [],\r\n      pagination : { ...r.pagination },\r\n      currentPage: c,\r\n      data       : [],\r\n      columns    : []\r\n    };\r\n    if (appEnv.appControl.cachePolicy === true) {\r\n      appEnv.state.data = t.data;\r\n      appEnv.state.columns = t.columns;\r\n    }\r\n    t.pagination = { ...r.pagination };\r\n  }\r\n  return t;\r\n}\r\n\r\nasync function icomputeRows (control, appEnv) {\r\n  const { store, tableSummary } = appEnv;\r\n  const { table } = appEnv.appControl;\r\n  const tname = `${table.libref}.${table.name}`.toLowerCase();\r\n  // eslint-disable-next-line prefer-const\r\n  let payload = {\r\n    qs: {\r\n      start : control.from - 1,\r\n      limit : control.count,\r\n      format: (control.format != null) ? false : control.format\r\n    }\r\n  };\r\n  const data = await computeFetchData(store, tableSummary, tname, null, payload);\r\n  ;\r\n\r\n  let result = null;\r\n  if (data !== null) {\r\n    result = await prepFormData(data, appEnv);\r\n    appEnv.state = {\r\n      modified   : [],\r\n      pagination : {},\r\n      currentPage: {},\r\n      data       : result.data,\r\n      columns    : result.columns\r\n    };\r\n  }\r\n  return result;\r\n}\r\nexport default fetchTableRows;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport text2Float from './text2Float';\r\nimport commonHandler from './commonHandler';\r\nimport updateTableRows from './updateTableRows';\r\n\r\n/**\r\n * @description Process edit of a cell and optionally save the data\r\n * @async\r\n * @module cellEdit\r\n * @category restafedit/core\r\n * @param {string} name     - name of the field (lower case)\r\n * @param {*} value         - the new value for name field\r\n * @param {number} rowIndex - row Index ( index in the data array on client)\r\n * @param {rowObject} data  - RowObject for the entire row prior to change\r\n * @param {appEnv} appEnv   - app Environment from setup\r\n * @returns {promise}       - {data: updated data, status: status }\r\n * @example\r\n * data schema {column1: value, column2, value,...}\r\n * status schema {statusCode: 0|1|2, msg: some string}\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function cellEdit (name, value, rowIndex, data, appEnv) {\r\n  /* do not modify the data directly. caller will probably do a setState */\r\n  let newDataRow = (data !== null) ? { ...data } : { ...appEnv.state.data[rowIndex] };\r\n  const columns = appEnv.state.columns;\r\n  const { handlers, autoSave } = appEnv.appControl.editControl;\r\n\r\n  newDataRow[name] = text2Float(value, columns[name]);\r\n  let status = { statusCode: 0, msg: '' };\r\n\r\n  if (handlers[name] != null) {\r\n    const r = await handlers[name](newDataRow, name, rowIndex, appEnv);\r\n    newDataRow = r[0];\r\n    status = r[1];\r\n    if (status.statusCode === 2) {\r\n      return { data: r[0], status };\r\n    }\r\n  }\r\n  let r = await commonHandler('main', newDataRow, rowIndex, appEnv);\r\n  if (autoSave === true) {\r\n    r = await commonHandler('term', r[0], rowIndex, appEnv);\r\n    status = r[1];\r\n    if (status.statusCode === 2) {\r\n      return { data: r[0], status };\r\n    }\r\n\r\n    await updateTableRows(r[0], appEnv);\r\n  }\r\n  newDataRow = r[0];\r\n  status.msg = status.msg + ' / ' + r[1];\r\n\r\n  if (appEnv.appControl.cachePolicy === true) {\r\n    appEnv.state.data[rowIndex] = newDataRow;\r\n  }\r\n\r\n  return ({ data: newDataRow, status });\r\n}\r\nexport default cellEdit;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nfunction text2Float (value, f) {\r\n  let svalue = value;\r\n  if (typeof svalue === 'string' && (f.Type === 'decimal' || f.Type === 'number' || f.Type === 'double')) {\r\n    svalue = parseFloat(value * 1.0);\r\n    if (isNaN(value) === true) {\r\n      value = 0;\r\n    }\r\n  }\r\n  return svalue;\r\n}\r\nexport default text2Float;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport fetchTableRows from './fetchTableRows';\r\nimport { computeFetchData } from '@sassoftware/restaflib';\r\nimport prepFormData from './prepFormData';\r\n/**\r\n * @description Simplify scrolling using next|prev|top\r\n * @async\r\n * @module scrollTable\r\n * @category restafedit/core\r\n * @param {string} direction direction(next|prev|first)\r\n * @param {appEnv} appEnv\r\n * @returns {promise}  result ready for display or null if it did not scroll\r\n * @example\r\n *  let r = await scrollTable('next', appEnv);\r\n *\r\n *  if ( r === null) {\r\n *     handle when no data was writtten\r\n *  } else {\r\n *     handle new data\r\n * }\r\n *\r\n * Make sure you handle exceptions that are thrown.\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function scrollTable (direction, appEnv) {\r\n  let fetchResults;\r\n  if (appEnv.source === 'cas') {\r\n    debugger;\r\n    fetchResults = await icasScroll(direction, appEnv);\r\n    debugger;\r\n  } else {\r\n    fetchResults = await icomputeScroll(direction, appEnv);\r\n  }\r\n  return fetchResults;\r\n}\r\n\r\nasync function icasScroll (direction, appEnv) {\r\n  const { initialFetch, table } = appEnv.appControl;\r\n  let control;\r\n  if (direction === 'first') {\r\n    control = { ...initialFetch };\r\n    control.table = table;\r\n  } else {\r\n    control = appEnv.state.pagination[direction];\r\n    if (control.next === -1) {\r\n      return null;\r\n    }\r\n  }\r\n  debugger;\r\n  console.log(control);\r\n  const t = await fetchTableRows(control, appEnv);\r\n  debugger;\r\n  return t;\r\n}\r\n\r\nasync function icomputeScroll (direction, appEnv) {\r\n  const { store, tableSummary } = appEnv;\r\n  const { table } = appEnv.appControl;\r\n\r\n  const tname = `${table.libref}.${table.name}`.toLowerCase();\r\n\r\n  // eslint-disable-next-line prefer-const\r\n\r\n  const payload = { qs: { limit: appEnv.appControl.initialFetch.count } };\r\n  const data = await computeFetchData(store, tableSummary, tname, direction, payload);\r\n\r\n  let result = null;\r\n  if (data !== null) {\r\n    result = await prepFormData(data, appEnv);\r\n    appEnv.state = {\r\n      modified   : [],\r\n      pagination : {},\r\n      currentPage: {},\r\n      data       : result.data,\r\n      columns    : result.columns\r\n    };\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nexport default scrollTable;\r\n","/* eslint-disable prefer-const */\r\n\r\nimport { initStore } from '@sassoftware/restaf';\r\nimport { casSetup, computeSetup, computeSetupTables } from '@sassoftware/restaflib';\r\n\r\n/**\r\n * @description Setup an Edit session\r\n * @async\r\n * @module setup\r\n * @category restafedit/core\r\n * @param {logonPayload} logonPayload  - information for connecting to Viya\r\n * @param {appControl} appControl      - control information\r\n *\r\n * @returns {promise}  returns appEnv to control the flow\r\n * @alias module: setup\r\n * @example\r\n *  const appEnv = await setup(logonPayload, appControl);\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n *\r\n */\r\n\r\nasync function setup (logonPayload, appControl, preamble) {\r\n  const store = initStore();\r\n  let appEnv;\r\n  if (logonPayload.authType == null) {\r\n    logonPayload.authType = 'code';\r\n  }\r\n  if (appControl.source === 'cas') {\r\n    appEnv = await icasSetup(store, logonPayload, appControl);\r\n  } else {\r\n    appEnv = await icomputeSetup(store, logonPayload, appControl, preamble);\r\n  }\r\n  return appEnv;\r\n}\r\n\r\nasync function icasSetup (store, logonPayload, appControl) {\r\n  const r = await casSetup(store, logonPayload);\r\n  let appEnv = {\r\n    source: appControl.source,\r\n\r\n    store,\r\n    session  : r.session,\r\n    servers  : r.servers,\r\n    restaflib: null,\r\n    logonPayload,\r\n    appControl,\r\n\r\n    state: {\r\n      modified   : [],\r\n      pagination : {},\r\n      currentPage: {},\r\n\r\n      data   : {},\r\n      columns: {}\r\n    },\r\n\r\n    id: Date()\r\n  };\r\n  return appEnv;\r\n};\r\n\r\nasync function icomputeSetup (store, logonPayload, appControl, preamble) {\r\n  // eslint-disable-next-line prefer-const\r\n  ;\r\n  let session = await computeSetup(store, appControl.computeContext, logonPayload);\r\n  let tableSummary = await computeSetupTables(store, session, appControl.table, preamble);\r\n  let appEnv = {\r\n    source: appControl.source,\r\n\r\n    store,\r\n    session,\r\n    tableSummary,\r\n    servers  : null,\r\n    restaflib: null,\r\n    logonPayload,\r\n    appControl,\r\n\r\n    state: {\r\n      modified   : [],\r\n      pagination : {},\r\n      currentPage: {},\r\n\r\n      data   : {},\r\n      columns: {}\r\n    },\r\n\r\n    id: Date()\r\n  };\r\n  return appEnv;\r\n}\r\n\r\nexport default setup;\r\n"],"names":["commonHandler","type","data","rowIndex","appEnv","appControl","editControl","handlers","Promise","resolve","statusCode","msg","_ref","e","reject","result","_temp2","source","iupdateCasTable","store","session","_appEnv$appControl2","table","byvars","columns","state","length","t","k","custom","w","forEach","payload","where","console","log","casUpdateData","items","toJS","_iupdateCasTable","iupdateComputeTable","_appEnv$appControl","src","libref","name","set","comma","value2String","andBit","code","split","apiCall","links","then","job","jobState","qs","newState","timeout","status","_iupdateComputeTable","value","JSON","stringify","toString","_settle","pact","s","_Pact","o","bind","v","observer","_temp3","eColumns","schema","i","Column","toLowerCase","Label","customColumns","c","newRows","rows","array","body","row","r","rowObj","makeRowObject","t1","push","thenable","_cycle","_temp4","prototype","onFulfilled","onRejected","this","callback","_this","control","icasRows","from","next","casFetchRows","prepFormData","_prepFormData2","modified","pagination","currentPage","cachePolicy","_icasRows","tableSummary","tname","computeFetchData","start","limit","count","format","icomputeRows","_icomputeRows","cellEdit","_exit3","newDataRow","_exit2","_result2","autoSave","_commonHandler","updateTableRows","_temp","_extends","_appEnv$appControl$ed","f","svalue","Type","parseFloat","isNaN","text2Float","_temp6","_temp5","direction","fetchResults","initialFetch","fetchTableRows","icasScroll","_icasScroll","icomputeScroll","_prepFormData","_icomputeScroll","logonPayload","preamble","initStore","authType","icasSetup","casSetup","servers","restaflib","id","Date","icomputeSetup","computeSetup","computeContext","computeSetupTables"],"mappings":"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"}