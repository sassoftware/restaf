{"version":3,"file":"index.modern.mjs","sources":["../src/commonHandler.js","../src/updateTableRows.js","../src/cellEdit.js","../src/text2Float.js","../src/fetchTableRows.js","../src/prepFormData.js","../src/scrollTable.js","../src/setup.js"],"sourcesContent":["/*\r\n * Copyright © 2022, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @description Run init, main or term handlers\r\n * @async\r\n * @module commonHandler\r\n * @category restafedit/core\r\n * @param {string} type   - type of exit (init|main|term)\r\n * @param {rowObject} data        - rowObject\r\n * @param {number} rowIndex    - client-side Row Index\r\n * @param {appEnv} appEnv      - app Environment from setup\r\n * @returns {promise}     - [data, status]\r\n * @example\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function commonHandler (type, data, rowIndex, appEnv) {\r\n  const { handlers } = appEnv.appControl.editControl;\r\n  if (handlers[type] == null) {\r\n    return [data, { statusCode: 0, msg: null }];\r\n  } else {\r\n    const [newDataRow, status] = await handlers[type](data, rowIndex, appEnv, type);\r\n    return [newDataRow, status];\r\n  }\r\n};\r\nexport default commonHandler;\r\n","\r\nimport { casUpdateData } from '@sassoftware/restaflib';\r\n/**\r\n * @description Update the row on the server\r\n * @async\r\n * @module updateTableRows\r\n * @category restafedit/core\r\n * @param {rowObject} data  - data as a rowObject\r\n * @param {appEnv} appEnv   - app Environment object from setup\r\n * @returns {promise}       - key is completion code\r\n * @example\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function updateTableRows (data, appEnv) {\r\n  const { store, session } = appEnv;\r\n  const { table, byvars } = appEnv.appControl.dataControl;\r\n  const columns = appEnv.state.columns;\r\n\r\n  if (byvars === null || byvars.length === 0) {\r\n    return;\r\n  }\r\n  const t = {};\r\n  for (const k in data) {\r\n    if (k !== '_index_' && columns[k].custom === false) {\r\n      t[k] = data[k];\r\n    };\r\n  };\r\n\r\n  const w = {};\r\n  byvars.forEach((k) => {\r\n    w[k] = t[k];\r\n  });\r\n  const payload = {\r\n    table,\r\n    data : t,\r\n    where: w\r\n  };\r\n\r\n  return await casUpdateData(store, session, payload);\r\n}\r\n\r\nexport default updateTableRows;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport text2Float from './text2Float';\r\nimport commonHandler from './commonHandler';\r\nimport updateTableRows from './updateTableRows';\r\n\r\n/**\r\n * @description Process edit of a cell and optionally save the data\r\n * @async\r\n * @module cellEdit\r\n * @category restafedit/core\r\n * @param {string} name     - name of the field (lower case)\r\n * @param {*} value         - the new value for name field\r\n * @param {number} rowIndex - row Index ( index in the data array on client)\r\n * @param {rowObject} data  - RowObject for the entire row prior to change\r\n * @param {appEnv} appEnv   - app Environment from setup\r\n * @returns {promise}       - {data: updated data, status: status }\r\n * @example\r\n * data schema {column1: value, column2, value,...}\r\n * status schema {statusCode: 0|1|2, msg: some string}\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function cellEdit (name, value, rowIndex, data, appEnv) {\r\n  /* do not modify the data directly. caller will probably do a setState */\r\n  let newDataRow = (data !== null) ? { ...data } : { ...appEnv.state.data[rowIndex] };\r\n  const columns = appEnv.state.columns;\r\n  const { handlers, autoSave } = appEnv.appControl.editControl;\r\n\r\n  newDataRow[name] = text2Float(value, columns[name]);\r\n  let status = { statusCode: 0, msg: '' };\r\n\r\n  if (handlers[name] != null) {\r\n    const r = await handlers[name](newDataRow, name, rowIndex, appEnv);\r\n    newDataRow = r[0];\r\n    status = r[1];\r\n    if (status.statusCode === 2) {\r\n      return { data: r[0], status };\r\n    }\r\n  }\r\n  let r = await commonHandler('main', newDataRow, rowIndex, appEnv);\r\n  if (autoSave === true) {\r\n    r = await commonHandler('term', r[0], rowIndex, appEnv);\r\n    status = r[1];\r\n    if (status.statusCode === 2) {\r\n      return { data: r[0], status };\r\n    }\r\n\r\n    await updateTableRows(newDataRow, appEnv);\r\n  }\r\n  newDataRow = r[0];\r\n  status.msg = status.msg + ' / ' + r[1];\r\n\r\n  if (appEnv.appControl.dataControl.cachePolicy === true) {\r\n    appEnv.state.data[rowIndex] = newDataRow;\r\n  }\r\n\r\n  return ({ data: newDataRow, status });\r\n}\r\nexport default cellEdit;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nfunction text2Float (value, f) {\r\n  let svalue = value;\r\n  if (typeof svalue === 'string' && (f.Type === 'decimal' || f.Type === 'number' || f.Type === 'double')) {\r\n    svalue = parseFloat(value * 1.0);\r\n    if (isNaN(value) === true) {\r\n      value = 0;\r\n    }\r\n  }\r\n  return svalue;\r\n}\r\nexport default text2Float;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { casFetchRows } from '@sassoftware/restaflib';\r\nimport prepFormData from './prepFormData';\r\n/**\r\n * @description Fetch new records based on control argument\r\n * @async\r\n * @module fetchTableRows\r\n * @category restafedit/core\r\n * @param {fetchControl} control - info for records to retrieve\r\n * @param {appEnv} appEnv - appEnv\r\n * @returns {promise}  - { data:data, columns:ecolumns, pagination: pagination}\r\n * @example\r\n *   let control = {from: 10, count:50, format: false};\r\n *   let r = await fetchTableRows(control, appEnv);\r\n *   r is a fetchResult object\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function fetchTableRows (control, appEnv) {\r\n  const { store, session } = appEnv;\r\n  // eslint-disable-next-line no-useless-catch\r\n  const c = { ...control };\r\n  if (c.table == null) {\r\n    c.table = appEnv.appControl.dataControl.table;\r\n  }\r\n  if (c.where == null) {\r\n    c.where = {};\r\n  }\r\n  if (c.from <= 0 || c.next === -1) {\r\n    return null;\r\n  }\r\n  const r = await casFetchRows(store, session, c);\r\n  const t = await prepFormData(r.data, appEnv);\r\n\r\n  appEnv.state = {\r\n    modified   : [],\r\n    pagination : { ...r.pagination },\r\n    currentPage: c,\r\n    data       : [],\r\n    columns    : []\r\n  };\r\n\r\n  if (appEnv.appControl.dataControl.cachePolicy === true) {\r\n    appEnv.state.data = t.data;\r\n    appEnv.state.columns = t.columns;\r\n  }\r\n\r\n  t.pagination = { ...r.pagination };\r\n  return t;\r\n}\r\nexport default fetchTableRows;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/*\r\n* output\r\n* extended columns and data ready for use in dataform and table\r\n*/\r\nimport commonHandler from './commonHandler';\r\n/**\r\n * @description reduce fetch results\r\n * @private\r\n * @async\r\n * @module prepFormData\r\n * @param {object} result - result from casFetchRow(rows and schema)\r\n * @param {object} appEnv - app Environment from setup\r\n * @returns {promise}     - {columns: eColumns, rowsObject: newRows}\r\n */\r\nasync function prepFormData (result, appEnv) {\r\n  const { schema, rows } = result;\r\n  const customColumns = appEnv.appControl.dataControl.customColumns;\r\n\r\n  const makeRowObject = (columns, row) => {\r\n    const rowObj = {};\r\n    row.forEach((r, i) => {\r\n      const s = columns[i];\r\n      const name = s.Column.toLowerCase();\r\n      if (s.Label == null) {\r\n        s.Label = s.Column;\r\n      }\r\n      rowObj[name] = r;\r\n    });\r\n\r\n    if (customColumns != null) {\r\n      for (const k in customColumns) {\r\n        const c = customColumns[k];\r\n        const name = c.Column.toLowerCase();\r\n        rowObj[name] = c.value;\r\n      }\r\n    }\r\n    return rowObj;\r\n  };\r\n\r\n  const newRows = [];\r\n  for (let i = 0; i < rows.length; i++) {\r\n    const t = makeRowObject(schema, rows[i]);\r\n\r\n    const [t1, status] = await commonHandler('init', t, i, appEnv);\r\n\r\n    if (status.code !== 0) {\r\n      console.log(JSON.stringify(status, null, 4));\r\n    }\r\n    newRows.push(t1);\r\n  };\r\n\r\n  // extend column and make it an object\r\n  const eColumns = {};\r\n  schema.forEach((s, i) => {\r\n    const name = s.Column.toLowerCase();\r\n    s.name = name;\r\n    s.Label = (s.Label == null || s.Label.length === 0) ? s.Column : s.Label;\r\n    s.custom = false;\r\n    eColumns[name] = s;\r\n  });\r\n\r\n  // add computed columns to the array.\r\n  if (customColumns != null) {\r\n    for (const k in customColumns) {\r\n      const c = { ...customColumns[k] };\r\n      c.name = k;\r\n      c.custom = true;\r\n      eColumns[k] = c;\r\n    }\r\n  }\r\n\r\n  return {\r\n    columns: eColumns,\r\n    data   : newRows\r\n  };\r\n}\r\nexport default prepFormData;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport fetchTableRows from './fetchTableRows';\r\n/**\r\n * @description Simplify scrolling using next|prev|top\r\n * @async\r\n * @module scrollTable\r\n * @category restafedit/core\r\n * @param {string} direction direction(next|prev|first)\r\n * @param {appEnv} appEnv\r\n * @returns {promise}  result ready for display or null if it did not scroll\r\n * @example\r\n *  let r = await scrollTable('next', appEnv);\r\n *\r\n *  if ( r === null) {\r\n *     handle when no data was writtten\r\n *  } else {\r\n *     handle new data\r\n * }\r\n *\r\n * Make sure you handle exceptions that are thrown.\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function scrollTable (direction, appEnv) {\r\n  const { initialFetch, table } = appEnv.appControl.dataControl;\r\n\r\n  let control;\r\n  if (direction === 'first') {\r\n    control = { ...initialFetch };\r\n    control.table = table;\r\n  } else {\r\n    control = appEnv.state.pagination[direction];\r\n    if (control.next === -1) {\r\n      return null;\r\n    }\r\n  }\r\n  const t = await fetchTableRows(control, appEnv);\r\n  return t;\r\n}\r\nexport default scrollTable;\r\n","\r\nimport { initStore } from '@sassoftware/restaf';\r\nimport { casSetup } from '@sassoftware/restaflib';\r\n\r\n/**\r\n * @description Setup an Edit session\r\n * @async\r\n * @module setup\r\n * @category restafedit/core\r\n * @param {logonPayload} logonPayload  - information for connecting to Viya\r\n * @param {appControl} appControl      - control information\r\n *\r\n * @returns {promise}  returns appEnv to control the flow\r\n * @alias module: setup\r\n * @example\r\n *  const appEnv = await setup(logonPayload, appControl);\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n *\r\n */\r\n\r\nasync function setup (logonPayload, appControl) {\r\n  const store = initStore();\r\n  if (logonPayload.authType == null) {\r\n    logonPayload.authType = 'code';\r\n  }\r\n\r\n  const r = await casSetup(store, logonPayload);\r\n\r\n  const appEnv = {\r\n    store,\r\n    session  : r.session,\r\n    servers  : r.servers,\r\n    restaflib: null,\r\n    logonPayload,\r\n    state    : {\r\n      modified   : [],\r\n      pagination : {},\r\n      currentPage: {},\r\n      data       : {},\r\n      columns    : {}\r\n    }\r\n  };\r\n  appEnv.appControl = appControl;\r\n  appEnv.id = Date(); /* just assign a new id - placeholder */\r\n  return appEnv;\r\n}\r\nexport default setup;\r\n"],"names":["async","type","data","rowIndex","appEnv","handlers","appControl","editControl","statusCode","msg","newDataRow","status","updateTableRows","store","session","table","byvars","dataControl","columns","state","length","t","k","custom","w","forEach","payload","where","casUpdateData","cellEdit","name","value","autoSave","f","svalue","Type","parseFloat","isNaN","text2Float","_r","r","commonHandler","cachePolicy","fetchTableRows","control","c","from","next","casFetchRows","result","schema","rows","customColumns","makeRowObject","row","rowObj","i","s","Column","toLowerCase","Label","t1","code","console","log","JSON","stringify","newRows","push","eColumns","_extends","prepFormData","modified","pagination","currentPage","scrollTable","direction","initialFetch","setup","logonPayload","initStore","authType","casSetup","servers","restaflib","id","Date"],"mappings":"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"}