{"version":3,"file":"index.module.js","sources":["../src/commonHandler.js","../src/updateTableRows.js","../src/cellEdit.js","../src/text2Float.js","../src/prepFormData.js","../src/fetchTableRows.js","../src/scrollTable.js","../src/setup.js"],"sourcesContent":["/*\r\n * Copyright © 2022, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @description Run init, main or term handlers\r\n * @async\r\n * @module commonHandler\r\n * @category restafedit/core\r\n * @param {string} type   - type of exit (init|main|term)\r\n * @param {rowObject} data        - rowObject\r\n * @param {number} rowIndex    - client-side Row Index\r\n * @param {appEnv} appEnv      - app Environment from setup\r\n * @returns {promise}     - [data, status]\r\n * @example\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function commonHandler (type, data, rowIndex, appEnv) {\r\n  const { handlers } = appEnv.appControl.editControl;\r\n  if (handlers[type] == null) {\r\n    return [data, { statusCode: 0, msg: null }];\r\n  } else {\r\n    const [newDataRow, status] = await handlers[type](data, rowIndex, appEnv, type);\r\n    return [newDataRow, status];\r\n  }\r\n};\r\nexport default commonHandler;\r\n","import { casUpdateData } from '@sassoftware/restaflib';\r\n/**\r\n * @description Update the row on the server\r\n * @async\r\n * @module updateTableRows\r\n * @category restafedit/core\r\n * @param {rowObject} data  - data as a rowObject\r\n * @param {appEnv} appEnv   - app Environment object from setup\r\n * @returns {promise}       - key is completion code\r\n * @example\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function updateTableRows (data, appEnv) {\r\n  let result;\r\n  if (appEnv.source === 'cas') {\r\n    result = await iupdateCasTable(data, appEnv);\r\n  } else {\r\n    result = await iupdateComputeTable(data, appEnv);\r\n  }\r\n  return result;\r\n}\r\n\r\nasync function iupdateCasTable (data, appEnv) {\r\n  const { store, session } = appEnv;\r\n  const { table, byvars } = appEnv.appControl;\r\n  const columns = appEnv.state.columns;\r\n\r\n  if (byvars === null || byvars.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  const t = {};\r\n  for (const k in data) {\r\n    if (k !== '_index_' && columns[k].custom === false) {\r\n      t[k] = data[k];\r\n    };\r\n  };\r\n\r\n  const w = {};\r\n  byvars.forEach((k) => {\r\n    w[k] = t[k];\r\n  });\r\n  const payload = {\r\n    table,\r\n    data : t,\r\n    where: w\r\n  };\r\n\r\n  const result = await casUpdateData(store, session, payload);\r\n  const r = result.items().toJS();\r\n  const status = { statusCode: 0, msg: 'Save successful' };\r\n\r\n  if (r.disposition.severity !== 'Normal') {\r\n    status.statusCode = 2;\r\n    status.msg = t.disposition.severity.reason;\r\n  };\r\n  return status;\r\n}\r\n\r\nasync function iupdateComputeTable (data, appEnv) {\r\n  const { store, session } = appEnv;\r\n  const { table, byvars } = appEnv.appControl;\r\n  const columns = appEnv.state.columns;\r\n  ;\r\n\r\n  if (byvars === null || byvars.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  let src =\r\n    `proc sql; update ${table.libref}.${table.name}`;\r\n  let set = 'SET ';\r\n  let comma = ' ';\r\n  for (const k in data) {\r\n    if (columns[k].custom === false) {\r\n      set = set + comma + k + '=' + value2String(data[k]);\r\n    }\r\n    comma = ', ';\r\n  };\r\n  src = src + ' ' + set;\r\n  let w = ' WHERE ';\r\n  let andBit = ' ';\r\n\r\n  byvars.forEach((k) => {\r\n    w = w + andBit + k + '=' + value2String(data[k]);\r\n    andBit = 'AND ';\r\n  });\r\n  src = src + ' ' + w + ';run;';\r\n  const asrc = src.split(/\\r?\\n/);\r\n\r\n  const payload = {\r\n    data: { code: asrc }\r\n  };\r\n\r\n  console.log(asrc);\r\n\r\n  const job = await store.apiCall(session.links('execute'), payload);\r\n  const qs = {\r\n    qs: {\r\n      newState: 'Completed',\r\n      timeout : 1\r\n    }\r\n  };\r\n\r\n  // eslint-disable-next-line no-unused-vars\r\n  const status = await store.jobState(job, qs);\r\n  const c = (status.data === 'completed' ? 0 : 1);\r\n\r\n  return { statusCode: c, msg: status.data };\r\n}\r\n\r\nfunction value2String (value) {\r\n  let valueString;\r\n  if (value == null) {\r\n    valueString = '.';\r\n  } else if (typeof value === 'string') {\r\n    valueString = JSON.stringify(value);\r\n  } else {\r\n    valueString = value.toString();\r\n  }\r\n  return valueString;\r\n}\r\n\r\nexport default updateTableRows;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport text2Float from './text2Float';\r\nimport commonHandler from './commonHandler';\r\nimport updateTableRows from './updateTableRows';\r\n\r\n/**\r\n * @description Process edit of a cell and optionally save the data\r\n * @async\r\n * @module cellEdit\r\n * @category restafedit/core\r\n * @param {string} name     - name of the field (lower case)\r\n * @param {*} value         - the new value for name field\r\n * @param {number} rowIndex - row Index ( index in the data array on client)\r\n * @param {rowObject} data  - RowObject for the entire row prior to change\r\n * @param {appEnv} appEnv   - app Environment from setup\r\n * @returns {promise}       - {data: updated data, status: status }\r\n * @example\r\n * data schema {column1: value, column2, value,...}\r\n * status schema {statusCode: 0|1|2, msg: some string}\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function cellEdit (name, value, rowIndex, data, appEnv) {\r\n  /* do not modify the data directly. caller will probably do a setState */\r\n  let newDataRow = (data !== null) ? { ...data } : { ...appEnv.state.data[rowIndex] };\r\n  const columns = appEnv.state.columns;\r\n  const { handlers, autoSave } = appEnv.appControl.editControl;\r\n\r\n  newDataRow[name] = text2Float(value, columns[name]);\r\n  let status = { statusCode: 0, msg: '' };\r\n\r\n  if (handlers[name] != null) {\r\n    const r = await handlers[name](newDataRow, name, rowIndex, appEnv);\r\n    newDataRow = r[0];\r\n    status = r[1];\r\n    if (status.statusCode === 2) {\r\n      return { data: r[0], status };\r\n    }\r\n  }\r\n  let r = await commonHandler('main', newDataRow, rowIndex, appEnv);\r\n  if (autoSave === true) {\r\n    r = await commonHandler('term', r[0], rowIndex, appEnv);\r\n    status = r[1];\r\n    if (status.statusCode === 2) {\r\n      return { data: r[0], status };\r\n    }\r\n    status = await updateTableRows(r[0], appEnv);\r\n  }\r\n  newDataRow = r[0];\r\n  status.msg = status.msg + ' / ' + r[1];\r\n\r\n  if (appEnv.appControl.cachePolicy === true) {\r\n    appEnv.state.data[rowIndex] = newDataRow;\r\n  }\r\n\r\n  return ({ data: newDataRow, status });\r\n}\r\nexport default cellEdit;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nfunction text2Float (value, f) {\r\n  let svalue = value;\r\n  if (typeof svalue === 'string' && (f.Type === 'decimal' || f.Type === 'number' || f.Type === 'double')) {\r\n    svalue = parseFloat(value * 1.0);\r\n    if (isNaN(value) === true) {\r\n      value = 0;\r\n    }\r\n  }\r\n  return svalue;\r\n}\r\nexport default text2Float;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/*\r\n* output\r\n* extended columns and data ready for use in dataform and table\r\n*/\r\nimport commonHandler from './commonHandler';\r\n/**\r\n * @description reduce fetch results\r\n * @private\r\n * @async\r\n * @module prepFormData\r\n * @param {object} result - result from casFetchRow(rows and schema)\r\n * @param {object} appEnv - app Environment from setup\r\n * @returns {promise}     - {columns: eColumns, rowsObject: newRows}\r\n */\r\nasync function prepFormData (result, appEnv) {\r\n  const { schema, rows } = result;\r\n  const customColumns = appEnv.appControl.customColumns;\r\n  let status = { statusCode: 0, msg: 'Initialization was successful' };\r\n\r\n  const makeRowObject = (columns, row) => {\r\n    const rowObj = {};\r\n    row.forEach((r, i) => {\r\n      const s = columns[i];\r\n      const name = s.Column.toLowerCase();\r\n      if (s.Label == null) {\r\n        s.Label = s.Column;\r\n      }\r\n      rowObj[name] = r;\r\n    });\r\n\r\n    if (customColumns != null) {\r\n      for (const k in customColumns) {\r\n        const c = customColumns[k];\r\n        const name = c.Column.toLowerCase();\r\n        rowObj[name] = c.value;\r\n      }\r\n    }\r\n    return rowObj;\r\n  };\r\n\r\n  const newRows = [];\r\n  for (let i = 0; i < rows.length; i++) {\r\n    const t = makeRowObject(schema, rows[i]);\r\n\r\n    const [t1, statusi] = await commonHandler('init', t, i, appEnv);\r\n    status = statusi;\r\n    newRows.push(t1);\r\n  };\r\n\r\n  // extend column and make it an object\r\n  const eColumns = {};\r\n  schema.forEach((s, i) => {\r\n    const name = s.Column.toLowerCase();\r\n    s.name = name;\r\n    s.Label = (s.Label == null || s.Label.length === 0) ? s.Column : s.Label;\r\n    s.custom = false;\r\n    eColumns[name] = s;\r\n  });\r\n\r\n  // add computed columns to the array.\r\n  if (customColumns != null) {\r\n    for (const k in customColumns) {\r\n      const c = { ...customColumns[k] };\r\n      c.name = k;\r\n      c.custom = true;\r\n      eColumns[k] = c;\r\n    }\r\n  }\r\n\r\n  return {\r\n    columns: eColumns,\r\n    data   : newRows,\r\n    status\r\n  };\r\n}\r\nexport default prepFormData;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { casFetchRows, computeFetchData } from '@sassoftware/restaflib';\r\n\r\nimport prepFormData from './prepFormData';\r\n/**\r\n * @description Fetch new records based on control argument\r\n * @async\r\n * @module fetchTableRows\r\n * @category restafedit/core\r\n * @param {fetchControl} control - info for records to retrieve\r\n * @param {appEnv} appEnv - appEnv\r\n * @returns {promise}  - { data:data, columns:ecolumns, pagination: pagination}\r\n * @example\r\n *   let control = {from: 10, count:50, format: false};\r\n *   let r = await fetchTableRows(control, appEnv);\r\n *   r is a fetchResult object\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function fetchTableRows (control, appEnv) {\r\n  let result = null;\r\n  if (appEnv.source === 'cas') {\r\n    result = await icasRows(control, appEnv);\r\n  } else {\r\n    result = await icomputeRows(control, appEnv);\r\n  }\r\n  return result;\r\n}\r\n\r\nasync function icasRows (control, appEnv) {\r\n  const { store, session } = appEnv;\r\n  const c = { ...control };\r\n  if (c.table == null) {\r\n    c.table = appEnv.appControl.table;\r\n  }\r\n  if (c.where == null) {\r\n    c.where = {};\r\n  }\r\n  if (c.from <= 0 || c.next === -1) {\r\n    return null;\r\n  }\r\n  \r\n  const r = await casFetchRows(store, session, c);\r\n  \r\n  let t = null;\r\n  if (r !== null) {\r\n    \r\n    t = await prepFormData(r.data, appEnv);\r\n\r\n    appEnv.state = {\r\n      modified   : [],\r\n      pagination : { ...r.pagination },\r\n      currentPage: c,\r\n      data       : [],\r\n      columns    : []\r\n    };\r\n    if (appEnv.appControl.cachePolicy === true) {\r\n      appEnv.state.data = t.data;\r\n      appEnv.state.columns = t.columns;\r\n    }\r\n    t.pagination = { ...r.pagination };\r\n  }\r\n  return t;\r\n}\r\n\r\nasync function icomputeRows (control, appEnv) {\r\n  const { store, tableSummary } = appEnv;\r\n  const { table } = appEnv.appControl;\r\n  const tname = `${table.libref}.${table.name}`.toLowerCase();\r\n  // eslint-disable-next-line prefer-const\r\n  let payload = {\r\n    qs: {\r\n      start : control.from - 1,\r\n      limit : control.count,\r\n      format: (control.format != null) ? false : control.format\r\n    }\r\n  };\r\n  const data = await computeFetchData(store, tableSummary, tname, null, payload);\r\n  ;\r\n\r\n  let result = null;\r\n  if (data !== null) {\r\n    result = await prepFormData(data, appEnv);\r\n    appEnv.state = {\r\n      modified   : [],\r\n      pagination : {},\r\n      currentPage: {},\r\n      data       : result.data,\r\n      columns    : result.columns\r\n    };\r\n  }\r\n  return result;\r\n}\r\nexport default fetchTableRows;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport fetchTableRows from './fetchTableRows';\r\nimport { computeFetchData } from '@sassoftware/restaflib';\r\nimport prepFormData from './prepFormData';\r\n/**\r\n * @description Simplify scrolling using next|prev|top\r\n * @async\r\n * @module scrollTable\r\n * @category restafedit/core\r\n * @param {string} direction direction(next|prev|first)\r\n * @param {appEnv} appEnv\r\n * @returns {promise}  result ready for display or null if it did not scroll\r\n * @example\r\n *  let r = await scrollTable('next', appEnv);\r\n *\r\n *  if ( r === null) {\r\n *     handle when no data was writtten\r\n *  } else {\r\n *     handle new data\r\n * }\r\n *\r\n * Make sure you handle exceptions that are thrown.\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function scrollTable (direction, appEnv) {\r\n  let fetchResults;\r\n  if (appEnv.source === 'cas') {\r\n    fetchResults = await icasScroll(direction, appEnv);\r\n  } else {\r\n    fetchResults = await icomputeScroll(direction, appEnv);\r\n  }\r\n  return fetchResults;\r\n}\r\n\r\nasync function icasScroll (direction, appEnv) {\r\n  const { initialFetch, table } = appEnv.appControl;\r\n  let control;\r\n  if (direction === 'first') {\r\n    control = { ...initialFetch };\r\n    control.table = table;\r\n  } else {\r\n    control = appEnv.state.pagination[direction];\r\n    if (control.next === -1) {\r\n      return null;\r\n    }\r\n  }\r\n  const t = await fetchTableRows(control, appEnv);\r\n  return t;\r\n}\r\n\r\nasync function icomputeScroll (direction, appEnv) {\r\n  const { store, tableSummary } = appEnv;\r\n  const { table } = appEnv.appControl;\r\n\r\n  const tname = `${table.libref}.${table.name}`.toLowerCase();\r\n\r\n  // eslint-disable-next-line prefer-const\r\n\r\n  const payload = { qs: { limit: appEnv.appControl.initialFetch.count } };\r\n  const data = await computeFetchData(store, tableSummary, tname, direction, payload);\r\n\r\n  let result = null;\r\n  if (data !== null) {\r\n    result = await prepFormData(data, appEnv);\r\n    appEnv.state = {\r\n      modified   : [],\r\n      pagination : {},\r\n      currentPage: {},\r\n      data       : result.data,\r\n      columns    : result.columns\r\n    };\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nexport default scrollTable;\r\n","/* eslint-disable prefer-const */\r\n\r\nimport { initStore } from '@sassoftware/restaf';\r\nimport { casSetup, computeSetup, computeSetupTables } from '@sassoftware/restaflib';\r\n\r\n/**\r\n * @description Setup an Edit session\r\n * @async\r\n * @module setup\r\n * @category restafedit/core\r\n * @param {logonPayload} logonPayload  - information for connecting to Viya\r\n * @param {appControl} appControl      - control information\r\n *\r\n * @returns {promise}  returns appEnv to control the flow\r\n * @alias module: setup\r\n * @example\r\n *  const appEnv = await setup(logonPayload, appControl);\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n *\r\n */\r\n\r\nasync function setup (logonPayload, appControl, preamble) {\r\n  const store = initStore();\r\n  let appEnv;\r\n  if (logonPayload.authType == null) {\r\n    logonPayload.authType = 'code';\r\n  }\r\n  if (appControl.source === 'cas') {\r\n    appEnv = await icasSetup(store, logonPayload, appControl);\r\n  } else {\r\n    appEnv = await icomputeSetup(store, logonPayload, appControl, preamble);\r\n  }\r\n  return appEnv;\r\n}\r\n\r\nasync function icasSetup (store, logonPayload, appControl) {\r\n  const r = await casSetup(store, logonPayload);\r\n  let appEnv = {\r\n    source: appControl.source,\r\n\r\n    store,\r\n    session  : r.session,\r\n    servers  : r.servers,\r\n    restaflib: null,\r\n    logonPayload,\r\n    appControl,\r\n\r\n    state: {\r\n      modified   : [],\r\n      pagination : {},\r\n      currentPage: {},\r\n\r\n      data   : {},\r\n      columns: {}\r\n    },\r\n\r\n    id: Date()\r\n  };\r\n  return appEnv;\r\n};\r\n\r\nasync function icomputeSetup (store, logonPayload, appControl, preamble) {\r\n  // eslint-disable-next-line prefer-const\r\n  ;\r\n  let session = await computeSetup(store, appControl.computeContext, logonPayload);\r\n  let tableSummary = await computeSetupTables(store, session, appControl.table, preamble);\r\n  let appEnv = {\r\n    source: appControl.source,\r\n\r\n    store,\r\n    session,\r\n    tableSummary,\r\n    servers  : null,\r\n    restaflib: null,\r\n    logonPayload,\r\n    appControl,\r\n\r\n    state: {\r\n      modified   : [],\r\n      pagination : {},\r\n      currentPage: {},\r\n\r\n      data   : {},\r\n      columns: {}\r\n    },\r\n\r\n    id: Date()\r\n  };\r\n  return appEnv;\r\n}\r\n\r\nexport default setup;\r\n"],"names":["commonHandler","type","data","rowIndex","appEnv","appControl","editControl","handlers","Promise","resolve","statusCode","msg","_ref","e","reject","updateTableRows","result","source","iupdateCasTable","store","session","table","byvars","_appEnv$appControl2","columns","state","length","t","k","custom","w","forEach","casUpdateData","where","status","items","toJS","disposition","severity","reason","then","_iupdateCasTable","src","libref","name","comma","set","value2String","andBit","asrc","split","payload","code","console","log","apiCall","links","job","jobState","qs","newState","timeout","iupdateComputeTable","_temp2","value","JSON","stringify","toString","cellEdit","_exit3","_temp5","_result","newDataRow","r","cachePolicy","_temp","autoSave","_exit2","_updateTableRows","_appEnv$appControl$ed","f","svalue","Type","parseFloat","isNaN","text2Float","_temp6","_settle","pact","s","_Pact","o","bind","v","observer","prepFormData","_temp3","eColumns","schema","i","Column","toLowerCase","Label","customColumns","c","_extends","newRows","rows","array","body","row","rowObj","makeRowObject","push","statusi","thenable","_cycle","_temp4","prototype","onFulfilled","onRejected","this","callback","_this","control","from","next","casFetchRows","_prepFormData2","modified","pagination","currentPage","icasRows","_icasRows","tableSummary","tname","computeFetchData","start","limit","count","format","_prepFormData","icomputeRows","_icomputeRows","scrollTable","direction","icasScroll","initialFetch","_appEnv$appControl","fetchTableRows","_icasScroll","fetchResults","icomputeScroll","logonPayload","preamble","initStore","authType","icasSetup","casSetup","servers","restaflib","id","Date","icomputeSetup","computeSetup","computeContext","computeSetupTables"],"mappings":"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"}