{"version":3,"file":"index.modern.mjs","sources":["../src/commonHandler.js","../src/updateTableRows.js","../src/cellEdit.js","../src/text2Float.js","../src/prepFormData.js","../src/fetchTableRows.js","../src/scrollTable.js","../src/setup.js"],"sourcesContent":["/*\r\n * Copyright © 2022, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @description Run init, main or term handlers\r\n * @async\r\n * @module commonHandler\r\n * @category restafedit/core\r\n * @param {string} type   - type of exit (init|main|term)\r\n * @param {rowObject} data        - rowObject\r\n * @param {number} rowIndex    - client-side Row Index\r\n * @param {appEnv} appEnv      - app Environment from setup\r\n * @returns {promise}     - [data, status]\r\n * @example\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function commonHandler (type, data, rowIndex, appEnv) {\r\n  const { handlers } = appEnv.appControl.editControl;\r\n  if (handlers[type] == null) {\r\n    return [data, { statusCode: 0, msg: null }];\r\n  } else {\r\n    const [newDataRow, status] = await handlers[type](data, rowIndex, appEnv, type);\r\n    return [newDataRow, status];\r\n  }\r\n};\r\nexport default commonHandler;\r\n","\r\nimport { casUpdateData } from '@sassoftware/restaflib';\r\n/**\r\n * @description Update the row on the server\r\n * @async\r\n * @module updateTableRows\r\n * @category restafedit/core\r\n * @param {rowObject} data  - data as a rowObject\r\n * @param {appEnv} appEnv   - app Environment object from setup\r\n * @returns {promise}       - key is completion code\r\n * @example\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function updateTableRows (data, appEnv) {\r\n  let result;\r\n  if (appEnv.source === 'cas') {\r\n    result = await iupdateCasTable(data, appEnv);\r\n  } else {\r\n    result = await iupdateComputeTable(data, appEnv);\r\n  }\r\n  return result;\r\n}\r\n\r\nasync function iupdateCasTable (data, appEnv) {\r\n  const { store, session } = appEnv;\r\n  const { table, byvars } = appEnv.appControl.dataControl;\r\n  const columns = appEnv.state.columns;\r\n  const t = {};\r\n\r\n  if (byvars === null || byvars.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  for (const k in data) {\r\n    if (k !== '_index_' && columns[k].custom === false) {\r\n      t[k] = data[k];\r\n    };\r\n  };\r\n\r\n  const w = {};\r\n  byvars.forEach((k) => {\r\n    w[k] = t[k];\r\n  });\r\n  const payload = {\r\n    table,\r\n    data : t,\r\n    where: w\r\n  };\r\n\r\n  return await casUpdateData(store, session, payload);\r\n}\r\n\r\nasync function iupdateComputeTable (data, appEnv) {\r\n  const { store, session } = appEnv;\r\n  const { table, byvars } = appEnv.appControl.dataControl;\r\n  debugger;\r\n  if (byvars === null || byvars.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  let src =\r\n    `proc sql; update ${table.libref}.${table.name};`;\r\n  let set = 'set ';\r\n  let comma = ' ';\r\n  for (const k in data) {\r\n    set = set + comma + k + '=' + value2String(data[k]);\r\n    comma = ', ';\r\n  };\r\n\r\n  let w = 'where  ';\r\n  let andBit = ' ';\r\n\r\n  byvars.forEach((k) => {\r\n    w = w + andBit + k + '=' + value2String(data[k]);\r\n    andBit = 'AND ';\r\n  });\r\n  src = src + ' ' + w + ';run;';\r\n  const asrc = src.split(/\\r?\\n/);\r\n  console.log(asrc);\r\n\r\n  const payload = {\r\n    data: { code: asrc }\r\n  };\r\n\r\n  const job = await store.apiCall(session.links('execute'), payload);\r\n  const qs = {\r\n    qs: {\r\n      newState: 'Completed',\r\n      timeout : 1\r\n    }\r\n  };\r\n\r\n  const status = await store.jobState(job, qs);\r\n  console.log(status.data);\r\n  return true;\r\n}\r\n\r\nfunction value2String (value) {\r\n  let valueString;\r\n  if (value == null) {\r\n    valueString = '.';\r\n  } else if (typeof value === 'string') {\r\n    valueString = JSON.stringify(value);\r\n  } else {\r\n    valueString = value.toString();\r\n  }\r\n  return valueString;\r\n}\r\n\r\nexport default updateTableRows;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport text2Float from './text2Float';\r\nimport commonHandler from './commonHandler';\r\nimport updateTableRows from './updateTableRows';\r\n\r\n/**\r\n * @description Process edit of a cell and optionally save the data\r\n * @async\r\n * @module cellEdit\r\n * @category restafedit/core\r\n * @param {string} name     - name of the field (lower case)\r\n * @param {*} value         - the new value for name field\r\n * @param {number} rowIndex - row Index ( index in the data array on client)\r\n * @param {rowObject} data  - RowObject for the entire row prior to change\r\n * @param {appEnv} appEnv   - app Environment from setup\r\n * @returns {promise}       - {data: updated data, status: status }\r\n * @example\r\n * data schema {column1: value, column2, value,...}\r\n * status schema {statusCode: 0|1|2, msg: some string}\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function cellEdit (name, value, rowIndex, data, appEnv) {\r\n  /* do not modify the data directly. caller will probably do a setState */\r\n  let newDataRow = (data !== null) ? { ...data } : { ...appEnv.state.data[rowIndex] };\r\n  const columns = appEnv.state.columns;\r\n  const { handlers, autoSave } = appEnv.appControl.editControl;\r\n\r\n  newDataRow[name] = text2Float(value, columns[name]);\r\n  let status = { statusCode: 0, msg: '' };\r\n\r\n  if (handlers[name] != null) {\r\n    const r = await handlers[name](newDataRow, name, rowIndex, appEnv);\r\n    newDataRow = r[0];\r\n    status = r[1];\r\n    if (status.statusCode === 2) {\r\n      return { data: r[0], status };\r\n    }\r\n  }\r\n  let r = await commonHandler('main', newDataRow, rowIndex, appEnv);\r\n  if (autoSave === true) {\r\n    r = await commonHandler('term', r[0], rowIndex, appEnv);\r\n    status = r[1];\r\n    if (status.statusCode === 2) {\r\n      return { data: r[0], status };\r\n    }\r\n\r\n    await updateTableRows(newDataRow, appEnv);\r\n  }\r\n  newDataRow = r[0];\r\n  status.msg = status.msg + ' / ' + r[1];\r\n\r\n  if (appEnv.appControl.dataControl.cachePolicy === true) {\r\n    appEnv.state.data[rowIndex] = newDataRow;\r\n  }\r\n\r\n  return ({ data: newDataRow, status });\r\n}\r\nexport default cellEdit;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nfunction text2Float (value, f) {\r\n  let svalue = value;\r\n  if (typeof svalue === 'string' && (f.Type === 'decimal' || f.Type === 'number' || f.Type === 'double')) {\r\n    svalue = parseFloat(value * 1.0);\r\n    if (isNaN(value) === true) {\r\n      value = 0;\r\n    }\r\n  }\r\n  return svalue;\r\n}\r\nexport default text2Float;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/*\r\n* output\r\n* extended columns and data ready for use in dataform and table\r\n*/\r\nimport commonHandler from './commonHandler';\r\n/**\r\n * @description reduce fetch results\r\n * @private\r\n * @async\r\n * @module prepFormData\r\n * @param {object} result - result from casFetchRow(rows and schema)\r\n * @param {object} appEnv - app Environment from setup\r\n * @returns {promise}     - {columns: eColumns, rowsObject: newRows}\r\n */\r\nasync function prepFormData (result, appEnv) {\r\n  const { schema, rows } = result;\r\n  const customColumns = appEnv.appControl.dataControl.customColumns;\r\n\r\n  const makeRowObject = (columns, row) => {\r\n    const rowObj = {};\r\n    row.forEach((r, i) => {\r\n      const s = columns[i];\r\n      const name = s.Column.toLowerCase();\r\n      if (s.Label == null) {\r\n        s.Label = s.Column;\r\n      }\r\n      rowObj[name] = r;\r\n    });\r\n\r\n    if (customColumns != null) {\r\n      for (const k in customColumns) {\r\n        const c = customColumns[k];\r\n        const name = c.Column.toLowerCase();\r\n        rowObj[name] = c.value;\r\n      }\r\n    }\r\n    return rowObj;\r\n  };\r\n\r\n  const newRows = [];\r\n  for (let i = 0; i < rows.length; i++) {\r\n    const t = makeRowObject(schema, rows[i]);\r\n\r\n    const [t1, status] = await commonHandler('init', t, i, appEnv);\r\n\r\n    if (status.code !== 0) {\r\n      console.log(JSON.stringify(status, null, 4));\r\n    }\r\n    newRows.push(t1);\r\n  };\r\n\r\n  // extend column and make it an object\r\n  const eColumns = {};\r\n  schema.forEach((s, i) => {\r\n    const name = s.Column.toLowerCase();\r\n    s.name = name;\r\n    s.Label = (s.Label == null || s.Label.length === 0) ? s.Column : s.Label;\r\n    s.custom = false;\r\n    eColumns[name] = s;\r\n  });\r\n\r\n  // add computed columns to the array.\r\n  if (customColumns != null) {\r\n    for (const k in customColumns) {\r\n      const c = { ...customColumns[k] };\r\n      c.name = k;\r\n      c.custom = true;\r\n      eColumns[k] = c;\r\n    }\r\n  }\r\n\r\n  return {\r\n    columns: eColumns,\r\n    data   : newRows\r\n  };\r\n}\r\nexport default prepFormData;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { casFetchRows } from '@sassoftware/restaflib';\r\nimport prepFormData from './prepFormData';\r\n/**\r\n * @description Fetch new records based on control argument\r\n * @async\r\n * @module fetchTableRows\r\n * @category restafedit/core\r\n * @param {fetchControl} control - info for records to retrieve\r\n * @param {appEnv} appEnv - appEnv\r\n * @returns {promise}  - { data:data, columns:ecolumns, pagination: pagination}\r\n * @example\r\n *   let control = {from: 10, count:50, format: false};\r\n *   let r = await fetchTableRows(control, appEnv);\r\n *   r is a fetchResult object\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function fetchTableRows (control, appEnv) {\r\n  const { store, session } = appEnv;\r\n\r\n  // eslint-disable-next-line no-useless-catch\r\n  const c = { ...control };\r\n  if (c.table == null) {\r\n    c.table = appEnv.appControl.dataControl.table;\r\n  }\r\n  if (c.where == null) {\r\n    c.where = {};\r\n  }\r\n  if (c.from <= 0 || c.next === -1) {\r\n    return null;\r\n  }\r\n  const r = await casFetchRows(store, session, c);\r\n  const t = await prepFormData(r.data, appEnv);\r\n\r\n  appEnv.state = {\r\n    modified   : [],\r\n    pagination : { ...r.pagination },\r\n    currentPage: c,\r\n    data       : [],\r\n    columns    : []\r\n  };\r\n\r\n  if (appEnv.appControl.dataControl.cachePolicy === true) {\r\n    appEnv.state.data = t.data;\r\n    appEnv.state.columns = t.columns;\r\n  }\r\n\r\n  t.pagination = { ...r.pagination };\r\n  return t;\r\n}\r\nexport default fetchTableRows;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport fetchTableRows from './fetchTableRows';\r\nimport { computeFetchData } from '@sassoftware/restaflib';\r\nimport prepFormData from './prepFormData';\r\n/**\r\n * @description Simplify scrolling using next|prev|top\r\n * @async\r\n * @module scrollTable\r\n * @category restafedit/core\r\n * @param {string} direction direction(next|prev|first)\r\n * @param {appEnv} appEnv\r\n * @returns {promise}  result ready for display or null if it did not scroll\r\n * @example\r\n *  let r = await scrollTable('next', appEnv);\r\n *\r\n *  if ( r === null) {\r\n *     handle when no data was writtten\r\n *  } else {\r\n *     handle new data\r\n * }\r\n *\r\n * Make sure you handle exceptions that are thrown.\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function scrollTable (direction, appEnv) {\r\n  let fetchResults;\r\n  if (appEnv.source === 'cas') {\r\n    fetchResults = await icasScroll(direction, appEnv);\r\n  } else {\r\n    fetchResults = await icomputeScroll(direction, appEnv);\r\n  }\r\n  return fetchResults;\r\n}\r\n\r\nasync function icasScroll (direction, appEnv) {\r\n  const { initialFetch, table } = appEnv.appControl.dataControl;\r\n  let control;\r\n  if (direction === 'first') {\r\n    control = { ...initialFetch };\r\n    control.table = table;\r\n  } else {\r\n    control = appEnv.state.pagination[direction];\r\n    if (control.next === -1) {\r\n      return null;\r\n    }\r\n  }\r\n  const t = await fetchTableRows(control, appEnv);\r\n  return t;\r\n}\r\n\r\nasync function icomputeScroll (direction, appEnv) {\r\n  const { store, tableSummary } = appEnv;\r\n  const { table } = appEnv.appControl.dataControl;\r\n  debugger;\r\n  const tname = `${table.libref}.${table.name}`.toLowerCase();\r\n  debugger;\r\n  // eslint-disable-next-line prefer-const\r\n\r\n  const qs = { limit: appEnv.appControl.dataControl.initialFetch.count };\r\n  const data = await computeFetchData(store, tableSummary, tname, direction, qs);\r\n  debugger;\r\n  console.log(data);\r\n  debugger;\r\n  let result = null;\r\n  if (data !== null) {\r\n    result = await prepFormData(data, appEnv);\r\n    appEnv.state = {\r\n      modified   : [],\r\n      pagination : {},\r\n      currentPage: {},\r\n      data       : result.data,\r\n      columns    : result.columns\r\n    };\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nexport default scrollTable;\r\n","\r\nimport { initStore } from '@sassoftware/restaf';\r\nimport { casSetup, computeSetup, computeSetupTables } from '@sassoftware/restaflib';\r\n\r\n/**\r\n * @description Setup an Edit session\r\n * @async\r\n * @module setup\r\n * @category restafedit/core\r\n * @param {logonPayload} logonPayload  - information for connecting to Viya\r\n * @param {appControl} appControl      - control information\r\n *\r\n * @returns {promise}  returns appEnv to control the flow\r\n * @alias module: setup\r\n * @example\r\n *  const appEnv = await setup(logonPayload, appControl);\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n *\r\n */\r\n\r\nasync function setup (logonPayload, appControl) {\r\n  const store = initStore();\r\n  let appEnv;\r\n  if (logonPayload.authType == null) {\r\n    logonPayload.authType = 'code';\r\n  }\r\n  const dataControl = appControl.dataControl;\r\n  if (dataControl.source === 'cas') {\r\n    const r = await casSetup(store, logonPayload);\r\n    appEnv = {\r\n      source: dataControl.source,\r\n\r\n      store,\r\n      session  : r.session,\r\n      servers  : r.servers,\r\n      restaflib: null,\r\n      logonPayload,\r\n\r\n      state: {\r\n        modified   : [],\r\n        pagination : {},\r\n        currentPage: {},\r\n        data       : {},\r\n        columns    : {}\r\n      }\r\n    };\r\n  } else {\r\n    debugger;\r\n    const session = await computeSetup(store, null, logonPayload);\r\n    debugger;\r\n    const tableSummary = await computeSetupTables(store, session, dataControl.table);\r\n    debugger;\r\n    appEnv = {\r\n      store,\r\n      session,\r\n      tableSummary,\r\n\r\n      servers  : null,\r\n      restaflib: null,\r\n      logonPayload,\r\n\r\n      state: {\r\n        modified   : [],\r\n        pagination : {},\r\n        currentPage: {},\r\n\r\n        data   : {},\r\n        columns: {}\r\n      }\r\n    };\r\n  };\r\n\r\n  appEnv.appControl = appControl;\r\n  appEnv.id = Date(); /* just assign a new id - placeholder */\r\n  return appEnv;\r\n}\r\nexport default setup;\r\n"],"names":["async","type","data","rowIndex","appEnv","handlers","appControl","editControl","statusCode","msg","newDataRow","status","result","source","store","session","table","byvars","dataControl","columns","state","length","k","custom","t","w","forEach","payload","where","casUpdateData","iupdateCasTable","src","libref","name","set","comma","value2String","andBit","asrc","split","console","log","code","job","apiCall","links","jobState","qs","newState","timeout","iupdateComputeTable","value","valueString","JSON","stringify","toString","cellEdit","autoSave","f","svalue","Type","parseFloat","isNaN","text2Float","_r","r","commonHandler","updateTableRows","cachePolicy","prepFormData","schema","rows","customColumns","makeRowObject","row","rowObj","i","s","Column","toLowerCase","Label","c","t1","newRows","push","eColumns","_extends","fetchTableRows","control","from","next","casFetchRows","modified","pagination","currentPage","scrollTable","direction","fetchResults","initialFetch","icasScroll","tableSummary","tname","limit","count","computeFetchData","icomputeScroll","setup","logonPayload","initStore","authType","casSetup","servers","restaflib","computeSetup","computeSetupTables","id","Date"],"mappings":"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"}