{"version":3,"file":"index.module.js","sources":["../src/commonHandler.js","../src/updateTableRows.js","../src/cellEdit.js","../src/text2Float.js","../src/prepFormData.js","../src/fetchTableRows.js","../src/scrollTable.js","../src/setup.js"],"sourcesContent":["/*\r\n * Copyright © 2022, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @description Run init, main or term handlers\r\n * @async\r\n * @module commonHandler\r\n * @category restafedit/core\r\n * @param {string} type   - type of exit (init|main|term)\r\n * @param {rowObject} data        - rowObject\r\n * @param {number} rowIndex    - client-side Row Index\r\n * @param {appEnv} appEnv      - app Environment from setup\r\n * @returns {promise}     - [data, status]\r\n * @example\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function commonHandler (type, data, rowIndex, appEnv) {\r\n  const { handlers } = appEnv.appControl.editControl;\r\n  if (handlers[type] == null) {\r\n    return [data, { statusCode: 0, msg: null }];\r\n  } else {\r\n    const [newDataRow, status] = await handlers[type](data, rowIndex, appEnv, type);\r\n    return [newDataRow, status];\r\n  }\r\n};\r\nexport default commonHandler;\r\n","import { casUpdateData } from '@sassoftware/restaflib';\r\n/**\r\n * @description Update the row on the server\r\n * @async\r\n * @module updateTableRows\r\n * @category restafedit/core\r\n * @param {rowObject} data  - data as a rowObject\r\n * @param {appEnv} appEnv   - app Environment object from setup\r\n * @returns {promise}       - key is completion code\r\n * @example\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function updateTableRows (data, appEnv) {\r\n  let result;\r\n  if (appEnv.source === 'cas') {\r\n    result = await iupdateCasTable(data, appEnv);\r\n  } else {\r\n    result = await iupdateComputeTable(data, appEnv);\r\n  }\r\n  return result;\r\n}\r\n\r\nasync function iupdateCasTable (data, appEnv) {\r\n  const { store, session } = appEnv;\r\n  const { table, byvars } = appEnv.appControl;\r\n  const columns = appEnv.state.columns;\r\n\r\n  if (byvars === null || byvars.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  const t = {};\r\n  for (const k in data) {\r\n    if (k !== '_index_' && columns[k].custom === false) {\r\n      t[k] = data[k];\r\n    };\r\n  };\r\n\r\n  const w = {};\r\n  byvars.forEach((k) => {\r\n    w[k] = t[k];\r\n  });\r\n  const payload = {\r\n    table,\r\n    data : t,\r\n    where: w\r\n  };\r\n\r\n  await casUpdateData(store, session, payload);\r\n  return { statusCode: 0, msg: 'Save successful' };\r\n}\r\n\r\nasync function iupdateComputeTable (data, appEnv) {\r\n  const { store, session } = appEnv;\r\n  const { table, byvars } = appEnv.appControl;\r\n  const columns = appEnv.state.columns;\r\n  ;\r\n\r\n  if (byvars === null || byvars.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  let src =\r\n    `proc sql; update ${table.libref}.${table.name}`;\r\n  let set = 'SET ';\r\n  let comma = ' ';\r\n  for (const k in data) {\r\n    if (columns[k].custom === false) {\r\n      set = set + comma + k + '=' + value2String(data[k]);\r\n    }\r\n    comma = ', ';\r\n  };\r\n  src = src + ' ' + set;\r\n  let w = ' WHERE ';\r\n  let andBit = ' ';\r\n\r\n  byvars.forEach((k) => {\r\n    w = w + andBit + k + '=' + value2String(data[k]);\r\n    andBit = 'AND ';\r\n  });\r\n  src = src + ' ' + w + ';run;';\r\n  const asrc = src.split(/\\r?\\n/);\r\n\r\n  const payload = {\r\n    data: { code: asrc }\r\n  };\r\n\r\n  const job = await store.apiCall(session.links('execute'), payload);\r\n  const qs = {\r\n    qs: {\r\n      newState: 'Completed',\r\n      timeout : 1\r\n    }\r\n  };\r\n\r\n  // eslint-disable-next-line no-unused-vars\r\n  const status = await store.jobState(job, qs);\r\n  const c = (status.data === 'completed' ? 0 : 1);\r\n  ;\r\n  return { statusCode: c, msg: status.data };\r\n}\r\n\r\nfunction value2String (value) {\r\n  let valueString;\r\n  if (value == null) {\r\n    valueString = '.';\r\n  } else if (typeof value === 'string') {\r\n    valueString = JSON.stringify(value);\r\n  } else {\r\n    valueString = value.toString();\r\n  }\r\n  return valueString;\r\n}\r\n\r\nexport default updateTableRows;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport text2Float from './text2Float';\r\nimport commonHandler from './commonHandler';\r\nimport updateTableRows from './updateTableRows';\r\n\r\n/**\r\n * @description Process edit of a cell and optionally save the data\r\n * @async\r\n * @module cellEdit\r\n * @category restafedit/core\r\n * @param {string} name     - name of the field (lower case)\r\n * @param {*} value         - the new value for name field\r\n * @param {number} rowIndex - row Index ( index in the data array on client)\r\n * @param {rowObject} data  - RowObject for the entire row prior to change\r\n * @param {appEnv} appEnv   - app Environment from setup\r\n * @returns {promise}       - {data: updated data, status: status }\r\n * @example\r\n * data schema {column1: value, column2, value,...}\r\n * status schema {statusCode: 0|1|2, msg: some string}\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function cellEdit (name, value, rowIndex, data, appEnv) {\r\n  /* do not modify the data directly. caller will probably do a setState */\r\n  let newDataRow = (data !== null) ? { ...data } : { ...appEnv.state.data[rowIndex] };\r\n  const columns = appEnv.state.columns;\r\n  const { handlers, autoSave } = appEnv.appControl.editControl;\r\n\r\n  newDataRow[name] = text2Float(value, columns[name]);\r\n  let status = { statusCode: 0, msg: '' };\r\n\r\n  if (handlers[name] != null) {\r\n    const r = await handlers[name](newDataRow, name, rowIndex, appEnv);\r\n    newDataRow = r[0];\r\n    status = r[1];\r\n    if (status.statusCode === 2) {\r\n      return { data: r[0], status };\r\n    }\r\n  }\r\n  let r = await commonHandler('main', newDataRow, rowIndex, appEnv);\r\n  if (autoSave === true) {\r\n    r = await commonHandler('term', r[0], rowIndex, appEnv);\r\n    status = r[1];\r\n    if (status.statusCode === 2) {\r\n      return { data: r[0], status };\r\n    }\r\n\r\n    await updateTableRows(newDataRow, appEnv);\r\n  }\r\n  newDataRow = r[0];\r\n  status.msg = status.msg + ' / ' + r[1];\r\n\r\n  if (appEnv.appControl.cachePolicy === true) {\r\n    appEnv.state.data[rowIndex] = newDataRow;\r\n  }\r\n\r\n  return ({ data: newDataRow, status });\r\n}\r\nexport default cellEdit;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nfunction text2Float (value, f) {\r\n  let svalue = value;\r\n  if (typeof svalue === 'string' && (f.Type === 'decimal' || f.Type === 'number' || f.Type === 'double')) {\r\n    svalue = parseFloat(value * 1.0);\r\n    if (isNaN(value) === true) {\r\n      value = 0;\r\n    }\r\n  }\r\n  return svalue;\r\n}\r\nexport default text2Float;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/*\r\n* output\r\n* extended columns and data ready for use in dataform and table\r\n*/\r\nimport commonHandler from './commonHandler';\r\n/**\r\n * @description reduce fetch results\r\n * @private\r\n * @async\r\n * @module prepFormData\r\n * @param {object} result - result from casFetchRow(rows and schema)\r\n * @param {object} appEnv - app Environment from setup\r\n * @returns {promise}     - {columns: eColumns, rowsObject: newRows}\r\n */\r\nasync function prepFormData (result, appEnv) {\r\n  const { schema, rows } = result;\r\n  const customColumns = appEnv.appControl.customColumns;\r\n\r\n  const makeRowObject = (columns, row) => {\r\n    const rowObj = {};\r\n    row.forEach((r, i) => {\r\n      const s = columns[i];\r\n      const name = s.Column.toLowerCase();\r\n      if (s.Label == null) {\r\n        s.Label = s.Column;\r\n      }\r\n      rowObj[name] = r;\r\n    });\r\n\r\n    if (customColumns != null) {\r\n      for (const k in customColumns) {\r\n        const c = customColumns[k];\r\n        const name = c.Column.toLowerCase();\r\n        rowObj[name] = c.value;\r\n      }\r\n    }\r\n    return rowObj;\r\n  };\r\n\r\n  const newRows = [];\r\n  for (let i = 0; i < rows.length; i++) {\r\n    const t = makeRowObject(schema, rows[i]);\r\n\r\n    const [t1, status] = await commonHandler('init', t, i, appEnv);\r\n\r\n    if (status.code !== 0) {\r\n      console.log(JSON.stringify(status, null, 4));\r\n    }\r\n    newRows.push(t1);\r\n  };\r\n\r\n  // extend column and make it an object\r\n  const eColumns = {};\r\n  schema.forEach((s, i) => {\r\n    const name = s.Column.toLowerCase();\r\n    s.name = name;\r\n    s.Label = (s.Label == null || s.Label.length === 0) ? s.Column : s.Label;\r\n    s.custom = false;\r\n    eColumns[name] = s;\r\n  });\r\n\r\n  // add computed columns to the array.\r\n  if (customColumns != null) {\r\n    for (const k in customColumns) {\r\n      const c = { ...customColumns[k] };\r\n      c.name = k;\r\n      c.custom = true;\r\n      eColumns[k] = c;\r\n    }\r\n  }\r\n\r\n  return {\r\n    columns: eColumns,\r\n    data   : newRows\r\n  };\r\n}\r\nexport default prepFormData;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { casFetchRows, computeFetchData } from '@sassoftware/restaflib';\r\n\r\nimport prepFormData from './prepFormData';\r\n/**\r\n * @description Fetch new records based on control argument\r\n * @async\r\n * @module fetchTableRows\r\n * @category restafedit/core\r\n * @param {fetchControl} control - info for records to retrieve\r\n * @param {appEnv} appEnv - appEnv\r\n * @returns {promise}  - { data:data, columns:ecolumns, pagination: pagination}\r\n * @example\r\n *   let control = {from: 10, count:50, format: false};\r\n *   let r = await fetchTableRows(control, appEnv);\r\n *   r is a fetchResult object\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function fetchTableRows (control, appEnv) {\r\n  let result = null;\r\n  if (appEnv.source === 'cas') {\r\n    result = await icasRows(control, appEnv);\r\n  } else {\r\n    result = await icomputeRows(control, appEnv);\r\n  }\r\n  return result;\r\n}\r\n\r\nasync function icasRows (control, appEnv) {\r\n  const { store, session } = appEnv;\r\n  const c = { ...control };\r\n  if (c.table == null) {\r\n    c.table = appEnv.appControl.table;\r\n  }\r\n  if (c.where == null) {\r\n    c.where = {};\r\n  }\r\n  if (c.from <= 0 || c.next === -1) {\r\n    return null;\r\n  }\r\n  const r = await casFetchRows(store, session, c);\r\n  let t = null;\r\n  if (r !== null) {\r\n    t = await prepFormData(r.data, appEnv);\r\n\r\n    appEnv.state = {\r\n      modified   : [],\r\n      pagination : { ...r.pagination },\r\n      currentPage: c,\r\n      data       : [],\r\n      columns    : []\r\n    };\r\n    if (appEnv.appControl.cachePolicy === true) {\r\n      appEnv.state.data = t.data;\r\n      appEnv.state.columns = t.columns;\r\n    }\r\n    t.pagination = { ...r.pagination };\r\n  }\r\n  return t;\r\n}\r\n\r\nasync function icomputeRows (control, appEnv) {\r\n  const { store, tableSummary } = appEnv;\r\n  const { table } = appEnv.appControl;\r\n  const tname = `${table.libref}.${table.name}`.toLowerCase();\r\n  // eslint-disable-next-line prefer-const\r\n  let payload = {\r\n    qs: {\r\n      start : control.from - 1,\r\n      limit : control.count,\r\n      format: (control.format != null) ? false : control.format\r\n    }\r\n  };\r\n  const data = await computeFetchData(store, tableSummary, tname, null, payload);\r\n  ;\r\n\r\n  let result = null;\r\n  if (data !== null) {\r\n    result = await prepFormData(data, appEnv);\r\n    appEnv.state = {\r\n      modified   : [],\r\n      pagination : {},\r\n      currentPage: {},\r\n      data       : result.data,\r\n      columns    : result.columns\r\n    };\r\n  }\r\n  return result;\r\n}\r\nexport default fetchTableRows;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport fetchTableRows from './fetchTableRows';\r\nimport { computeFetchData } from '@sassoftware/restaflib';\r\nimport prepFormData from './prepFormData';\r\n/**\r\n * @description Simplify scrolling using next|prev|top\r\n * @async\r\n * @module scrollTable\r\n * @category restafedit/core\r\n * @param {string} direction direction(next|prev|first)\r\n * @param {appEnv} appEnv\r\n * @returns {promise}  result ready for display or null if it did not scroll\r\n * @example\r\n *  let r = await scrollTable('next', appEnv);\r\n *\r\n *  if ( r === null) {\r\n *     handle when no data was writtten\r\n *  } else {\r\n *     handle new data\r\n * }\r\n *\r\n * Make sure you handle exceptions that are thrown.\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function scrollTable (direction, appEnv) {\r\n  let fetchResults;\r\n  if (appEnv.source === 'cas') {\r\n    fetchResults = await icasScroll(direction, appEnv);\r\n  } else {\r\n    fetchResults = await icomputeScroll(direction, appEnv);\r\n  }\r\n  return fetchResults;\r\n}\r\n\r\nasync function icasScroll (direction, appEnv) {\r\n  const { initialFetch, table } = appEnv.appControl;\r\n  let control;\r\n  if (direction === 'first') {\r\n    control = { ...initialFetch };\r\n    control.table = table;\r\n  } else {\r\n    control = appEnv.state.pagination[direction];\r\n    if (control.next === -1) {\r\n      return null;\r\n    }\r\n  }\r\n  const t = await fetchTableRows(control, appEnv);\r\n  return t;\r\n}\r\n\r\nasync function icomputeScroll (direction, appEnv) {\r\n  const { store, tableSummary } = appEnv;\r\n  const { table } = appEnv.appControl;\r\n\r\n  const tname = `${table.libref}.${table.name}`.toLowerCase();\r\n\r\n  // eslint-disable-next-line prefer-const\r\n\r\n  const payload = { qs: { limit: appEnv.appControl.initialFetch.count } };\r\n  const data = await computeFetchData(store, tableSummary, tname, direction, payload);\r\n\r\n  let result = null;\r\n  if (data !== null) {\r\n    result = await prepFormData(data, appEnv);\r\n    appEnv.state = {\r\n      modified   : [],\r\n      pagination : {},\r\n      currentPage: {},\r\n      data       : result.data,\r\n      columns    : result.columns\r\n    };\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nexport default scrollTable;\r\n","/* eslint-disable prefer-const */\r\n\r\nimport { initStore } from '@sassoftware/restaf';\r\nimport { casSetup, computeSetup, computeSetupTables } from '@sassoftware/restaflib';\r\n\r\n/**\r\n * @description Setup an Edit session\r\n * @async\r\n * @module setup\r\n * @category restafedit/core\r\n * @param {logonPayload} logonPayload  - information for connecting to Viya\r\n * @param {appControl} appControl      - control information\r\n *\r\n * @returns {promise}  returns appEnv to control the flow\r\n * @alias module: setup\r\n * @example\r\n *  const appEnv = await setup(logonPayload, appControl);\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n *\r\n */\r\n\r\nasync function setup (logonPayload, appControl, preamble) {\r\n  const store = initStore();\r\n  let appEnv;\r\n  if (logonPayload.authType == null) {\r\n    logonPayload.authType = 'code';\r\n  }\r\n  if (appControl.source === 'cas') {\r\n    appEnv = await icasSetup(store, logonPayload, appControl);\r\n  } else {\r\n    appEnv = await icomputeSetup(store, logonPayload, appControl, preamble);\r\n  }\r\n  return appEnv;\r\n}\r\n\r\nasync function icasSetup (store, logonPayload, appControl) {\r\n  const r = await casSetup(store, logonPayload);\r\n  let appEnv = {\r\n    source: appControl.source,\r\n\r\n    store,\r\n    session  : r.session,\r\n    servers  : r.servers,\r\n    restaflib: null,\r\n    logonPayload,\r\n    appControl,\r\n\r\n    state: {\r\n      modified   : [],\r\n      pagination : {},\r\n      currentPage: {},\r\n\r\n      data   : {},\r\n      columns: {}\r\n    },\r\n\r\n    id: Date()\r\n  };\r\n  return appEnv;\r\n};\r\n\r\nasync function icomputeSetup (store, logonPayload, appControl, preamble) {\r\n  // eslint-disable-next-line prefer-const\r\n  ;\r\n  let session = await computeSetup(store, appControl.computeContext, logonPayload);\r\n  let tableSummary = await computeSetupTables(store, session, appControl.table, preamble);\r\n  let appEnv = {\r\n    source: appControl.source,\r\n\r\n    store,\r\n    session,\r\n    tableSummary,\r\n    servers  : null,\r\n    restaflib: null,\r\n    logonPayload,\r\n    appControl,\r\n\r\n    state: {\r\n      modified   : [],\r\n      pagination : {},\r\n      currentPage: {},\r\n\r\n      data   : {},\r\n      columns: {}\r\n    },\r\n\r\n    id: Date()\r\n  };\r\n  return appEnv;\r\n}\r\n\r\nexport default setup;\r\n"],"names":["commonHandler","type","data","rowIndex","appEnv","appControl","editControl","handlers","Promise","resolve","statusCode","msg","_ref","e","reject","updateTableRows","result","source","iupdateCasTable","store","session","_appEnv$appControl2","table","byvars","columns","state","length","t","k","custom","w","forEach","casUpdateData","where","then","_iupdateCasTable","iupdateComputeTable","_appEnv$appControl","src","libref","name","set","comma","value2String","andBit","payload","code","split","apiCall","links","job","jobState","qs","newState","timeout","status","_iupdateComputeTable","_temp2","value","JSON","stringify","toString","cellEdit","_exit3","newDataRow","r","_exit2","_result2","cachePolicy","autoSave","_commonHandler","_temp","_extends","_appEnv$appControl$ed","f","svalue","Type","parseFloat","isNaN","text2Float","_temp6","_temp5","_settle","pact","s","_Pact","o","bind","v","observer","_temp3","eColumns","schema","i","Column","toLowerCase","Label","customColumns","c","newRows","rows","array","body","row","rowObj","makeRowObject","t1","console","log","push","thenable","_cycle","_temp4","prototype","onFulfilled","onRejected","this","callback","_this","control","from","next","casFetchRows","prepFormData","_prepFormData2","modified","pagination","currentPage","icasRows","_icasRows","tableSummary","tname","computeFetchData","start","limit","count","format","_prepFormData","icomputeRows","_icomputeRows","scrollTable","direction","icasScroll","initialFetch","fetchTableRows","_icasScroll","fetchResults","icomputeScroll","logonPayload","preamble","initStore","authType","icasSetup","casSetup","servers","restaflib","id","Date","icomputeSetup","computeSetup","computeContext","computeSetupTables"],"mappings":"2aAiBeA,IAAAA,WAAeC,EAAMC,EAAMC,EAAUC,OAClD,MAAqBA,EAAOC,WAAWC,YAA/BC,SACR,OAAsB,MAAlBA,EAASN,GACJO,QAAAC,QAAA,CAACP,EAAM,CAAEQ,WAAY,EAAGC,IAAK,QAC/BH,QAAAC,QAC8BF,EAASN,GAAMC,EAAMC,EAAUC,EAAQH,qBAC1E,MAAO,CAFFW,EAAA,GAAAA,EAAA,GAAA,EAIR,OAAAC,GAAA,OAAAL,QAAAM,OAAAD,EAAA,CAAA,ECZcE,EAAAA,SAAiBb,EAAME,GAAQ,IAC5C,IAAAY,EACIZ,EAAkB,QAAlBA,EAAOa,OACMC,QAAAA,iBAOahB,EAAME,OACpC,IAAAe,EAA2Bf,EAAnBe,MAAOC,EAAYhB,EAAZgB,QACfC,EAA0BjB,EAAOC,WAAzBiB,EAARD,EAAQC,MAAOC,EAAfF,EAAeE,OACFC,EAAGpB,EAAOqB,MAAMD,QAE7B,GAAe,OAAXD,GAAqC,IAAlBA,EAAOG,OAC5B,OAAAlB,QAAAC,QAAO,MAGT,IAAOkB,EAAG,CAAV,EACA,IAAK,IAALC,OACY,YAANA,IAAyC,IAAtBJ,EAAQI,GAAGC,SAChCF,EAAEC,GAAK1B,EAAK0B,IAIhB,IAAOE,EAAG,CAAA,EAhBkC,OAiB5CP,EAAOQ,QAAQ,SAACH,GACdE,EAAEF,GAAKD,EAAEC,EACV,GAnB2CpB,QAAAC,QA0BtCuB,EAAcb,EAAOC,EANX,CACdE,MAAAA,EACApB,KAAOyB,EACPM,MAAOH,KAITI,KAAA,WAAA,MAAO,CAAExB,WAAY,EAAGC,IAAK,kBA3Be,EAV/BI,OAAAA,GAAAA,OAAAA,QAAAA,OAAAA,EAAAA,CAAAA,CAGIG,CAAgBhB,EAAME,IAHK8B,KAAA,SAAAC,GAG1CnB,EAH0CmB,CAAA,GAAA3B,QAAAC,QAwC/B2B,SAAqBlC,EAAME,OACxC,IAAAe,EAA2Bf,EAAnBe,MAAOC,EAAYhB,EAAZgB,QACWhB,EAAAA,EAAOC,WAAzBiB,EAARe,EAAQf,MAAOC,EAAfc,EAAed,OACTC,EAAUpB,EAAOqB,MAAMD,QAG7B,GAAe,OAAXD,GAAqC,IAAlBA,EAAOG,OAC5B,OAAAlB,QAAAC,QAAO,MAGT,IAAI6B,EACkBhB,oBAAAA,EAAMiB,OAAUjB,IAAAA,EAAMkB,KACrCC,EAAG,OACDC,EAAG,IACZ,IAAK,IAALd,KAAA1B,GAC4B,IAAtBsB,EAAQI,GAAGC,SACbY,EAAMA,EAAMC,EAAQd,EAAI,IAAMe,EAAazC,EAAK0B,KAElDc,EAAQ,KAEVJ,EAAMA,EAAM,IAAMG,EAClB,IAAKX,EAAG,UACJc,EAAS,IAEbrB,EAAOQ,QAAQ,SAACH,GACdE,EAAIA,EAAIc,EAAShB,EAAI,IAAMe,EAAazC,EAAK0B,IAC7CgB,EAAS,MACV,GAED,IAEaC,EAAG,CACd3C,KAAM,CAAE4C,MAJVR,EAAMA,EAAM,IAAMR,EAAI,SACLiB,MAAM,WA7ByB,OAAAvC,QAAAC,QAmC9BU,EAAM6B,QAAQ5B,EAAQ6B,MAAM,WAAYJ,IAApDK,KAAAA,SAAAA,GAnC0C,OAAA1C,QAAAC,QA4C3BU,EAAMgC,SAASD,EARzB,CACTE,GAAI,CACFC,SAAU,YACVC,QAAU,MAvCkCpB,KAAA,SA4C1CqB,GAGN,MAAO,CAAE7C,WAFkB,cAAhB6C,EAAOrD,KAAuB,EAAI,EAErBS,IAAK4C,EAAOrD,KA/CY,EAgDjD,EA9EcgB,OAAAA,GAAAA,OAAAA,QAAAA,OAAAA,EAAAA,CAAAA,CALIkB,CAAoBlC,EAAME,IAAzCY,KAAAA,SAAAA,GAAAA,EAL0CwC,CAAA,GAAA,OAAAhD,QAAAC,QAAAgD,GAAAA,EAAAvB,KAAAuB,EAAAvB,KAAA,WAO5C,OAAOlB,CAPqC,GAOrCA,uCAmFT,SAAS2B,EAAce,GASrB,OAPa,MAATA,EACY,IACY,iBAAVA,EACFC,KAAKC,UAAUF,GAEfA,EAAMG,UAGvB,CCvFcC,IAAAA,EAAAA,SAAUtB,EAAMkB,EAAOvD,EAAUD,EAAME,OAiBtCJ,IAjB8C+D,EAiB9C/D,EAAAA,SAAAA,GAAAA,OAAAA,EAAAA,EAAAA,QAAAA,QAAAA,EAAc,OAAQgE,EAAY7D,EAAUC,kBAAtD6D,GAjBwD,IAAAC,EAAA,SAAAT,EAAAU,GAAA,OAAAD,EAAAC,GA2B5DH,EAAaC,EAAE,GACfV,EAAO5C,IAAM4C,EAAO5C,IAAM,MAAQsD,EAAE,IAEE,IAAlC7D,EAAOC,WAAW+D,cACpBhE,EAAOqB,MAAMvB,KAAKC,GAAY6D,GAGxB,CAAE9D,KAAM8D,EAAYT,OAAAA,GAlCgC,CAkBxDc,IAAAA,EAAAA,WAAAA,IAAa,IAAbA,EACQrE,OAAAA,QAAAA,QAAAA,EAAc,OAAQiE,EAAE,GAAI9D,EAAUC,IAAhD6D,KAAAA,SAAAA,GAEA,OAA0B,KAD1BV,GADAU,EAAAK,GACW,IACA5D,YAAkBwD,EAAA,EACpB,CAAEhE,KAAM+D,EAAE,GAAIV,OAAAA,IAtBmC/C,QAAAC,QAyBpDM,EAAgBiD,EAAY5D,IAzBwB8B,KAAA,WAAA,EAAA,EAAA,CAkBxDmC,GAlBwD,OAAAE,GAAAA,EAAArC,KAAAqC,EAAArC,KAAAuB,GAAAA,EAAAc,EAAA,EAAA,EAExDP,EAAaQ,EAAA,GAAU,OAATtE,EAAsBA,EAAcE,EAAOqB,MAAMvB,KAAKC,IAExEsE,EAA+BrE,EAAOC,WAAWC,YAAzCC,EAAAA,EAAAA,SAAU8D,IAAAA,SAElBL,EAAWxB,GC5Bb,SAAqBkB,EAAOgB,GAC1B,IAAUC,EAAGjB,EAOb,MANsB,iBAAXiB,GAAmC,YAAXD,EAAEE,MAAiC,WAAXF,EAAEE,MAAgC,WAAXF,EAAEE,OAClFD,EAASE,WAAmB,EAARnB,IACC,IAAjBoB,MAAMpB,KACRA,EAAQ,IAIbiB,CAAA,CDmBoBI,CAAWrB,EAHdtD,EAAOqB,MAAMD,QAGgBgB,IAC7C,IAAUe,EAAG,CAAE7C,WAAY,EAAGC,IAAK,IAPyBqE,EAAA,WAAA,GAStC,MAAlBzE,EAASiC,GAT+C,OAAAhC,QAAAC,QAU1CF,EAASiC,GAAMwB,EAAYxB,EAAMrC,EAAUC,IAArD6D,KAAAA,SAAAA,GAVoD,GAW1DD,EAAaC,EAAE,GAEW,KAD1BV,EAASU,EAAE,IACAvD,WAb+C,OAAAqD,EAAA,EAcjD,CAAE7D,KAAM+D,EAAE,GAAIV,OAAAA,EAdmC,EAAA,CAAA,GAAA,OAAA/C,QAAAC,QAAAuE,GAAAA,EAAA9C,KAAA8C,EAAA9C,KAAA+C,GAAAA,EAAAD,wCEavD,SAAAE,EAAiBC,EAAM1D,EAAOiC,GACpC,IAAKyB,EAAKC,EAAG,CACZ,GAAI1B,aAAJ2B,EAA4B,CAC3B,IAAI3B,EAAM0B,EAOT,YADA1B,EAAM4B,EAAIJ,EAAQK,KAAK,KAAMJ,EAAM1D,IALvB,EAARA,IACHA,EAAQiC,EAAM0B,GAEf1B,EAAQA,EAAM8B,CAKf,CACD,GAAI9B,GAASA,EAAMxB,KAElB,YADAwB,EAAMxB,KAAKgD,EAAQK,KAAK,KAAMJ,EAAM1D,GAAQyD,EAAQK,KAAK,KAAMJ,EAAM,IAGtEA,EAAKC,EAAI3D,EACT0D,EAAKK,EAAI9B,EACT,IAAc+B,EAAGN,EAAKG,EAClBG,GACHA,EAASN,EAEV,CACD,gBA5C4BnE,EAAQZ,OAsCnC,IAAAsF,EAAA,WAAA,IAAcC,EAAG,CAAA,EAUjB,GATAC,EAAO7D,QAAQ,SAACqD,EAAGS,GACjB,IAAUrD,EAAG4C,EAAEU,OAAOC,cACtBX,EAAE5C,KAAOA,EACT4C,EAAEY,MAAoB,MAAXZ,EAAEY,OAAoC,IAAnBZ,EAAEY,MAAMtE,OAAgB0D,EAAEU,OAASV,EAAEY,MACnEZ,EAAEvD,QAAS,EACX8D,EAASnD,GAAQ4C,CAClB,GAGoB,MAAjBa,EACF,IAAK,SAAWA,EAAe,CAC7B,MAAeA,EAAAA,CAAAA,EAAAA,EAAcrE,IAC7BsE,EAAE1D,KAAOZ,EACTsE,EAAErE,QAAS,EACX8D,EAAS/D,GAAKsE,CACf,CAGH,MAAO,CACL1E,QAASmE,EACTzF,KAASiG,EA3DgC,EAC3CP,EAAyB5E,EAAjB4E,OAAQQ,EAASpF,EAAToF,KACGH,EAAG7F,EAAOC,WAAW4F,gBAuBxB,GACIG,GAqECC,EArEDD,EAqEQE,WArEnBT,GACP,IAAMlE,EAvBc,SAACH,EAAS+E,GAC9B,MAAe,CAAf,EAUA,GATAA,EAAIxE,QAAQ,SAACkC,EAAG4B,GACd,MAAUrE,EAAQqE,GACRrD,EAAG4C,EAAEU,OAAOC,cACP,MAAXX,EAAEY,QACJZ,EAAEY,MAAQZ,EAAEU,QAEdU,EAAOhE,GAAQyB,CAChB,GAEoB,MAAjBgC,EACF,IAAK,IAALrE,OAA+B,CAC7B,IAAMsE,EAAID,EAAcrE,GAClBY,EAAO0D,EAAEJ,OAAOC,cACtBS,EAAOhE,GAAQ0D,EAAExC,KAClB,CAEH,OAAO8C,CACR,CAIWC,CAAcb,EAAQQ,EAAKP,IADD,OAGT7F,QAAAA,QAAAA,EAAc,OAAQ2B,EAAGkE,EAAGzF,yBAHnBsG,EAAA9F,EAAA,GAGzB2C,EAEX3C,EAAA,GAAoB,IAAhB2C,EAAOT,MACT6D,QAAQC,IAAIjD,KAAKC,UAAUL,EAAQ,KAAM,IAE3C4C,EAAQU,KAAKH,EARuB,EASrC,KA6DO,EACT,WAAgB1F,GACf,IACC,OAAS6E,EAAIQ,EAAM3E,QAElB,IADAV,EAASsF,EAAKT,KACA7E,EAAOkB,KAAM,CAC1B,MAxD0B4E,EAwDP9F,aAvDhBqE,GAA0C,EAAbyB,EAAS1B,GA2DxC,YADApE,EAAOkB,KAAK6E,EAAQjG,IAAWA,EAASoE,EAAQK,KAAK,KAAMJ,EAAO,IAA1BE,EAAuC,KAF/ErE,EAASA,EAAOwE,CAKjB,CAEEL,EACHD,EAAQC,EAAM,EAAGnE,GAEjBmE,EAAOnE,CAIR,CAFC,MAAOH,GACRqE,EAAQC,IAASA,EAAO,IAAZE,GAA0B,EAAGxE,EACzC,CAvEI,IAAwBiG,CAwE7B,CACDC,GACO5B,GAxHqC,OAAA3E,QAAAC,QAAAuG,GAAAA,EAAA9E,KAAA8E,EAAA9E,KAAAwD,GAAAA,IAlBtC,OAAA7E,GAAA,OAAAL,QAAAM,OAAAD,EAAA,CAiHA,IAAgBwF,EAAOC,EACjBnB,EAAMrE,GAlHZ,EAAA,qBAA4B,WAClC,SAAiBuE,IACjB,CAgCA,OAhCAA,EAAM4B,UAAU/E,KAAO,SAASgF,EAAaC,GAC5C,MAAYnG,EAAG,IAAfqE,EACW5D,EAAG2F,KAAKhC,EACnB,GAAI3D,EAAO,CACV,MAAM4F,EAAmB,EAAR5F,EAAYyF,EAAcC,EAC3C,GAAIE,EAAU,CACb,IACCnC,EAAQlE,EAAQ,EAAGqG,EAASD,KAAK5B,GAGjC,CAFC,MAAO3E,GACRqE,EAAQlE,EAAQ,EAAGH,EACnB,CACD,OACAG,CAAA,CACA,WAED,CAeD,OAdAoG,KAAK9B,EAAI,SAASgC,GACjB,IACC,MAAW5D,EAAG4D,EAAM9B,EACN,EAAV8B,EAAMlC,EACTF,EAAQlE,EAAQ,EAAGkG,EAAcA,EAAYxD,GAASA,GAC5CyD,EACVjC,EAAQlE,EAAQ,EAAGmG,EAAWzD,IAE9BwB,EAAQlE,EAAQ,EAAG0C,EAIpB,CAFC,MAAO7C,GACRqE,EAAQlE,EAAQ,EAAGH,EACnB,CACD,EAEDG,CAAA,EAEDqE,CAAA,CAnCkC,kBCsBJkC,EAASnH,OACtC,IAAUY,EAAG,KADiCyC,EAExB,QAAlBrD,EAAOa,OAFmCT,QAAAC,iBAUvB8G,EAASnH,OAChC,IAAQe,EAAmBf,EAAnBe,MAAOC,EAAYhB,EAAZgB,QACT8E,OAASqB,GAOf,OANe,MAAXrB,EAAE5E,QACJ4E,EAAE5E,MAAQlB,EAAOC,WAAWiB,OAEf,MAAX4E,EAAEjE,QACJiE,EAAEjE,MAAQ,IAERiE,EAAEsB,MAAQ,IAAiB,IAAZtB,EAAEuB,qBACZ,MAEOC,QAAAA,QAAAA,EAAavG,EAAOC,EAAS8E,kBAAvCjC,GACN,IAAKtC,EAAG,KAbgCqF,EAAA,WAAA,GAc9B,OAAN/C,yBACQ0D,EAAa1D,EAAE/D,KAAME,IAfO8B,KAAA,SAAA0F,GAetCjG,EAAAiG,EAEAxH,EAAOqB,MAAQ,CACboG,SAAa,GACbC,gBAAkB7D,EAAE6D,YACpBC,YAAa7B,EACbhG,KAAa,GACbsB,QAAa,KAEuB,IAAlCpB,EAAOC,WAAW+D,cACpBhE,EAAOqB,MAAMvB,KAAOyB,EAAEzB,KACtBE,EAAOqB,MAAMD,QAAUG,EAAEH,SAE3BG,EAAEmG,WAAkB7D,EAAAA,CAAAA,EAAAA,EAAE6D,WA5BgB,GAAA,sCA8BxC,OAAOnG,CA9BiC,GA8BjCA,CA9BiC,sCAPvBqG,CAAST,EAASnH,IAHW8B,KAAA,SAAA+F,GAG5CjH,EAH4CiH,CAAA,GAAAzH,QAAAC,iBA2CnB8G,EAASnH,GAAQ,IAC5C,IAAQe,EAAwBf,EAAxBe,MAAO+G,EAAiB9H,EAAjB8H,aACP5G,EAAUlB,EAAOC,WAAjBiB,MACF6G,GAAW7G,EAAMiB,OAAUjB,IAAAA,EAAMkB,MAAOuD,cAHF,OAAAvF,QAAAC,QAYzB2H,EAAiBjH,EAAO+G,EAAcC,EAAO,KAPlD,CACZ/E,GAAI,CACFiF,MAAQd,EAAQC,KAAO,EACvBc,MAAQf,EAAQgB,MAChBC,OAA2B,MAAlBjB,EAAQiB,QAA0BjB,EAAQiB,WATXtG,KAAA,SAYtChC,GAGN,MAAa,KACTA,EAAAA,WAAAA,GAAS,OAATA,EAhBwC,OAAAM,QAAAC,QAiB3BkH,EAAazH,EAAME,IAjBQ8B,KAAA,SAAAuG,GAkB1CrI,EAAOqB,MAAQ,CACboG,SAAa,GACbC,WAAa,GACbC,YAAa,CAAA,EACb7H,MALFc,EAAAyH,GAKsBvI,KACpBsB,QAAaR,EAAOQ,QAvBoB,GAgBxCtB,sCAUJ,OAAOc,CA1BqC,GA0BrCA,CA1BqC,EAjC/BgH,OAAAA,GAAAA,OAAAA,QAAAA,OAAAA,EAAAA,CAAAA,CALIU,CAAanB,EAASnH,IALO8B,KAAA,SAAAyG,GAK5C3H,EAL4C2H,CAAA,GAAA,OAAAnI,QAAAC,QAAAgD,GAAAA,EAAAvB,KAAAuB,EAAAvB,KAAA,WAO9C,OAP8ClB,CAAA,GAOvCA,EAgET,OAAAH,GAAA,OAAAL,QAAAM,OAAAD,EAAA,CAAA,ECjEe+H,WAAaC,EAAWzI,OACrC,MAD6CqD,EAEvB,QAAlBrD,EAAOa,OAFkCT,QAAAC,QAUhCqI,SAAYD,EAAWzI,GAAQ,IAC5C,IACAmH,IADgCnH,EAAOC,WAAjBiB,EAAAA,EAAAA,MAEtB,GAAkB,UAAduH,GACFtB,EAAewB,EAAAA,CAAAA,EAHjB1G,EAAQ0G,eAIEzH,MAAQA,OAGhB,IAAsB,KADtBiG,EAAUnH,EAAOqB,MAAMqG,WAAWe,IACtBpB,KACV,OAAAjH,QAAAC,QAAO,MATiC,OAY5BuI,QAAAA,QAAAA,EAAezB,EAASnH,GAtB3BwI,OAAAA,GAAAA,OAAAA,QAAAA,OAAAA,EAAAA,CAAAA,CAGUE,CAAWD,EAAWzI,IAHA8B,KAAA,SAAA+G,GAG3CC,EAAYD,CAH+B,4BA0BhBJ,EAAWzI,GAAQ,IAChD,IAAQe,EAAwBf,EAAxBe,MAAO+G,EAAiB9H,EAAjB8H,aACP5G,EAAUlB,EAAOC,WAAjBiB,SAESA,EAAMiB,OAAT,IAAmBjB,EAAMkB,MAAOuD,cAJE,OAS7BqC,QAAAA,QAAAA,EAAiBjH,EAAO+G,EAAcC,EAAOU,EADhD,CAAEzF,GAAI,CAAEkF,MAAOlI,EAAOC,WAAW0I,aAAaR,UARdrG,KAAA,SAS1ChC,GAEN,IAAIc,EAAS,KACTd,EAAAA,WAAAA,GAAS,OAATA,EACayH,OAAAA,QAAAA,QAAAA,EAAazH,EAAME,IAAlCY,KAAAA,SAAAA,GACAZ,EAAOqB,MAAQ,CACboG,SAAa,GACbC,WAAa,CAFA,EAGbC,YAAa,GACb7H,MALFc,EAAAyH,GAKsBvI,KACpBsB,QAAaR,EAAOQ,QAnBwB,EAuBhD,CAXItB,GAWJ,OAAAwF,GAAAA,EAAAxD,KAAAwD,EAAAxD,KAAA,WAAA,OAvBgDlB,CAAA,GAuBzCA,CAvByC,sCArBzBmI,CAAeN,EAAWzI,IAA/C8I,KAAAA,SAAAA,GAAAA,GAL2C,GAO7C,OAAA1I,QAAAC,QAAAgD,GAAAA,EAAAvB,KAAAuB,EAAAvB,KAAA,WAAA,OAP6CgH,CAAA,GAOtCA,kDCdaE,EAAc/I,EAAYgJ,GAAU,IACxD,MAAMlI,EAAQmI,IAEe,MAAzBF,EAAaG,WACfH,EAAaG,SAAW,QAJ8B,IAAA9F,EAM9B,QAAtBpD,EAAWY,OACEuI,QAAAA,iBAOOrI,EAAOiI,EAAc/I,GAAY,IAAA,OAAAG,QAAAC,QACzCgJ,EAAStI,EAAOiI,IAA1BnF,KAAAA,SAAAA,GAsBN,MArBa,CACXhD,OAAQZ,EAAWY,OAEnBE,MAAAA,EACAC,QAAW6C,EAAE7C,QACbsI,QAAWzF,EAAEyF,QACbC,UAAW,KACXP,aAAAA,EACA/I,WAAAA,EAEAoB,MAAO,CACLoG,SAAa,GACbC,WAAa,CAFR,EAGLC,YAAa,CAAA,EAEb7H,KAAS,GACTsB,QAAS,CAAA,GAGXoI,GAAIC,OArBmD,sCAPxCL,CAAUrI,EAAOiI,EAAc/I,IAA9CD,KAAAA,SAAAA,GAAAA,GAPsD,GASvC0J,QAAAA,iBA+BW3I,EAAOiI,EAAc/I,EAAYgJ,GAAU,IAAA,OAGnDU,QAAAA,QAAAA,EAAa5I,EAAOd,EAAW2J,eAAgBZ,IAA/DhI,KAAAA,SAAAA,0BACqB6I,EAAmB9I,EAAOC,EAASf,EAAWiB,MAAO+H,IAA1EnB,KAAAA,SAAAA,GAuBJ,MAtBa,CACXjH,OAAQZ,EAAWY,OAEnBE,MAAAA,EACAC,QAAAA,EACA8G,aAAAA,EACAwB,QAAW,KACXC,UAAW,KACXP,aAAAA,EACA/I,WAAAA,EAEAoB,MAAO,CACLoG,SAAa,GACbC,WAAa,CAAA,EACbC,YAAa,CAAA,EAEb7H,KAAS,GACTsB,QAAS,CANJ,GASPoI,GAAIC,OAzBiE,wCA/BtDC,CAAc3I,EAAOiI,EAAc/I,EAAYgJ,IAA9DjJ,KAAAA,SAAAA,GAAAA,GATsD,GAWxD,OAAAI,QAAAC,QAAAgD,GAAAA,EAAAvB,KAAAuB,EAAAvB,KAAA,WAAA,OAXwD9B,CAAA,GAWjDA,EA2BR,OAAAS,GAAA,OAAAL,QAAAM,OAAAD,EAAA,CAAA"}