{"version":3,"file":"index.modern.mjs","sources":["../src/commonHandler.js","../src/updateTableRows.js","../src/cellEdit.js","../src/text2Float.js","../src/prepFormData.js","../src/fetchTableRows.js","../src/scrollTable.js","../src/setup.js","../src/distinctValues.js","../src/casTableUnique.js","../src/sasTableUnique.js","../src/uploadData.js","../src/saveTable.js"],"sourcesContent":["/*\r\n * Copyright © 2022, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @description Run init, main or term handlers\r\n * @async\r\n * @module commonHandler\r\n * @category restafedit/core\r\n * @param {string} type   - type of exit (init|main|term)\r\n * @param {rowObject} data        - rowObject\r\n * @param {number} rowIndex    - client-side Row Index\r\n * @param {appEnv} appEnv      - app Environment from setup\r\n * @returns {promise}     - [data, status]\r\n * @example\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function commonHandler (type, data, rowIndex, appEnv) {\r\n  const { handlers } = appEnv.appControl.editControl;\r\n  if (handlers[type] == null) {\r\n    return [data, { statusCode: 0, msg: null }];\r\n  } else {\r\n    const [newDataRow, status] = await handlers[type](data, rowIndex, appEnv, type);\r\n    return [newDataRow, status];\r\n  }\r\n};\r\nexport default commonHandler;\r\n","import { casUpdateData, computeUpdateData } from '@sassoftware/restaflib';\r\n/**\r\n * @description Update the row on the server\r\n * @async\r\n * @module updateTableRows\r\n * @category restafedit/core\r\n * @param {rowObject} data  - data as a rowObject or Array of rowObjects\r\n * @param {appEnv} appEnv   - app Environment object from setup\r\n * @returns {promise}       - {msg: string, statusCode: 0|1|2}\r\n * @example\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function updateTableRows (data, appEnv) {\r\n  let result;\r\n  const byvars = appEnv.appControl.byvars;\r\n  if (byvars === null || byvars.length === 0) {\r\n    return [null, { msg: 'Error: Please specify a by variable', statusCode: 1 }];\r\n  }\r\n\r\n  if (Array.isArray(data) === true) {\r\n    for (let i = 0; i < data.length; i++) {\r\n      result = await _updateData(data[i], appEnv);\r\n    }\r\n  } else {\r\n    result = await _updateData(data, appEnv);\r\n  }\r\n  return result;\r\n}\r\n\r\nfunction makePayload (data, appEnv) {\r\n  const { table, byvars } = appEnv.appControl;\r\n  const columns = appEnv.state.columns;\r\n\r\n  const t = {};\r\n  for (const k in data) {\r\n    if (!(k === '_index_' || k === '_rowIndex') && columns[k].custom === false) {\r\n      t[k] = data[k];\r\n    };\r\n  };\r\n\r\n  const w = {};\r\n  byvars.forEach((k) => {\r\n    w[k] = t[k];\r\n  });\r\n  const payload = {\r\n    table,\r\n    data : t,\r\n    where: w\r\n  };\r\n  return payload;\r\n}\r\n\r\nasync function _updateData (data, appEnv) {\r\n  const { store, session } = appEnv;\r\n  const handler = (appEnv.source === 'cas') ? casUpdateData : computeUpdateData;\r\n  const payload = makePayload(data, appEnv);\r\n  const status = await handler(store, session, payload);\r\n  return status;\r\n}\r\n\r\nexport default updateTableRows;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport text2Float from './text2Float';\r\nimport commonHandler from './commonHandler';\r\nimport updateTableRows from './updateTableRows';\r\n\r\n/**\r\n * @description Process edit of a cell and optionally save the data\r\n * @async\r\n * @module cellEdit\r\n * @category restafedit/core\r\n * @param {string} name     - name of the field (lower case)\r\n * @param {*} value         - the new value for name field\r\n * @param {number} rowIndex - row Index ( index in the data array on client)\r\n * @param {rowObject} data  - RowObject for the entire row prior to change\r\n * @param {appEnv} appEnv   - app Environment from setup\r\n * @returns {promise}       - {data: updated data, status: status }\r\n * @example\r\n * data schema {column1: value, column2, value,...}\r\n * status schema {statusCode: 0|1|2, msg: some string}\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function cellEdit (name, value, rowIndex, data, appEnv) {\r\n  /* do not modify the data directly. caller will probably do a setState */\r\n\r\n  let newDataRow = { ...data };\r\n  const columns = appEnv.state.columns;\r\n  const { handlers, autoSave } = appEnv.appControl.editControl;\r\n\r\n  newDataRow[name] = text2Float(value, columns[name]);\r\n  let status = { statusCode: 0, msg: '' };\r\n\r\n  if (handlers[name] != null) {\r\n    const r = await handlers[name](newDataRow, name, rowIndex, appEnv);\r\n    newDataRow = r[0];\r\n    status = r[1];\r\n    if (status.statusCode === 2) {\r\n      return { data: r[0], status };\r\n    }\r\n  }\r\n  let r = await commonHandler('main', newDataRow, rowIndex, appEnv);\r\n  if (autoSave === true) {\r\n    r = await commonHandler('term', r[0], rowIndex, appEnv);\r\n    status = r[1];\r\n    if (status.statusCode === 2) {\r\n      return { data: r[0], status };\r\n    }\r\n    status = await updateTableRows(r[0], appEnv);\r\n  }\r\n  newDataRow = r[0];\r\n\r\n  if (appEnv.appControl.cachePolicy === true) {\r\n    appEnv.state.data[data._rowIndex] = newDataRow;\r\n  }\r\n\r\n  return ({ data: newDataRow, status });\r\n}\r\nexport default cellEdit;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nfunction text2Float (value, f) {\r\n  let svalue = value;\r\n  const t = f.Type.toLowerCase();\r\n  if (typeof svalue === 'string' && (t === 'decimal' || t === 'number' || t === 'double' || t === 'float')) {\r\n    svalue = parseFloat(value * 1.0);\r\n    if (isNaN(value) === true) {\r\n      value = 0;\r\n    }\r\n  }\r\n  return svalue;\r\n}\r\nexport default text2Float;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/*\r\n* output\r\n* extended columns and data ready for use in dataform and table\r\n*/\r\nimport commonHandler from './commonHandler';\r\n/**\r\n * @description reduce fetch results\r\n * @private\r\n * @async\r\n * @module prepFormData\r\n * @param {object} result - result from casFetchRow(rows and schema)\r\n * @param {object} appEnv - app Environment from setup\r\n * @returns {promise}     - {columns: eColumns, rowsObject: newRows}\r\n */\r\nasync function prepFormData (result, appEnv) {\r\n  const { schema, rows } = result;\r\n  const customColumns = appEnv.appControl.customColumns;\r\n  let status = { statusCode: 0, msg: 'Initialization was successful' };\r\n\r\n  const makeRowObject = (columns, row, rown) => {\r\n    const rowObj = { _rowIndex: rown };\r\n    row.forEach((r, i) => {\r\n      const s = columns[i];\r\n      const name = s.Column.toLowerCase();\r\n      rowObj[name] = r;\r\n    });\r\n\r\n    if (customColumns != null) {\r\n      for (const k in customColumns) {\r\n        const c = customColumns[k];\r\n        const name = c.Column.toLowerCase();\r\n        rowObj[name] = c.value;\r\n      }\r\n    }\r\n    return rowObj;\r\n  };\r\n\r\n  const newRows = [];\r\n  for (let i = 0; i < rows.length; i++) {\r\n    const t = makeRowObject(schema, rows[i], i);\r\n\r\n    const [t1, statusi] = await commonHandler('init', t, i, appEnv);\r\n    status = statusi;\r\n    newRows.push(t1);\r\n  };\r\n\r\n  // extend column and make it an object\r\n  const eColumns = {};\r\n  schema.forEach((s, i) => {\r\n    const name = s.Column.toLowerCase();\r\n    s.name = name;\r\n    s.Label = (s.Label == null || s.Label.length === 0) ? s.Column : s.Label;\r\n    if (s.Type == null) {\r\n      s.Type = (s.type == null) ? 'double' : s.type;\r\n    }\r\n    s.custom = false;\r\n    eColumns[name] = s;\r\n  });\r\n\r\n  // add computed columns to the array.\r\n  if (customColumns != null) {\r\n    for (const k in customColumns) {\r\n      const c = { ...customColumns[k] };\r\n      c.name = k;\r\n      c.custom = true;\r\n      eColumns[k] = c;\r\n    }\r\n  }\r\n\r\n  return {\r\n    columns: eColumns,\r\n    data   : newRows,\r\n    status\r\n  };\r\n}\r\nexport default prepFormData;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { casFetchRows, computeFetchData } from '@sassoftware/restaflib';\r\n\r\nimport prepFormData from './prepFormData';\r\n/**\r\n * @description Fetch new records based on control argument\r\n * @async\r\n * @private\r\n * @module fetchTableRows\r\n * @category restafedit/core\r\n * @param {fetchControl} control - info for records to retrieve\r\n * @param {appEnv} appEnv - appEnv\r\n * @returns {promise}  - { data:data, columns:ecolumns, pagination: pagination}\r\n * @example\r\n *   let control = {from: 10, count:50, format: false};\r\n *   let r = await fetchTableRows(control, appEnv);\r\n *   r is a fetchResult object\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function fetchTableRows (control, appEnv) {\r\n  let result = null;\r\n  if (appEnv.source === 'cas') {\r\n    result = await icasRows(control, appEnv);\r\n  } else {\r\n    result = await icomputeRows(control, appEnv);\r\n  }\r\n  return result;\r\n}\r\n\r\nasync function icasRows (control, appEnv) {\r\n  const { store, session } = appEnv;\r\n  const c = { ...control };\r\n  if (c.from <= 0 || c.next === -1) {\r\n    return null;\r\n  }\r\n  if (c.where == null) {\r\n    c.where = ' ';\r\n  }\r\n  const r = await casFetchRows(store, session, c);\r\n\r\n  let t = null;\r\n  if (r !== null) {\r\n    t = await prepFormData(r.data, appEnv);\r\n\r\n    appEnv.state = {\r\n      modified   : [],\r\n      pagination : { ...r.pagination },\r\n      currentPage: c,\r\n      data       : [],\r\n      columns    : []\r\n    };\r\n    if (appEnv.appControl.cachePolicy === true) {\r\n      appEnv.state.data = t.data;\r\n      appEnv.state.columns = t.columns;\r\n    }\r\n    t.pagination = { ...r.pagination };\r\n  }\r\n  return t;\r\n}\r\n\r\nasync function icomputeRows (control, appEnv) {\r\n  const { store, tableSummary } = appEnv;\r\n  const { table } = appEnv.appControl;\r\n  const tname = `${table.libref}.${table.name}`.toLowerCase();\r\n  // eslint-disable-next-line prefer-const\r\n  let payload = {\r\n    qs: {\r\n      start : control.from - 1,\r\n      limit : control.count,\r\n      format: (control.format != null) ? false : control.format\r\n    }\r\n  };\r\n  const data = await computeFetchData(store, tableSummary, tname, null, payload);\r\n  ;\r\n\r\n  let result = null;\r\n  if (data !== null) {\r\n    result = await prepFormData(data, appEnv);\r\n    appEnv.state = {\r\n      modified   : [],\r\n      pagination : {},\r\n      currentPage: {},\r\n      data       : result.data,\r\n      columns    : result.columns\r\n    };\r\n  }\r\n  return result;\r\n}\r\nexport default fetchTableRows;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n// import fetchTableRows from './fetchTableRows';\r\nimport { computeFetchData, casFetchRows } from '@sassoftware/restaflib';\r\nimport prepFormData from './prepFormData';\r\n/**\r\n * @description Simplify scrolling using next|prev|top\r\n * @async\r\n * @module scrollTable\r\n * @category restafedit/core\r\n * @param {string} direction direction(next|prev|first)\r\n * @param {appEnv} appEnv\r\n * @param {object=} payload  override pogination with custom scrolling\r\n * @returns {promise}  result ready for display or null if it did not scroll\r\n * @example\r\n *  let r = await scrollTable('next', appEnv);\r\n *\r\n *  if ( r === null) {\r\n *     handle when no data was writtten\r\n *  } else {\r\n *     handle new data\r\n * }\r\n *\r\n * Make sure you handle exceptions that are thrown.\r\n *\r\n * For custom scrolling, pass the scrolling information in the optional third parameter.\r\n * The content of the payload depends on whether the source is cas or compute.\r\n * For compute see the documentation for rowset in compute service.<https://developer.sas.com/apis/rest/Compute/#get-a-row-set-from-a-data-set>\r\n * CAS payload is not as rich the rowset for compute service\r\n * The payload for CAS is as follows\r\n *  { start: <number>\r\n *    count: <number>\r\n *    format: true|false,\r\n *    where: <where string>\r\n * };\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function scrollTable (direction, appEnv, payload) {\r\n  let fetchResults;\r\n  if (appEnv.source === 'cas') {\r\n    fetchResults = await icasScroll(direction, appEnv, payload);\r\n  } else {\r\n    fetchResults = await icomputeScroll(direction, appEnv, payload);\r\n  }\r\n  return fetchResults;\r\n}\r\n\r\nasync function icasScroll (direction, appEnv, payload) {\r\n  const { store, session } = appEnv;\r\n  const { initialFetch, table } = appEnv.appControl;\r\n  let control;\r\n\r\n  if (direction === 'first') {\r\n    control = { ...initialFetch };\r\n  } else if (direction !== null) {\r\n    control = { ...appEnv.state.pagination[direction] };\r\n    if (control.next === -1 || control.from <= 0) {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  if (payload != null) {\r\n    control = { ...payload };\r\n  }\r\n\r\n  control.table = table;\r\n  const r = await casFetchRows(store, session, control);\r\n\r\n  let t = null;\r\n  if (r !== null) {\r\n    t = await prepFormData(r.data, appEnv);\r\n    appEnv.state = {\r\n      modified   : [],\r\n      pagination : { ...r.pagination },\r\n      currentPage: control,\r\n      data       : [],\r\n      columns    : []\r\n    };\r\n    if (appEnv.appControl.cachePolicy === true) {\r\n      appEnv.state.data = t.data;\r\n      appEnv.state.columns = t.columns;\r\n    }\r\n    t.pagination = { ...r.pagination };\r\n    return t;\r\n  }\r\n}\r\n\r\nasync function icomputeScroll (direction, appEnv, payload) {\r\n  const { store, tableSummary } = appEnv;\r\n  const { table, initialFetch } = appEnv.appControl;\r\n  let control = null;\r\n\r\n  const tname = `${table.libref}.${table.name}`.toLowerCase();\r\n\r\n  if (payload == null) {\r\n    if (direction === 'first') {\r\n      control = { ...initialFetch };\r\n    }\r\n  } else {\r\n    control = { ...payload };\r\n  }\r\n\r\n  // eslint-disable-next-line prefer-const\r\n\r\n  const data = await computeFetchData(store, tableSummary, tname, direction, control);\r\n\r\n  let result = null;\r\n  if (data !== null) {\r\n    result = await prepFormData(data, appEnv);\r\n    appEnv.state = {\r\n      modified   : [],\r\n      pagination : {},\r\n      currentPage: {},\r\n      data       : result.data,\r\n      columns    : result.columns\r\n    };\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nexport default scrollTable;\r\n","/* eslint-disable prefer-const */\r\n\r\nimport { initStore } from '@sassoftware/restaf';\r\nimport { casSetup, computeSetup, computeSetupTables, caslRun } from '@sassoftware/restaflib';\r\nimport deepcopy from 'deepcopy';\r\n\r\n/**\r\n * @description Setup an Edit session\r\n * @async\r\n * @module setup\r\n * @category restafedit/core\r\n * @param {logonPayload} logonPayload  - information for connecting to Viya\r\n * @param {appControl} appControl      - control information\r\n *\r\n * @returns {promise}  returns appEnv to control the flow\r\n * @alias module: setup\r\n * @example\r\n *  const appEnv = await setup(logonPayload, appControl);\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n *\r\n */\r\n\r\nasync function setup (logonPayload, appControl, preamble) {\r\n  const store = initStore();\r\n  let appEnv;\r\n  if (logonPayload.authType == null) {\r\n    logonPayload.authType = 'code';\r\n  }\r\n  if (appControl.source === 'cas') {\r\n    appEnv = await icasSetup(store, logonPayload, appControl);\r\n  } else {\r\n    appEnv = await icomputeSetup(store, logonPayload, appControl, preamble);\r\n  }\r\n  return appEnv;\r\n}\r\n\r\nasync function icasSetup (store, logonPayload, appControl, preamble) {\r\n  const r = await casSetup(store, logonPayload);\r\n  let appEnv = {\r\n    source: appControl.source,\r\n\r\n    store,\r\n    session  : r.session,\r\n    servers  : r.servers,\r\n    restaflib: null,\r\n\r\n    logonPayload,\r\n    appControl: deepcopy(appControl),\r\n\r\n    state: {\r\n      modified   : [],\r\n      pagination : {},\r\n      currentPage: {},\r\n\r\n      data   : {},\r\n      columns: {}\r\n    },\r\n\r\n    id: Date()\r\n  };\r\n  if (preamble != null) {\r\n    const rx = await caslRun(store, r.session, preamble);\r\n    if (rx.details.statusCode !== 0) {\r\n      console.log(rx);\r\n      // eslint-disable-next-line no-throw-literal\r\n      throw 'Preamble failed. Please see console';\r\n    };\r\n  }\r\n  return appEnv;\r\n};\r\n\r\nasync function icomputeSetup (store, logonPayload, appControl, preamble) {\r\n  // eslint-disable-next-line prefer-const\r\n  ;\r\n  let session = await computeSetup(store, appControl.computeContext, logonPayload);\r\n  let tableSummary = await computeSetupTables(store, session, appControl.table, preamble);\r\n  let appEnv = {\r\n    source: appControl.source,\r\n\r\n    store,\r\n    session,\r\n    tableSummary,\r\n\r\n    servers  : null,\r\n    restaflib: null,\r\n\r\n    logonPayload,\r\n    appControl: deepcopy(appControl),\r\n\r\n    state: {\r\n      modified   : [],\r\n      pagination : {},\r\n      currentPage: {},\r\n\r\n      data   : {},\r\n      columns: {}\r\n    },\r\n\r\n    id: Date()\r\n  };\r\n  return appEnv;\r\n}\r\n\r\nexport default setup;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport casTableUnique from './casTableUnique';\r\nimport sasTableUnique from './sasTableUnique';\r\n\r\n/**\r\n * @description Get unique values for a specific column\r\n * @async\r\n * @module distinctValues\r\n * @category restafedit/core\r\n * @param {object} table {caslib: xxx, name: yyy}\r\n * @param {string} columnName    column name\r\n * @param {appEnv} appEnv   - app Environment from setup\r\n * @returns {promise}       - {an array of unique values }\r\n * @example\r\n *  let selectList = await distinctValues('company', appEnv))\r\n *  This is useful to get a list of unique values for selected columns.\r\n *  {company:['IBM', 'Microsoft', 'SAS'] }\r\n */\r\n\r\nasync function distinctValues (table, columnName, appEnv, payload) {\r\n  let data;\r\n  if (appEnv.source === 'cas') {\r\n    data = await casTableUnique(table, columnName, appEnv, payload);\r\n  } else {\r\n    data = await sasTableUnique(table, columnName, appEnv, payload);\r\n  }\r\n  return data;\r\n};\r\nexport default distinctValues;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nimport { caslRun } from '@sassoftware/restaflib';\r\n\r\n/**\r\n * @description Get unique values for a specific column\r\n * @async\r\n * @private\r\n * @module casTableUnique\r\n * @category restafedit/core\r\n * @param {object} table object\r\n * @param {string} columnName    column name\r\n * @param {appEnv} appEnv   app Environment from setup\r\n * @returns {promise}       {an array of unique values }\r\n * @example\r\n *  let selectList = await casTableUnique('company, appEnv))\r\n *  This is useful to get a list of unique values for selected columns.\r\n *  {columnName:[ array of unquew values] }\r\n */\r\n\r\nasync function casTableUnique (table, columnName, appEnv, payload) {\r\n  const { store, session } = appEnv;\r\n\r\n  const src = `\r\n  results = selectionLists(_args_.column,_args_.table.caslib, _args_.table.name);\r\n  send_response({casResults = {data=results}});\r\n  `\r\n  ;\r\n  const args = {\r\n    table,\r\n    column: columnName\r\n  };\r\n\r\n  const result = await caslRun(store, session, src, args, true);\r\n  if (result.results.casResults.data.statusCode !== 0) {\r\n    // eslint-disable-next-line no-throw-literal\r\n    throw 'Failed to create unique list';\r\n  }\r\n\r\n  const data = result.results.casResults.data.data;\r\n\r\n  return data;\r\n};\r\nexport default casTableUnique;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @description Get unique values for a specific column(sas table)\r\n * @async\r\n * @private\r\n * @module sasTableUnique\r\n * @category restafedit/core\r\n * @param {string} columnName    column name\r\n * @param {appEnv} appEnv   app Environment from setup\r\n * @returns {promise}       {an array of unique values }\r\n * @example\r\n *  let selectList = await casTableUnique('company, appEnv))\r\n *  This is useful to get a list of unique values for selected columns.\r\n *  {columnName:[ array of unquew values] }\r\n */\r\n\r\nasync function sasTableUnique (columnName, appEnv, payload) {\r\n  const data = {};\r\n  data[columnName] = [];\r\n  return data;\r\n};\r\nexport default sasTableUnique;\r\n","/* eslint-disable no-tabs */\r\n/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { casUpload, casAppendTable, computeRun } from '@sassoftware/restaflib';\r\n\r\n/**\r\n * @description Upload data (peding: upload to sas table)\r\n * @async\r\n * @module uploadData\r\n * @category restafedit/core\r\n * @param {object} output table\r\n * @param {array}  data\r\n * @param {array}  drop fields to drop from the output\r\n * @param {object} addon columns additional columns\r\n * @param {appEnv} appEnv   - app Environment from setup\r\n * @param {object=} masterTable if specified the data will be appended to this table\r\n * @param {boolean} saveFlag if true, the masterTable will be saved\r\n * @returns {promise}       - {an array of unique values }\r\n * @example\r\n *  let selectList = await distinctValues('company', appEnv))\r\n *  This is useful to get a list of unique values for selected columns.\r\n *  {company:['IBM', 'Microsoft', 'SAS'] }\r\n */\r\n\r\nasync function uploadData (table, data, drop, addon, appEnv, masterTable, saveFlag) {\r\n  const { store, session } = appEnv;\r\n  // eslint-disable-next-line prefer-const\r\n  let t = Object.keys(data[0]);\r\n  let dropArray = ['_index_', '_rowIndex'];\r\n  if (drop !== null) {\r\n    dropArray = dropArray.concat(drop);\r\n  }\r\n  const columns = t.filter(c => {\r\n    return !(dropArray.indexOf(c) >= 0);\r\n  });\r\n  const tempCols = {};\r\n  columns.forEach(k => {\r\n    tempCols[k] = appEnv.state.columns[k];\r\n  });\r\n\r\n  let csvArray = null;\r\n  if (appEnv.source === 'cas') {\r\n    csvArray = columns.join(',') + '\\n';\r\n  };\r\n\r\n  for (let i = 0; i < data.length; i++) {\r\n    let temp = data[i];\r\n    temp = { ...temp, ...addon };\r\n    const valArray = [];\r\n    columns.forEach((c, l) => {\r\n      let v = temp[c];\r\n      if (typeof v === 'string') {\r\n        v = v.trim();\r\n      }\r\n      valArray[l] = v;\r\n    });\r\n    if (csvArray === null) {\r\n      csvArray = valArray.join(',') + '\\n';\r\n    } else {\r\n      csvArray = csvArray + valArray.join(',') + '\\n';\r\n    }\r\n  }\r\n  let result;\r\n  if (appEnv.source === 'cas') {\r\n    result = await _casTableUpload(\r\n      store,\r\n      session,\r\n      table,\r\n      csvArray,\r\n      masterTable,\r\n      saveFlag\r\n    );\r\n  } else {\r\n    result = await _computeUpload(\r\n      store,\r\n      session,\r\n      tempCols,\r\n      table,\r\n      csvArray\r\n    );\r\n  }\r\n  return result;\r\n}\r\n\r\nasync function _computeUpload (store, session, columns, table, csvArray) {\r\n  let src = `data ${table.libref}.${table.name}; INFILE datalines delimiter=',' ;\\n`;\r\n  let l = '';\r\n  let inx = 'INPUT ';\r\n  for (const k in columns) {\r\n    const c = columns[k];\r\n    inx = inx + c.Column + ' ';\r\n    if (c.Type === 'CHAR') {\r\n      const x = ` ${c.Column} $ ${c.length} \\n`;\r\n      l = l + ' ' + x;\r\n    }\r\n  }\r\n  if (l.length > 0) {\r\n    l = 'LENGTH ' + l + ';\\n';\r\n  };\r\n  inx = inx + ';\\n';\r\n\r\n  src = src + ';\\n' + l + inx + 'datalines;\\n' + csvArray + '\\n; run; proc print;run;\\n';\r\n  await computeRun(store, session, src);\r\n  return { msg: 'done', statusCode: 0 };\r\n}\r\nasync function _casTableUpload (store, session, table, csvArray, masterTable, saveFlag) {\r\n  const t = `${table.caslib}.${table.name}`;\r\n  let r = await casUpload(store, session, null, t, true, csvArray);\r\n  if (masterTable != null) {\r\n    r = await casAppendTable(store, session, table, masterTable, saveFlag);\r\n    return r;\r\n  } else {\r\n    return r;\r\n  }\r\n}\r\nexport default uploadData;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @description Save the current table to disk\r\n * @async\r\n * @module saveTable\r\n * @category restafedit/core\r\n * @param {appEnv} appEnv\r\n * @param {object=} table - save a table other than the default\r\n * @returns {promise}  Status object\r\n * @example\r\n * This is a noop for SAS Tables\r\n **/\r\n\r\nimport { casSaveTable } from '@sassoftware/restaflib';\r\n\r\nasync function saveTable (appEnv, table) {\r\n  const { store, session } = appEnv;\r\n\r\n  if (appEnv.source === 'compute') {\r\n    return { msg: 'Action does not apply to SAS 9 tables', statusCode: 0 };\r\n  }\r\n  const t = (table != null) ? table : appEnv.appControl.table;\r\n  await casSaveTable(store, session, t);\r\n  return { msg: 'Table saved', statusCode: 0 };\r\n}\r\nexport default saveTable;\r\n"],"names":["async","type","data","rowIndex","appEnv","handlers","appControl","editControl","statusCode","msg","newDataRow","status","updateTableRows","result","byvars","length","Array","isArray","i","_updateData","store","session","handler","source","casUpdateData","computeUpdateData","payload","table","columns","state","t","k","custom","w","forEach","where","makePayload","cellEdit","name","value","_extends","autoSave","f","svalue","Type","toLowerCase","parseFloat","isNaN","text2Float","r","commonHandler","cachePolicy","_rowIndex","prepFormData","schema","rows","customColumns","makeRowObject","row","rown","rowObj","Column","c","t1","statusi","newRows","push","s","Label","eColumns","control","from","next","casFetchRows","modified","pagination","currentPage","tableSummary","tname","libref","qs","start","limit","count","format","computeFetchData","icomputeRows","scrollTable","direction","fetchResults","initialFetch","icasScroll","logonPayload","preamble","initStore","authType","casSetup","servers","restaflib","deepcopy","id","Date","icasSetup","computeSetup","computeContext","computeSetupTables","icomputeSetup","distinctValues","columnName","args","column","caslRun","results","casResults","casTableUnique","sasTableUnique","uploadData","drop","addon","masterTable","saveFlag","Object","keys","dropArray","concat","filter","indexOf","tempCols","csvArray","join","temp","valArray","l","v","trim","caslib","casUpload","casAppendTable","_casTableUpload","src","inx","computeRun","_computeUpload"],"mappings":"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"}