{"version":3,"file":"index.umd.js","sources":["../src/commonHandler.js","../src/updateTableRows.js","../src/prepFormData.js","../src/fetchTableRows.js","../src/cellEdit.js","../src/text2Float.js","../src/scrollTable.js","../src/setup.js"],"sourcesContent":["/*\r\n * Copyright © 2022, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @description Run init, main or term handlers\r\n * @async\r\n * @module commonHandler\r\n * @category restafedit/core\r\n * @param {string} type   - type of exit (init|main|term)\r\n * @param {rowObject} data        - rowObject\r\n * @param {number} rowIndex    - client-side Row Index\r\n * @param {appEnv} appEnv      - app Environment from setup\r\n * @returns {promise}     - [data, status]\r\n * @example\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function commonHandler (type, data, rowIndex, appEnv) {\r\n  const { handlers } = appEnv.appControl.editControl;\r\n  if (handlers[type] == null) {\r\n    return [data, { statusCode: 0, msg: null }];\r\n  } else {\r\n    const [newDataRow, status] = await handlers[type](data, rowIndex, appEnv, type);\r\n    return [newDataRow, status];\r\n  }\r\n};\r\nexport default commonHandler;\r\n","\r\nimport { casUpdateData } from '@sassoftware/restaflib';\r\n/**\r\n * @description Update the row on the server\r\n * @async\r\n * @module updateTableRows\r\n * @category restafedit/core\r\n * @param {rowObject} data  - data as a rowObject\r\n * @param {appEnv} appEnv   - app Environment object from setup\r\n * @returns {promise}       - key is completion code\r\n * @example\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function updateTableRows (data, appEnv) {\r\n  const { store, session } = appEnv;\r\n  const { table, byvars } = appEnv.appControl.dataControl;\r\n  const columns = appEnv.state.columns;\r\n\r\n  if (byvars === null || byvars.length === 0) {\r\n    return;\r\n  }\r\n  const t = {};\r\n  for (const k in data) {\r\n    if (k !== '_index_' && columns[k].custom === false) {\r\n      t[k] = data[k];\r\n    };\r\n  };\r\n\r\n  const w = {};\r\n  byvars.forEach((k) => {\r\n    w[k] = t[k];\r\n  });\r\n  const payload = {\r\n    table,\r\n    data : t,\r\n    where: w\r\n  };\r\n\r\n  return await casUpdateData(store, session, payload);\r\n}\r\n\r\nexport default updateTableRows;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/*\r\n* output\r\n* extended columns and data ready for use in dataform and table\r\n*/\r\nimport commonHandler from './commonHandler';\r\n/**\r\n * @description reduce fetch results\r\n * @private\r\n * @async\r\n * @module prepFormData\r\n * @param {object} result - result from casFetchRow(rows and schema)\r\n * @param {object} appEnv - app Environment from setup\r\n * @returns {promise}     - {columns: eColumns, rowsObject: newRows}\r\n */\r\nasync function prepFormData (result, appEnv) {\r\n  const { schema, rows } = result;\r\n  const customColumns = appEnv.appControl.dataControl.customColumns;\r\n\r\n  const makeRowObject = (columns, row) => {\r\n    const rowObj = {};\r\n    row.forEach((r, i) => {\r\n      const s = columns[i];\r\n      const name = s.Column.toLowerCase();\r\n      if (s.Label == null) {\r\n        s.Label = s.Column;\r\n      }\r\n      rowObj[name] = r;\r\n    });\r\n\r\n    if (customColumns != null) {\r\n      for (const k in customColumns) {\r\n        const c = customColumns[k];\r\n        const name = c.Column.toLowerCase();\r\n        rowObj[name] = c.value;\r\n      }\r\n    }\r\n    return rowObj;\r\n  };\r\n\r\n  const newRows = [];\r\n  for (let i = 0; i < rows.length; i++) {\r\n    const t = makeRowObject(schema, rows[i]);\r\n\r\n    const [t1, status] = await commonHandler('init', t, i, appEnv);\r\n\r\n    if (status.code !== 0) {\r\n      console.log(JSON.stringify(status, null, 4));\r\n    }\r\n    newRows.push(t1);\r\n  };\r\n\r\n  // extend column and make it an object\r\n  const eColumns = {};\r\n  schema.forEach((s, i) => {\r\n    const name = s.Column.toLowerCase();\r\n    s.name = name;\r\n    s.Label = (s.Label == null || s.Label.length === 0) ? s.Column : s.Label;\r\n    s.custom = false;\r\n    eColumns[name] = s;\r\n  });\r\n\r\n  // add computed columns to the array.\r\n  if (customColumns != null) {\r\n    for (const k in customColumns) {\r\n      const c = { ...customColumns[k] };\r\n      c.name = k;\r\n      c.custom = true;\r\n      eColumns[k] = c;\r\n    }\r\n  }\r\n\r\n  return {\r\n    columns: eColumns,\r\n    data   : newRows\r\n  };\r\n}\r\nexport default prepFormData;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { casFetchRows } from '@sassoftware/restaflib';\r\nimport prepFormData from './prepFormData';\r\n/**\r\n * @description Fetch new records based on control argument\r\n * @async\r\n * @module fetchTableRows\r\n * @category restafedit/core\r\n * @param {fetchControl} control - info for records to retrieve\r\n * @param {appEnv} appEnv - appEnv\r\n * @returns {promise}  - { data:data, columns:ecolumns, pagination: pagination}\r\n * @example\r\n *   let control = {from: 10, count:50, format: false};\r\n *   let r = await fetchTableRows(control, appEnv);\r\n *   r is a fetchResult object\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function fetchTableRows (control, appEnv) {\r\n  const { store, session } = appEnv;\r\n  // eslint-disable-next-line no-useless-catch\r\n  const c = { ...control };\r\n  if (c.table == null) {\r\n    c.table = appEnv.appControl.dataControl.table;\r\n  }\r\n  if (c.where == null) {\r\n    c.where = {};\r\n  }\r\n  if (c.from <= 0 || c.next === -1) {\r\n    return null;\r\n  }\r\n  const r = await casFetchRows(store, session, c);\r\n  const t = await prepFormData(r.data, appEnv);\r\n\r\n  appEnv.state = {\r\n    modified   : [],\r\n    pagination : { ...r.pagination },\r\n    currentPage: c,\r\n    data       : [],\r\n    columns    : []\r\n  };\r\n\r\n  if (appEnv.appControl.dataControl.cachePolicy === true) {\r\n    appEnv.state.data = t.data;\r\n    appEnv.state.columns = t.columns;\r\n  }\r\n\r\n  t.pagination = { ...r.pagination };\r\n  return t;\r\n}\r\nexport default fetchTableRows;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport text2Float from './text2Float';\r\nimport commonHandler from './commonHandler';\r\nimport updateTableRows from './updateTableRows';\r\n\r\n/**\r\n * @description Process edit of a cell and optionally save the data\r\n * @async\r\n * @module cellEdit\r\n * @category restafedit/core\r\n * @param {string} name     - name of the field (lower case)\r\n * @param {*} value         - the new value for name field\r\n * @param {number} rowIndex - row Index ( index in the data array on client)\r\n * @param {rowObject} data  - RowObject for the entire row prior to change\r\n * @param {appEnv} appEnv   - app Environment from setup\r\n * @returns {promise}       - {data: updated data, status: status }\r\n * @example\r\n * data schema {column1: value, column2, value,...}\r\n * status schema {statusCode: 0|1|2, msg: some string}\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function cellEdit (name, value, rowIndex, data, appEnv) {\r\n  /* do not modify the data directly. caller will probably do a setState */\r\n  let newDataRow = (data !== null) ? { ...data } : { ...appEnv.state.data[rowIndex] };\r\n  const columns = appEnv.state.columns;\r\n  const { handlers, autoSave } = appEnv.appControl.editControl;\r\n\r\n  newDataRow[name] = text2Float(value, columns[name]);\r\n  let status = { statusCode: 0, msg: '' };\r\n\r\n  if (handlers[name] != null) {\r\n    const r = await handlers[name](newDataRow, name, rowIndex, appEnv);\r\n    newDataRow = r[0];\r\n    status = r[1];\r\n    if (status.statusCode === 2) {\r\n      return { data: r[0], status };\r\n    }\r\n  }\r\n  let r = await commonHandler('main', newDataRow, rowIndex, appEnv);\r\n  if (autoSave === true) {\r\n    r = await commonHandler('term', r[0], rowIndex, appEnv);\r\n    status = r[1];\r\n    if (status.statusCode === 2) {\r\n      return { data: r[0], status };\r\n    }\r\n\r\n    await updateTableRows(newDataRow, appEnv);\r\n  }\r\n  newDataRow = r[0];\r\n  status.msg = status.msg + ' / ' + r[1];\r\n\r\n  if (appEnv.appControl.dataControl.cachePolicy === true) {\r\n    appEnv.state.data[rowIndex] = newDataRow;\r\n  }\r\n\r\n  return ({ data: newDataRow, status });\r\n}\r\nexport default cellEdit;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nfunction text2Float (value, f) {\r\n  let svalue = value;\r\n  if (typeof svalue === 'string' && (f.Type === 'decimal' || f.Type === 'number' || f.Type === 'double')) {\r\n    svalue = parseFloat(value * 1.0);\r\n    if (isNaN(value) === true) {\r\n      value = 0;\r\n    }\r\n  }\r\n  return svalue;\r\n}\r\nexport default text2Float;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport fetchTableRows from './fetchTableRows';\r\n/**\r\n * @description Simplify scrolling using next|prev|top\r\n * @async\r\n * @module scrollTable\r\n * @category restafedit/core\r\n * @param {string} direction direction(next|prev|first)\r\n * @param {appEnv} appEnv\r\n * @returns {promise}  result ready for display or null if it did not scroll\r\n * @example\r\n *  let r = await scrollTable('next', appEnv);\r\n *\r\n *  if ( r === null) {\r\n *     handle when no data was writtten\r\n *  } else {\r\n *     handle new data\r\n * }\r\n *\r\n * Make sure you handle exceptions that are thrown.\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function scrollTable (direction, appEnv) {\r\n  const { initialFetch, table } = appEnv.appControl.dataControl;\r\n\r\n  let control;\r\n  if (direction === 'first') {\r\n    control = { ...initialFetch };\r\n    control.table = table;\r\n  } else {\r\n    control = appEnv.state.pagination[direction];\r\n    if (control.next === -1) {\r\n      return null;\r\n    }\r\n  }\r\n  const t = await fetchTableRows(control, appEnv);\r\n  return t;\r\n}\r\nexport default scrollTable;\r\n","\r\nimport { initStore } from '@sassoftware/restaf';\r\nimport { casSetup } from '@sassoftware/restaflib';\r\n\r\n/**\r\n * @description Setup an Edit session\r\n * @async\r\n * @module setup\r\n * @category restafedit/core\r\n * @param {logonPayload} logonPayload  - information for connecting to Viya\r\n * @param {appControl} appControl      - control information\r\n *\r\n * @returns {promise}  returns appEnv to control the flow\r\n * @alias module: setup\r\n * @example\r\n *  const appEnv = await setup(logonPayload, appControl);\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n *\r\n */\r\n\r\nasync function setup (logonPayload, appControl) {\r\n  const store = initStore();\r\n  if (logonPayload.authType == null) {\r\n    logonPayload.authType = 'code';\r\n  }\r\n\r\n  const r = await casSetup(store, logonPayload);\r\n\r\n  const appEnv = {\r\n    store,\r\n    session  : r.session,\r\n    servers  : r.servers,\r\n    restaflib: null,\r\n    logonPayload,\r\n    state    : {\r\n      modified   : [],\r\n      pagination : {},\r\n      currentPage: {},\r\n      data       : {},\r\n      columns    : {}\r\n    }\r\n  };\r\n  appEnv.appControl = appControl;\r\n  appEnv.id = Date(); /* just assign a new id - placeholder */\r\n  return appEnv;\r\n}\r\nexport default setup;\r\n"],"names":["commonHandler","type","data","rowIndex","appEnv","appControl","editControl","handlers","Promise","resolve","statusCode","msg","_ref","e","reject","updateTableRows","store","session","_appEnv$appControl$da","dataControl","table","byvars","columns","state","length","t","k","custom","w","forEach","casUpdateData","where","_settle","pact","value","s","_Pact","o","bind","v","then","observer","prototype","onFulfilled","onRejected","result","this","callback","_this","fetchTableRows","control","c","from","next","casFetchRows","r","_temp3","eColumns","schema","i","name","Column","toLowerCase","Label","customColumns","newRows","rows","_temp4","array","body","row","rowObj","makeRowObject","t1","status","code","console","log","JSON","stringify","push","thenable","_cycle","prepFormData","modified","pagination","currentPage","cachePolicy","cellEdit","_exit3","newDataRow","_exit2","_temp2","_result2","_temp","autoSave","_commonHandler","_appEnv$appControl$ed","f","svalue","Type","parseFloat","isNaN","text2Float","_temp6","_temp5","direction","_extends","initialFetch","setup","logonPayload","initStore","authType","casSetup","servers","restaflib","id","Date"],"mappings":"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"}