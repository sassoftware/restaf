{"version":3,"file":"index.js","sources":["../src/commonHandler.js","../src/updateTableRows.js","../src/prepFormData.js","../src/cellEdit.js","../src/text2Float.js","../src/distinctValues.js","../src/casTableUnique.js","../src/sasTableUnique.js","../src/fetchTableRows.js","../src/scrollTable.js","../src/setup.js","../src/sort.js"],"sourcesContent":["/*\r\n * Copyright © 2022, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @description Run init, main or term handlers\r\n * @async\r\n * @module commonHandler\r\n * @category restafedit/core\r\n * @param {string} type   - type of exit (init|main|term)\r\n * @param {rowObject} data        - rowObject\r\n * @param {number} rowIndex    - client-side Row Index\r\n * @param {appEnv} appEnv      - app Environment from setup\r\n * @returns {promise}     - [data, status]\r\n * @example\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function commonHandler (type, data, rowIndex, appEnv) {\r\n  const { handlers } = appEnv.appControl.editControl;\r\n  if (handlers[type] == null) {\r\n    return [data, { statusCode: 0, msg: null }];\r\n  } else {\r\n    const [newDataRow, status] = await handlers[type](data, rowIndex, appEnv, type);\r\n    return [newDataRow, status];\r\n  }\r\n};\r\nexport default commonHandler;\r\n","import { casUpdateData } from '@sassoftware/restaflib';\r\n/**\r\n * @description Update the row on the server\r\n * @async\r\n * @module updateTableRows\r\n * @category restafedit/core\r\n * @param {rowObject} data  - data as a rowObject\r\n * @param {appEnv} appEnv   - app Environment object from setup\r\n * @returns {promise}       - key is completion code\r\n * @example\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function updateTableRows (data, appEnv) {\r\n  let result;\r\n  if (appEnv.source === 'cas') {\r\n    result = await iupdateCasTable(data, appEnv);\r\n  } else {\r\n    result = await iupdateComputeTable(data, appEnv);\r\n  }\r\n  return result;\r\n}\r\n\r\nasync function iupdateCasTable (data, appEnv) {\r\n  const { store, session } = appEnv;\r\n  const { table, byvars } = appEnv.appControl;\r\n  const columns = appEnv.state.columns;\r\n\r\n  if (byvars === null || byvars.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  const t = {};\r\n  for (const k in data) {\r\n    if (k !== '_index_' && columns[k].custom === false) {\r\n      t[k] = data[k];\r\n    };\r\n  };\r\n\r\n  const w = {};\r\n  byvars.forEach((k) => {\r\n    w[k] = t[k];\r\n  });\r\n  const payload = {\r\n    table,\r\n    data : t,\r\n    where: w\r\n  };\r\n\r\n  const result = await casUpdateData(store, session, payload);\r\n  const r = result.items().toJS();\r\n  const status = { statusCode: 0, msg: 'Save successful' };\r\n\r\n  if (r.disposition.severity !== 'Normal') {\r\n    status.statusCode = 2;\r\n    status.msg = t.disposition.severity.reason;\r\n  };\r\n  return status;\r\n}\r\n\r\nasync function iupdateComputeTable (data, appEnv) {\r\n  const { store, session } = appEnv;\r\n  const { table, byvars } = appEnv.appControl;\r\n  const columns = appEnv.state.columns;\r\n  ;\r\n\r\n  if (byvars === null || byvars.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  let src =\r\n    `proc sql; update ${table.libref}.${table.name}`;\r\n  let set = 'SET ';\r\n  let comma = ' ';\r\n  for (const k in data) {\r\n    if (columns[k].custom === false) {\r\n      set = set + comma + k + '=' + value2String(data[k]);\r\n    }\r\n    comma = ', ';\r\n  };\r\n  src = src + ' ' + set;\r\n  let w = ' WHERE ';\r\n  let andBit = ' ';\r\n\r\n  byvars.forEach((k) => {\r\n    w = w + andBit + k + '=' + value2String(data[k]);\r\n    andBit = 'AND ';\r\n  });\r\n  src = src + ' ' + w + ';run;';\r\n  const asrc = src.split(/\\r?\\n/);\r\n\r\n  const payload = {\r\n    data: { code: asrc }\r\n  };\r\n\r\n  // console.log(asrc);\r\n\r\n  const job = await store.apiCall(session.links('execute'), payload);\r\n  const qs = {\r\n    qs: {\r\n      newState: 'Completed',\r\n      timeout : 1\r\n    }\r\n  };\r\n\r\n  // eslint-disable-next-line no-unused-vars\r\n  const status = await store.jobState(job, qs);\r\n  const c = (status.data === 'completed' ? 0 : 1);\r\n\r\n  return { statusCode: c, msg: status.data };\r\n}\r\n\r\nfunction value2String (value) {\r\n  let valueString;\r\n  if (value == null) {\r\n    valueString = '.';\r\n  } else if (typeof value === 'string') {\r\n    valueString = JSON.stringify(value);\r\n  } else {\r\n    valueString = value.toString();\r\n  }\r\n  return valueString;\r\n}\r\n\r\nexport default updateTableRows;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/*\r\n* output\r\n* extended columns and data ready for use in dataform and table\r\n*/\r\nimport commonHandler from './commonHandler';\r\n/**\r\n * @description reduce fetch results\r\n * @private\r\n * @async\r\n * @module prepFormData\r\n * @param {object} result - result from casFetchRow(rows and schema)\r\n * @param {object} appEnv - app Environment from setup\r\n * @returns {promise}     - {columns: eColumns, rowsObject: newRows}\r\n */\r\nasync function prepFormData (result, appEnv) {\r\n  const { schema, rows } = result;\r\n  const customColumns = appEnv.appControl.customColumns;\r\n  let status = { statusCode: 0, msg: 'Initialization was successful' };\r\n\r\n  const makeRowObject = (columns, row) => {\r\n    const rowObj = {};\r\n    row.forEach((r, i) => {\r\n      const s = columns[i];\r\n      const name = s.Column.toLowerCase();\r\n      /*\r\n      if (s.Label == null) {\r\n        s.Label = (s.label == null) ? s.Column : s.label;\r\n      }\r\n      if (s.Label == null) {\r\n        s.Label = s.Column;\r\n      }\r\n      */\r\n      rowObj[name] = r;\r\n    });\r\n\r\n    if (customColumns != null) {\r\n      for (const k in customColumns) {\r\n        const c = customColumns[k];\r\n        const name = c.Column.toLowerCase();\r\n        rowObj[name] = c.value;\r\n      }\r\n    }\r\n    return rowObj;\r\n  };\r\n\r\n  const newRows = [];\r\n  for (let i = 0; i < rows.length; i++) {\r\n    const t = makeRowObject(schema, rows[i]);\r\n\r\n    const [t1, statusi] = await commonHandler('init', t, i, appEnv);\r\n    status = statusi;\r\n    newRows.push(t1);\r\n  };\r\n\r\n  // extend column and make it an object\r\n  const eColumns = {};\r\n  schema.forEach((s, i) => {\r\n    const name = s.Column.toLowerCase();\r\n    s.name = name;\r\n    s.Label = (s.Label == null || s.Label.length === 0) ? s.Column : s.Label;\r\n    if (s.Type == null) {\r\n      s.Type = (s.type == null) ? 'double' : s.type;\r\n    }\r\n    s.custom = false;\r\n    eColumns[name] = s;\r\n  });\r\n\r\n  // add computed columns to the array.\r\n  if (customColumns != null) {\r\n    for (const k in customColumns) {\r\n      const c = { ...customColumns[k] };\r\n      c.name = k;\r\n      c.custom = true;\r\n      eColumns[k] = c;\r\n    }\r\n  }\r\n\r\n  return {\r\n    columns: eColumns,\r\n    data   : newRows,\r\n    status\r\n  };\r\n}\r\nexport default prepFormData;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport text2Float from './text2Float';\r\nimport commonHandler from './commonHandler';\r\nimport updateTableRows from './updateTableRows';\r\n\r\n/**\r\n * @description Process edit of a cell and optionally save the data\r\n * @async\r\n * @module cellEdit\r\n * @category restafedit/core\r\n * @param {string} name     - name of the field (lower case)\r\n * @param {*} value         - the new value for name field\r\n * @param {number} rowIndex - row Index ( index in the data array on client)\r\n * @param {rowObject} data  - RowObject for the entire row prior to change\r\n * @param {appEnv} appEnv   - app Environment from setup\r\n * @returns {promise}       - {data: updated data, status: status }\r\n * @example\r\n * data schema {column1: value, column2, value,...}\r\n * status schema {statusCode: 0|1|2, msg: some string}\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function cellEdit (name, value, rowIndex, data, appEnv) {\r\n  /* do not modify the data directly. caller will probably do a setState */\r\n  let newDataRow = (data !== null) ? { ...data } : { ...appEnv.state.data[rowIndex] };\r\n  const columns = appEnv.state.columns;\r\n  const { handlers, autoSave } = appEnv.appControl.editControl;\r\n\r\n  newDataRow[name] = text2Float(value, columns[name]);\r\n  let status = { statusCode: 0, msg: '' };\r\n\r\n  if (handlers[name] != null) {\r\n    const r = await handlers[name](newDataRow, name, rowIndex, appEnv);\r\n    newDataRow = r[0];\r\n    status = r[1];\r\n    if (status.statusCode === 2) {\r\n      return { data: r[0], status };\r\n    }\r\n  }\r\n  let r = await commonHandler('main', newDataRow, rowIndex, appEnv);\r\n  if (autoSave === true) {\r\n    r = await commonHandler('term', r[0], rowIndex, appEnv);\r\n    status = r[1];\r\n    if (status.statusCode === 2) {\r\n      return { data: r[0], status };\r\n    }\r\n    status = await updateTableRows(r[0], appEnv);\r\n  }\r\n  newDataRow = r[0];\r\n\r\n  if (appEnv.appControl.cachePolicy === true) {\r\n    appEnv.state.data[rowIndex] = newDataRow;\r\n  }\r\n\r\n  return ({ data: newDataRow, status });\r\n}\r\nexport default cellEdit;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nfunction text2Float (value, f) {\r\n  let svalue = value;\r\n  const t = f.Type.toLowerCase();\r\n  if (typeof svalue === 'string' && (t === 'decimal' || t === 'number' || t === 'double' || t === 'float')) {\r\n    svalue = parseFloat(value * 1.0);\r\n    if (isNaN(value) === true) {\r\n      value = 0;\r\n    }\r\n  }\r\n  return svalue;\r\n}\r\nexport default text2Float;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport casTableUnique from './casTableUnique';\r\nimport sasTableUnique from './sasTableUnique';\r\n\r\n/**\r\n * @description Get unique values for a specific column\r\n * @async\r\n * @module distinctValues\r\n * @category restafedit/core\r\n * @param {string} columnName    column name\r\n * @param {appEnv} appEnv   - app Environment from setup\r\n * @returns {promise}       - {an array of unique values }\r\n * @example\r\n *  let selectList = await distinctValues('company', appEnv))\r\n *  This is useful to get a list of unique values for selected columns.\r\n *  {company:['IBM', 'Microsoft', 'SAS'] }\r\n */\r\n\r\nasync function distinctValues (columnName, appEnv, payload) {\r\n  let data;\r\n  if (appEnv.source === 'cas') {\r\n    data = await casTableUnique(columnName, appEnv, payload);\r\n  } else {\r\n    data = await sasTableUnique(columnName, appEnv, payload);\r\n  }\r\n  return data;\r\n};\r\nexport default distinctValues;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nimport { caslRun } from '@sassoftware/restaflib';\r\n\r\n/**\r\n * @description Get unique values for a specific column\r\n * @async\r\n * @private\r\n * @module casTableUnique\r\n * @category restafedit/core\r\n * @param {string} columnName    column name\r\n * @param {appEnv} appEnv   app Environment from setup\r\n * @returns {promise}       {an array of unique values }\r\n * @example\r\n *  let selectList = await casTableUnique('company, appEnv))\r\n *  This is useful to get a list of unique values for selected columns.\r\n *  {columnName:[ array of unquew values] }\r\n */\r\n\r\nasync function casTableUnique (columnName, appEnv, payload) {\r\n  const { store, session } = appEnv;\r\n\r\n  const src = `\r\n  results = selectionLists(_args_.column,_args_.table.caslib, _args_.table.name);\r\n  send_response({casResults = {data=results}});\r\n  `\r\n  ;\r\n  const args = {\r\n    table : appEnv.appControl.table,\r\n    column: columnName\r\n  };\r\n\r\n  const result = await caslRun(store, session, src, args, true);\r\n  if (result.results.casResults.data.statusCode !== 0) {\r\n    // eslint-disable-next-line no-throw-literal\r\n    throw 'Failed to create unique list';\r\n  }\r\n\r\n  const data = result.results.casResults.data.data;\r\n\r\n  return data;\r\n};\r\nexport default casTableUnique;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @description Get unique values for a specific column(sas table)\r\n * @async\r\n * @private\r\n * @module sasTableUnique\r\n * @category restafedit/core\r\n * @param {string} columnName    column name\r\n * @param {appEnv} appEnv   app Environment from setup\r\n * @returns {promise}       {an array of unique values }\r\n * @example\r\n *  let selectList = await casTableUnique('company, appEnv))\r\n *  This is useful to get a list of unique values for selected columns.\r\n *  {columnName:[ array of unquew values] }\r\n */\r\n\r\nasync function sasTableUnique (columnName, appEnv, payload) {\r\n  const data = {};\r\n  data[columnName] = [];\r\n  return data;\r\n};\r\nexport default sasTableUnique;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { casFetchRows, computeFetchData } from '@sassoftware/restaflib';\r\n\r\nimport prepFormData from './prepFormData';\r\n/**\r\n * @description Fetch new records based on control argument\r\n * @async\r\n * @private\r\n * @module fetchTableRows\r\n * @category restafedit/core\r\n * @param {fetchControl} control - info for records to retrieve\r\n * @param {appEnv} appEnv - appEnv\r\n * @returns {promise}  - { data:data, columns:ecolumns, pagination: pagination}\r\n * @example\r\n *   let control = {from: 10, count:50, format: false};\r\n *   let r = await fetchTableRows(control, appEnv);\r\n *   r is a fetchResult object\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function fetchTableRows (control, appEnv) {\r\n  let result = null;\r\n  if (appEnv.source === 'cas') {\r\n    result = await icasRows(control, appEnv);\r\n  } else {\r\n    result = await icomputeRows(control, appEnv);\r\n  }\r\n  return result;\r\n}\r\n\r\nasync function icasRows (control, appEnv) {\r\n  const { store, session } = appEnv;\r\n  const c = { ...control };\r\n  if (c.from <= 0 || c.next === -1) {\r\n    return null;\r\n  }\r\n  debugger;\r\n  if (c.where == null) {\r\n    c.where = ' ';\r\n  }\r\n  const r = await casFetchRows(store, session, c);\r\n\r\n  let t = null;\r\n  if (r !== null) {\r\n    t = await prepFormData(r.data, appEnv);\r\n\r\n    appEnv.state = {\r\n      modified   : [],\r\n      pagination : { ...r.pagination },\r\n      currentPage: c,\r\n      data       : [],\r\n      columns    : []\r\n    };\r\n    if (appEnv.appControl.cachePolicy === true) {\r\n      appEnv.state.data = t.data;\r\n      appEnv.state.columns = t.columns;\r\n    }\r\n    t.pagination = { ...r.pagination };\r\n  }\r\n  return t;\r\n}\r\n\r\nasync function icomputeRows (control, appEnv) {\r\n  const { store, tableSummary } = appEnv;\r\n  const { table } = appEnv.appControl;\r\n  const tname = `${table.libref}.${table.name}`.toLowerCase();\r\n  // eslint-disable-next-line prefer-const\r\n  let payload = {\r\n    qs: {\r\n      start : control.from - 1,\r\n      limit : control.count,\r\n      format: (control.format != null) ? false : control.format\r\n    }\r\n  };\r\n  const data = await computeFetchData(store, tableSummary, tname, null, payload);\r\n  ;\r\n\r\n  let result = null;\r\n  if (data !== null) {\r\n    result = await prepFormData(data, appEnv);\r\n    appEnv.state = {\r\n      modified   : [],\r\n      pagination : {},\r\n      currentPage: {},\r\n      data       : result.data,\r\n      columns    : result.columns\r\n    };\r\n  }\r\n  return result;\r\n}\r\nexport default fetchTableRows;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n// import fetchTableRows from './fetchTableRows';\r\nimport { computeFetchData, casFetchRows } from '@sassoftware/restaflib';\r\nimport prepFormData from './prepFormData';\r\n/**\r\n * @description Simplify scrolling using next|prev|top\r\n * @async\r\n * @module scrollTable\r\n * @category restafedit/core\r\n * @param {string} direction direction(next|prev|first)\r\n * @param {appEnv} appEnv\r\n * @param {object=} payload  override pogination with custom scrolling\r\n * @returns {promise}  result ready for display or null if it did not scroll\r\n * @example\r\n *  let r = await scrollTable('next', appEnv);\r\n *\r\n *  if ( r === null) {\r\n *     handle when no data was writtten\r\n *  } else {\r\n *     handle new data\r\n * }\r\n *\r\n * Make sure you handle exceptions that are thrown.\r\n *\r\n * For custom scrolling, pass the scrolling information in the optional third parameter.\r\n * The content of the payload depends on whether the source is cas or compute.\r\n * For compute see the documentation for rowset in compute service.<https://developer.sas.com/apis/rest/Compute/#get-a-row-set-from-a-data-set>\r\n * CAS payload is not as rich the rowset for compute service\r\n * The payload for CAS is as follows\r\n *  { start: <number>\r\n *    count: <number>\r\n *    format: true|false,\r\n *    where: <where string>\r\n * };\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function scrollTable (direction, appEnv, payload) {\r\n  let fetchResults;\r\n  if (appEnv.source === 'cas') {\r\n    fetchResults = await icasScroll(direction, appEnv, payload);\r\n  } else {\r\n    fetchResults = await icomputeScroll(direction, appEnv, payload);\r\n  }\r\n  return fetchResults;\r\n}\r\n\r\nasync function icasScroll (direction, appEnv, payload) {\r\n  const { store, session } = appEnv;\r\n  const { initialFetch, table } = appEnv.appControl;\r\n  let control;\r\n\r\n  if (direction === 'first') {\r\n    control = { ...initialFetch };\r\n  } else if (direction !== null) {\r\n    control = { ...appEnv.state.pagination[direction] };\r\n    if (control.next === -1 || control.from <= 0) {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  if (payload != null) {\r\n    control = { ...payload };\r\n  }\r\n\r\n  control.table = table;\r\n  debugger;\r\n  const r = await casFetchRows(store, session, control);\r\n\r\n  let t = null;\r\n  if (r !== null) {\r\n    t = await prepFormData(r.data, appEnv);\r\n    appEnv.state = {\r\n      modified   : [],\r\n      pagination : { ...r.pagination },\r\n      currentPage: control,\r\n      data       : [],\r\n      columns    : []\r\n    };\r\n    if (appEnv.appControl.cachePolicy === true) {\r\n      appEnv.state.data = t.data;\r\n      appEnv.state.columns = t.columns;\r\n    }\r\n    t.pagination = { ...r.pagination };\r\n    return t;\r\n  }\r\n}\r\n\r\nasync function icomputeScroll (direction, appEnv, payload) {\r\n  const { store, tableSummary } = appEnv;\r\n  const { table, initialFetch } = appEnv.appControl;\r\n  let control = null;\r\n\r\n  const tname = `${table.libref}.${table.name}`.toLowerCase();\r\n\r\n  if (payload == null) {\r\n    if (direction === 'first') {\r\n      control = { ...initialFetch };\r\n    }\r\n  } else {\r\n    control = { ...payload };\r\n  }\r\n\r\n  // eslint-disable-next-line prefer-const\r\n\r\n  const data = await computeFetchData(store, tableSummary, tname, direction, control);\r\n\r\n  let result = null;\r\n  if (data !== null) {\r\n    result = await prepFormData(data, appEnv);\r\n    appEnv.state = {\r\n      modified   : [],\r\n      pagination : {},\r\n      currentPage: {},\r\n      data       : result.data,\r\n      columns    : result.columns\r\n    };\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nexport default scrollTable;\r\n","/* eslint-disable prefer-const */\r\n\r\nimport { initStore } from '@sassoftware/restaf';\r\nimport { casSetup, computeSetup, computeSetupTables } from '@sassoftware/restaflib';\r\nimport deepmerge from 'deepmerge';\r\n\r\n/**\r\n * @description Setup an Edit session\r\n * @async\r\n * @module setup\r\n * @category restafedit/core\r\n * @param {logonPayload} logonPayload  - information for connecting to Viya\r\n * @param {appControl} appControl      - control information\r\n *\r\n * @returns {promise}  returns appEnv to control the flow\r\n * @alias module: setup\r\n * @example\r\n *  const appEnv = await setup(logonPayload, appControl);\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n *\r\n */\r\n\r\nasync function setup (logonPayload, appControl, preamble) {\r\n  const store = initStore();\r\n  let appEnv;\r\n  if (logonPayload.authType == null) {\r\n    logonPayload.authType = 'code';\r\n  }\r\n  if (appControl.source === 'cas') {\r\n    appEnv = await icasSetup(store, logonPayload, appControl);\r\n  } else {\r\n    appEnv = await icomputeSetup(store, logonPayload, appControl, preamble);\r\n  }\r\n  return appEnv;\r\n}\r\n\r\nasync function icasSetup (store, logonPayload, appControl) {\r\n  const r = await casSetup(store, logonPayload);\r\n  let appEnv = {\r\n    source: appControl.source,\r\n\r\n    store,\r\n    session  : r.session,\r\n    servers  : r.servers,\r\n    restaflib: null,\r\n    logonPayload,\r\n    appControl,\r\n\r\n    state: {\r\n      modified   : [],\r\n      pagination : {},\r\n      currentPage: {},\r\n\r\n      data   : {},\r\n      columns: {}\r\n    },\r\n\r\n    id: Date()\r\n  };\r\n  return appEnv;\r\n};\r\n\r\nasync function icomputeSetup (store, logonPayload, appControl, preamble) {\r\n  // eslint-disable-next-line prefer-const\r\n  ;\r\n  let session = await computeSetup(store, appControl.computeContext, logonPayload);\r\n  let tableSummary = await computeSetupTables(store, session, appControl.table, preamble);\r\n  let appEnv = {\r\n    source: appControl.source,\r\n\r\n    store,\r\n    session,\r\n    tableSummary,\r\n\r\n    servers  : null,\r\n    restaflib: null,\r\n\r\n    logonPayload,\r\n    appControl: deepmerge(appControl),\r\n\r\n    state: {\r\n      modified   : [],\r\n      pagination : {},\r\n      currentPage: {},\r\n\r\n      data   : {},\r\n      columns: {}\r\n    },\r\n\r\n    id: Date()\r\n  };\r\n  return appEnv;\r\n}\r\n\r\nexport default setup;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @description sort data for seelected column\r\n * @async\r\n * @module sort\r\n * @private\r\n * @category restafedit/core\r\n * @param {string} columnName    column name\r\n * @param {string} direction  A|D   (A=ascending, B=descending)\r\n * @param {array}  data if null, the data cached in appEnv will be used.\r\n * @param {appEnv} appEnv   - app Environment from setup\r\n * @returns {promise}       returns the sorted array\r\n * @example\r\n *  let status = await distinctValues('company', appEnv))\r\n *  This is useful to get a list of unique values for selected columns.\r\n *  {company:['IBM', 'Microsoft', 'SAS'] }\r\n */\r\n\r\nasync function sort (columnName, appEnv, payload) {\r\n  return [];\r\n};\r\nexport default sort;\r\n"],"names":["commonHandler","type","data","rowIndex","appEnv","appControl","editControl","handlers","Promise","resolve","statusCode","msg","_ref","e","reject","updateTableRows","_temp2","source","iupdateCasTable","store","session","table","_appEnv$appControl2","byvars","columns","state","length","t","k","custom","w","forEach","casUpdateData","where","result","items","toJS","disposition","severity","status","reason","_iupdateCasTable","_appEnv$appControl","src","libref","name","set","comma","value2String","andBit","payload","code","split","apiCall","links","then","job","jobState","qs","newState","timeout","iupdateComputeTable","_iupdateComputeTable","value","JSON","stringify","toString","_settle","pact","s","_Pact","o","bind","v","observer","prepFormData","_temp3","eColumns","schema","i","Column","toLowerCase","Label","Type","customColumns","c","newRows","rows","array","body","row","rowObj","r","makeRowObject","push","statusi","_cycle","thenable","prototype","onFulfilled","onRejected","this","callback","_this","_exit3","_temp5","_result","newDataRow","_exit2","_result2","cachePolicy","autoSave","_updateTableRows","_temp","_extends","f","svalue","parseFloat","isNaN","text2Float","_temp6","columnName","casTableUnique","caslRun","column","results","casResults","_casTableUnique","sasTableUnique","_sasTableUnique","control","from","next","casFetchRows","_prepFormData2","modified","pagination","currentPage","icasRows","icomputeRows","tableSummary","tname","computeFetchData","start","limit","count","format","_icomputeRows","scrollTable","direction","fetchResults","initialFetch","icasScroll","_icasScroll","icomputeScroll","_prepFormData","_icomputeScroll","logonPayload","preamble","initStore","authType","casSetup","servers","restaflib","id","Date","icasSetup","_icasSetup","computeSetup","computeContext","computeSetupTables","deepmerge","icomputeSetup"],"mappings":"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"}