{"version":3,"file":"index.module.js","sources":["../src/commonHandler.js","../src/updateTableRows.js","../src/cellEdit.js","../src/text2Float.js","../src/prepFormData.js","../src/fetchTableRows.js","../src/scrollTable.js","../src/setup.js"],"sourcesContent":["/*\r\n * Copyright © 2022, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @description Run init, main or term handlers\r\n * @async\r\n * @module commonHandler\r\n * @category restafedit/core\r\n * @param {string} type   - type of exit (init|main|term)\r\n * @param {rowObject} data        - rowObject\r\n * @param {number} rowIndex    - client-side Row Index\r\n * @param {appEnv} appEnv      - app Environment from setup\r\n * @returns {promise}     - [data, status]\r\n * @example\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function commonHandler (type, data, rowIndex, appEnv){\r\n   const {handlers} = appEnv.appControl.editControl;\r\n    if (handlers[type] == null) {\r\n      \r\n       return [data, { status: 0, msg: null}];\r\n    }\r\n    else {\r\n      \r\n      let [newDataRow, status] = await handlers[type](data, rowIndex, appEnv, type);\r\n      return [newDataRow, status];\r\n    }\r\n  };\r\n  export default commonHandler;","\r\nimport { casUpdateData } from '@sassoftware/restaflib';\r\n/**\r\n * @description Update the row on the server\r\n * @async\r\n * @module updateTableRows\r\n * @category restafedit/core\r\n * @param {rowObject} data  - data as a rowObject\r\n * @param {appEnv} appEnv   - app Environment object from setup   \r\n * @returns {promise}       - key is completion code\r\n * @example\r\n * \r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function updateTableRows (data, appEnv) {\r\n    const { store, session } = appEnv;\r\n    const {table, byvars} = appEnv.appControl.dataControl;\r\n    const columns = appEnv.state.columns;\r\n    \r\n    if (byvars === null || byvars.length === 0) {\r\n        return;\r\n    }\r\n    const t = {};\r\n    for (const k in data) {\r\n        if (k !== '_index_' && columns[k].custom === false) {\r\n            t[k] = data[k];\r\n        };\r\n    };\r\n\r\n    let w = {};\r\n    byvars.forEach((k) => {\r\n        w[k] = t[k];\r\n    });\r\n    const payload = {\r\n        table : table,\r\n        data  : t,\r\n        where : w\r\n    };\r\n    \r\n    return await casUpdateData(store, session, payload);\r\n}\r\n\r\nexport default updateTableRows;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport text2Float from \"./text2Float\";\r\nimport commonHandler from './commonHandler';\r\nimport updateTableRows from './updateTableRows';\r\n\r\n/**\r\n * @description Process edit of a cell and optionally save the data\r\n * @async\r\n * @module cellEdit\r\n * @category restafedit/core\r\n * @param {string} name     - name of the field (lower case)\r\n * @param {*} value         - the new value for name field\r\n * @param {number} rowIndex - row Index ( index in the data array on client)\r\n * @param {rowObject} data  - RowObject for the entire row prior to change\r\n * @param {appEnv} appEnv   - app Environment from setup\r\n * @returns {promise}       - {data: updated data, status: status }\r\n * @example\r\n * data schema {column1: value, column2, value,...}\r\n * status schema {status: 0|1|2, msg: some string}\r\n * \r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function cellEdit (name, value, rowIndex, data, appEnv) {\r\n   /* do not modify the data directly. caller will probably do a setState */\r\n    let newDataRow = (data !== null) ? {...data} : {...appEnv.state.data[rowIndex]}\r\n    let columns = appEnv.state.columns;\r\n    const {handlers,autoSave} = appEnv.appControl.editControl;\r\n\r\n    newDataRow[name] = text2Float(value, columns[name]);\r\n    let status = {status: 0, msg: ''};\r\n  \r\n    if (handlers[name] != null) {\r\n        let r = await handlers[name](newDataRow, name, rowIndex, appEnv);\r\n        newDataRow = r[0];\r\n        status = r[1];\r\n    } \r\n    let r = await commonHandler(\"main\", newDataRow, rowIndex, appEnv);\r\n    if (autoSave === true) {\r\n        r = await commonHandler(\"term\",r[0], rowIndex, appEnv);\r\n        await updateTableRows(newDataRow, appEnv);\r\n    }\r\n    newDataRow = r[0]; \r\n    status.msg = status.msg + ' / ' + r[1];\r\n\r\n    if (appEnv.appControl.dataControl.cachePolicy === true) {\r\n        appEnv.state.data[rowIndex] = newDataRow;\r\n    }\r\n\r\n    return ({data: newDataRow, status: status});\r\n    \r\n}\r\nexport default cellEdit;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nfunction text2Float (value, f) {\r\n    let svalue = value;\r\n    if (typeof svalue === 'string' && (f.Type === 'decimal' || f.Type === 'number' || f.Type === 'double')) {\r\n        svalue = parseFloat(value * 1.0);\r\n        if (isNaN(value) === true) {\r\n            value = 0;\r\n        }\r\n    }\r\n    return svalue;\r\n}\r\nexport default text2Float;","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n\r\n/* \r\n* output\r\n* extended columns and data ready for use in dataform and table\r\n*/\r\nimport commonHandler from './commonHandler';\r\n/**\r\n * @description reduce fetch results\r\n * @private\r\n * @async\r\n * @module prepFormData\r\n * @param {object} result - result from casFetchRow(rows and schema)\r\n * @param {object} appEnv - app Environment from setup\r\n * @returns {promise}     - {columns: eColumns, rowsObject: newRows}\r\n */\r\nasync function prepFormData (result, appEnv) {\r\n  const {schema, rows} =  result;\r\n  const customColumns = appEnv.appControl.dataControl.customColumns;\r\n  \r\n  const makeRowObject = (columns, row) => {\r\n    let rowObj = {};\r\n    row.forEach((r, i) => {\r\n      let s = columns[i];\r\n      let name = s.Column.toLowerCase();\r\n      if (s.Label == null) {\r\n        s.Label = s.Column;\r\n      }\r\n      rowObj[name] = r;\r\n    });\r\n\r\n    if (customColumns != null) {\r\n      for (let k in customColumns) {\r\n        let c = customColumns[k];\r\n        let name = c.Column.toLowerCase();\r\n        rowObj[name] = c.value;\r\n      }\r\n    }\r\n    return rowObj;\r\n  };\r\n\r\n\r\n  let newRows = [];\r\n  for (let i=0; i < rows.length; i++) {\r\n     let t = makeRowObject(schema, rows[i]);\r\n     \r\n     let [t1,status] = await commonHandler('init', t, i, appEnv);\r\n     \r\n     if (status.code !== 0) {\r\n       console.log(JSON.stringify(status, null,4));\r\n     }\r\n     newRows.push(t1);\r\n    };\r\n  \r\n  //extend column and make it an object\r\n  let eColumns = {};\r\n  schema.forEach((s,i) => {\r\n      let name = s.Column.toLowerCase();\r\n      s.name    = name;\r\n      s.Label   = (s.Label == null || s.Label.length === 0) ? s.Column : s.Label;\r\n      s.custom  = false;\r\n      eColumns[name] = s;\r\n    });\r\n\r\n  // add computed columns to the array.\r\n  if (customColumns != null) {\r\n    for (let k in customColumns) {\r\n      let c = { ...customColumns[k] };\r\n      c.name = k;\r\n      c.custom = true;\r\n      eColumns[k] = c;\r\n    }\r\n  }\r\n\r\n  \r\n  return {\r\n    columns: eColumns,\r\n    data   : newRows\r\n  };\r\n\r\n}\r\nexport default prepFormData;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport {casFetchRows} from '@sassoftware/restaflib';\r\nimport prepFormData from \"./prepFormData\";\r\n/**\r\n * @description Fetch new records based on control argument\r\n * @async\r\n * @module fetchTableRows\r\n * @category restafedit/core\r\n * @param {fetchControl} control - info for records to retrieve\r\n * @param {appEnv} appEnv - appEnv\r\n * @returns {promise}  - { data:data, columns:ecolumns, pagination: pagination} \r\n * @example\r\n *   let control = {from: 10, count:50, format: false};\r\n *   let r = await fetchTableRows(control, appEnv);\r\n *   r is a fetchResult object\r\n * \r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function fetchTableRows (control, appEnv) {\r\n    let {store, session} = appEnv;\r\n    // eslint-disable-next-line no-useless-catch\r\n    let c   = {...control};\r\n    if (c.table == null) {\r\n        c.table = appEnv.appControl.dataControl.table;\r\n    }\r\n    if (c.where == null) {\r\n        c.where = {};\r\n    }\r\n    if (c.from <= 0 || c.next === -1) {\r\n        return null;\r\n    }\r\n    let r = await casFetchRows(store, session, c);\r\n    let t = await prepFormData(r.data, appEnv);\r\n    \r\n    appEnv.state = {\r\n        modified  : [],\r\n        pagination: {...r.pagination},\r\n        currentPage: c,\r\n        data      : [],\r\n        columns   : []\r\n    };\r\n    \r\n    if (appEnv.appControl.dataControl.cachePolicy === true) {\r\n       appEnv.state.data = t.data;\r\n       appEnv.state.columns = t.columns;\r\n    }\r\n\r\n    t.pagination = {...r.pagination};\r\n    return t;\r\n        \r\n}\r\nexport default fetchTableRows;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport fetchTableRows from './fetchTableRows';\r\n/**\r\n * @description Simplify scrolling using next|prev|top\r\n * @async\r\n * @module scrollTable\r\n * @category restafedit/core\r\n * @param {string} direction direction(next|prev|first)\r\n * @param {appEnv} appEnv \r\n * @returns {promise}  result ready for display or null if it did not scroll\r\n * @example\r\n *  let r = await scrollTable('next', appEnv);\r\n * \r\n *  if ( r === null) {\r\n *     handle when no data was writtten\r\n *  } else {\r\n *     handle new data\r\n * }\r\n * \r\n * Make sure you handle exceptions that are thrown.\r\n * \r\n * Please see the restafeditExample in the Tutorial pulldown \r\n */\r\nasync function scrollTable (direction,appEnv) {\r\n    const {initialFetch, table} = appEnv.appControl.dataControl;\r\n    \r\n    let control;\r\n    if (direction === 'first') {\r\n        control = {...initialFetch};\r\n        control.table = table;\r\n    } else {\r\n        control = appEnv.state.pagination[direction];\r\n        if (control.next === -1) {\r\n           return null;\r\n        }\r\n    }\r\n    let t = await fetchTableRows(control, appEnv);\r\n    return  t;\r\n        \r\n}\r\nexport default scrollTable;\r\n","\r\nimport { initStore } from '@sassoftware/restaf';\r\nimport { casSetup }   from '@sassoftware/restaflib';\r\n\r\n/**\r\n * @description Setup an Edit session\r\n * @async\r\n * @module setup\r\n * @category restafedit/core\r\n * @param {logonPayload} logonPayload  - information for connecting to Viya\r\n * @param {appControl} appControl      - control information \r\n * \r\n * @returns {promise}  returns appEnv to control the flow \r\n * @alias module: setup\r\n * @example\r\n *  const appEnv = await setup(logonPayload, appControl);\r\n * \r\n * Please see the restafeditExample in the Tutorial pulldown\r\n *  \r\n */\r\n\r\nasync function setup (logonPayload, appControl) {\r\n    let store = initStore();\r\n    if (logonPayload.authType == null) {\r\n        logonPayload.authType = 'code';\r\n    }\r\n    \r\n    let r = await casSetup(store, logonPayload);\r\n    \r\n    let appEnv = {\r\n        store       : store,\r\n        session     : r.session,\r\n        servers     : r.servers,\r\n        restaflib   : null,\r\n        logonPayload: logonPayload,\r\n        state       : {\r\n            modified   : [],\r\n            pagination : {},\r\n            currentPage: {},\r\n            data       : {},\r\n            columns    : {}\r\n        }\r\n    };\r\n    appEnv.appControl = appControl;\r\n    appEnv.id       = Date(); /* just assign a new id - placeholder */\r\n    return appEnv;\r\n}\r\nexport default setup;"],"names":["commonHandler","type","data","rowIndex","appEnv","appControl","editControl","handlers","Promise","resolve","status","msg","_ref","e","reject","updateTableRows","store","session","_appEnv$appControl$da","dataControl","table","byvars","columns","state","length","t","k","custom","w","forEach","casUpdateData","where","cellEdit","name","value","newDataRow","then","r","_temp2","cachePolicy","autoSave","_commonHandler","_temp","_extends","_appEnv$appControl$ed","f","svalue","Type","parseFloat","isNaN","text2Float","_temp6","_temp5","_settle","pact","s","_Pact","o","bind","v","observer","prototype","onFulfilled","onRejected","result","this","callback","_this","fetchTableRows","control","c","from","next","casFetchRows","_temp3","eColumns","schema","i","Column","toLowerCase","Label","customColumns","newRows","rows","_temp4","array","body","row","rowObj","makeRowObject","t1","code","console","log","JSON","stringify","push","thenable","_cycle","prepFormData","modified","pagination","currentPage","scrollTable","direction","initialFetch","setup","logonPayload","initStore","authType","casSetup","servers","restaflib","id","Date"],"mappings":"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"}