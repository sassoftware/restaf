{"version":3,"file":"index.module.js","sources":["../src/commonHandler.js","../src/updateTableRows.js","../src/cellEdit.js","../src/text2Float.js","../src/prepFormData.js","../src/fetchTableRows.js","../src/scrollTable.js","../src/setup.js"],"sourcesContent":["/*\r\n * Copyright © 2022, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @description Run init, main or term handlers\r\n * @async\r\n * @module commonHandler\r\n * @category restafedit/core\r\n * @param {string} type   - type of exit (init|main|term)\r\n * @param {rowObject} data        - rowObject\r\n * @param {number} rowIndex    - client-side Row Index\r\n * @param {appEnv} appEnv      - app Environment from setup\r\n * @returns {promise}     - [data, status]\r\n * @example\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function commonHandler (type, data, rowIndex, appEnv) {\r\n  const { handlers } = appEnv.appControl.editControl;\r\n  if (handlers[type] == null) {\r\n    return [data, { statusCode: 0, msg: null }];\r\n  } else {\r\n    const [newDataRow, status] = await handlers[type](data, rowIndex, appEnv, type);\r\n    return [newDataRow, status];\r\n  }\r\n};\r\nexport default commonHandler;\r\n","import { casUpdateData } from '@sassoftware/restaflib';\r\n/**\r\n * @description Update the row on the server\r\n * @async\r\n * @module updateTableRows\r\n * @category restafedit/core\r\n * @param {rowObject} data  - data as a rowObject\r\n * @param {appEnv} appEnv   - app Environment object from setup\r\n * @returns {promise}       - key is completion code\r\n * @example\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function updateTableRows (data, appEnv) {\r\n  let result;\r\n  if (appEnv.source === 'cas') {\r\n    result = await iupdateCasTable(data, appEnv);\r\n  } else {\r\n    result = await iupdateComputeTable(data, appEnv);\r\n  }\r\n  return result;\r\n}\r\n\r\nasync function iupdateCasTable (data, appEnv) {\r\n  const { store, session } = appEnv;\r\n  const { table, byvars } = appEnv.appControl;\r\n  const columns = appEnv.state.columns;\r\n\r\n  if (byvars === null || byvars.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  const t = {};\r\n  for (const k in data) {\r\n    if (k !== '_index_' && columns[k].custom === false) {\r\n      t[k] = data[k];\r\n    };\r\n  };\r\n\r\n  const w = {};\r\n  byvars.forEach((k) => {\r\n    w[k] = t[k];\r\n  });\r\n  const payload = {\r\n    table,\r\n    data : t,\r\n    where: w\r\n  };\r\n\r\n  await casUpdateData(store, session, payload);\r\n  return { statusCode: 0, msg: 'Save successful' };\r\n}\r\n\r\nasync function iupdateComputeTable (data, appEnv) {\r\n  const { store, session } = appEnv;\r\n  const { table, byvars } = appEnv.appControl;\r\n  const columns = appEnv.state.columns;\r\n  debugger;\r\n\r\n  if (byvars === null || byvars.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  let src =\r\n    `proc sql; update ${table.libref}.${table.name}`;\r\n  let set = 'SET ';\r\n  let comma = ' ';\r\n  for (const k in data) {\r\n    if (columns[k].custom === false) {\r\n      set = set + comma + k + '=' + value2String(data[k])\r\n    }\r\n    comma = ', ';\r\n  };\r\n  src = src + ' ' + set;\r\n  let w = ' WHERE ';\r\n  let andBit = ' ';\r\n\r\n  byvars.forEach((k) => {\r\n    w = w + andBit + k + '=' + value2String(data[k]);\r\n    andBit = 'AND ';\r\n  });\r\n  src = src + ' ' + w + ';run;';\r\n  const asrc = src.split(/\\r?\\n/);\r\n  console.log(asrc);\r\n\r\n  const payload = {\r\n    data: { code: asrc }\r\n  };\r\n\r\n  const job = await store.apiCall(session.links('execute'), payload);\r\n  const qs = {\r\n    qs: {\r\n      newState: 'Completed',\r\n      timeout : 1\r\n    }\r\n  };\r\n\r\n  // eslint-disable-next-line no-unused-vars\r\n  const status = await store.jobState(job, qs);\r\n  const c = (status.data === 'completed' ? 0 : 1);\r\n  debugger;\r\n  return { statusCode: c, msg: status.data };\r\n}\r\n\r\nfunction value2String (value) {\r\n  let valueString;\r\n  if (value == null) {\r\n    valueString = '.';\r\n  } else if (typeof value === 'string') {\r\n    valueString = JSON.stringify(value);\r\n  } else {\r\n    valueString = value.toString();\r\n  }\r\n  return valueString;\r\n}\r\n\r\nexport default updateTableRows;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport text2Float from './text2Float';\r\nimport commonHandler from './commonHandler';\r\nimport updateTableRows from './updateTableRows';\r\n\r\n/**\r\n * @description Process edit of a cell and optionally save the data\r\n * @async\r\n * @module cellEdit\r\n * @category restafedit/core\r\n * @param {string} name     - name of the field (lower case)\r\n * @param {*} value         - the new value for name field\r\n * @param {number} rowIndex - row Index ( index in the data array on client)\r\n * @param {rowObject} data  - RowObject for the entire row prior to change\r\n * @param {appEnv} appEnv   - app Environment from setup\r\n * @returns {promise}       - {data: updated data, status: status }\r\n * @example\r\n * data schema {column1: value, column2, value,...}\r\n * status schema {statusCode: 0|1|2, msg: some string}\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function cellEdit (name, value, rowIndex, data, appEnv) {\r\n  /* do not modify the data directly. caller will probably do a setState */\r\n  let newDataRow = (data !== null) ? { ...data } : { ...appEnv.state.data[rowIndex] };\r\n  const columns = appEnv.state.columns;\r\n  const { handlers, autoSave } = appEnv.appControl.editControl;\r\n\r\n  newDataRow[name] = text2Float(value, columns[name]);\r\n  let status = { statusCode: 0, msg: '' };\r\n\r\n  if (handlers[name] != null) {\r\n    const r = await handlers[name](newDataRow, name, rowIndex, appEnv);\r\n    newDataRow = r[0];\r\n    status = r[1];\r\n    if (status.statusCode === 2) {\r\n      return { data: r[0], status };\r\n    }\r\n  }\r\n  let r = await commonHandler('main', newDataRow, rowIndex, appEnv);\r\n  if (autoSave === true) {\r\n    r = await commonHandler('term', r[0], rowIndex, appEnv);\r\n    status = r[1];\r\n    if (status.statusCode === 2) {\r\n      return { data: r[0], status };\r\n    }\r\n\r\n    await updateTableRows(newDataRow, appEnv);\r\n  }\r\n  newDataRow = r[0];\r\n  status.msg = status.msg + ' / ' + r[1];\r\n\r\n  if (appEnv.appControl.cachePolicy === true) {\r\n    appEnv.state.data[rowIndex] = newDataRow;\r\n  }\r\n\r\n  return ({ data: newDataRow, status });\r\n}\r\nexport default cellEdit;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nfunction text2Float (value, f) {\r\n  let svalue = value;\r\n  if (typeof svalue === 'string' && (f.Type === 'decimal' || f.Type === 'number' || f.Type === 'double')) {\r\n    svalue = parseFloat(value * 1.0);\r\n    if (isNaN(value) === true) {\r\n      value = 0;\r\n    }\r\n  }\r\n  return svalue;\r\n}\r\nexport default text2Float;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/*\r\n* output\r\n* extended columns and data ready for use in dataform and table\r\n*/\r\nimport commonHandler from './commonHandler';\r\n/**\r\n * @description reduce fetch results\r\n * @private\r\n * @async\r\n * @module prepFormData\r\n * @param {object} result - result from casFetchRow(rows and schema)\r\n * @param {object} appEnv - app Environment from setup\r\n * @returns {promise}     - {columns: eColumns, rowsObject: newRows}\r\n */\r\nasync function prepFormData (result, appEnv) {\r\n  const { schema, rows } = result;\r\n  const customColumns = appEnv.appControl.customColumns;\r\n\r\n  const makeRowObject = (columns, row) => {\r\n    const rowObj = {};\r\n    row.forEach((r, i) => {\r\n      const s = columns[i];\r\n      const name = s.Column.toLowerCase();\r\n      if (s.Label == null) {\r\n        s.Label = s.Column;\r\n      }\r\n      rowObj[name] = r;\r\n    });\r\n\r\n    if (customColumns != null) {\r\n      for (const k in customColumns) {\r\n        const c = customColumns[k];\r\n        const name = c.Column.toLowerCase();\r\n        rowObj[name] = c.value;\r\n      }\r\n    }\r\n    return rowObj;\r\n  };\r\n\r\n  const newRows = [];\r\n  for (let i = 0; i < rows.length; i++) {\r\n    const t = makeRowObject(schema, rows[i]);\r\n\r\n    const [t1, status] = await commonHandler('init', t, i, appEnv);\r\n\r\n    if (status.code !== 0) {\r\n      console.log(JSON.stringify(status, null, 4));\r\n    }\r\n    newRows.push(t1);\r\n  };\r\n\r\n  // extend column and make it an object\r\n  const eColumns = {};\r\n  schema.forEach((s, i) => {\r\n    const name = s.Column.toLowerCase();\r\n    s.name = name;\r\n    s.Label = (s.Label == null || s.Label.length === 0) ? s.Column : s.Label;\r\n    s.custom = false;\r\n    eColumns[name] = s;\r\n  });\r\n\r\n  // add computed columns to the array.\r\n  if (customColumns != null) {\r\n    for (const k in customColumns) {\r\n      const c = { ...customColumns[k] };\r\n      c.name = k;\r\n      c.custom = true;\r\n      eColumns[k] = c;\r\n    }\r\n  }\r\n\r\n  return {\r\n    columns: eColumns,\r\n    data   : newRows\r\n  };\r\n}\r\nexport default prepFormData;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { casFetchRows, computeFetchData } from '@sassoftware/restaflib';\r\n\r\nimport prepFormData from './prepFormData';\r\n/**\r\n * @description Fetch new records based on control argument\r\n * @async\r\n * @module fetchTableRows\r\n * @category restafedit/core\r\n * @param {fetchControl} control - info for records to retrieve\r\n * @param {appEnv} appEnv - appEnv\r\n * @returns {promise}  - { data:data, columns:ecolumns, pagination: pagination}\r\n * @example\r\n *   let control = {from: 10, count:50, format: false};\r\n *   let r = await fetchTableRows(control, appEnv);\r\n *   r is a fetchResult object\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function fetchTableRows (control, appEnv) {\r\n  let result = null;\r\n  if (appEnv.source === 'cas') {\r\n    result = await icasRows(control, appEnv);\r\n  } else {\r\n    result = await icomputeRows(control, appEnv);\r\n  }\r\n  return result;\r\n}\r\n\r\nasync function icasRows (control, appEnv) {\r\n  const { store, session } = appEnv;\r\n  const c = { ...control };\r\n  if (c.table == null) {\r\n    c.table = appEnv.appControl.table;\r\n  }\r\n  if (c.where == null) {\r\n    c.where = {};\r\n  }\r\n  if (c.from <= 0 || c.next === -1) {\r\n    return null;\r\n  }\r\n  const r = await casFetchRows(store, session, c);\r\n  let t = null;\r\n  if (r !== null) {\r\n    t = await prepFormData(r.data, appEnv);\r\n\r\n    appEnv.state = {\r\n      modified   : [],\r\n      pagination : { ...r.pagination },\r\n      currentPage: c,\r\n      data       : [],\r\n      columns    : []\r\n    };\r\n    if (appEnv.appControl.cachePolicy === true) {\r\n      appEnv.state.data = t.data;\r\n      appEnv.state.columns = t.columns;\r\n    }\r\n    t.pagination = { ...r.pagination };\r\n  }\r\n  return t;\r\n}\r\n\r\nasync function icomputeRows (control, appEnv) {\r\n  const { store, tableSummary } = appEnv;\r\n  const { table } = appEnv.appControl;\r\n  const tname = `${table.libref}.${table.name}`.toLowerCase();\r\n  // eslint-disable-next-line prefer-const\r\n  let payload = {\r\n    qs: {\r\n      start : control.from - 1,\r\n      limit : control.count,\r\n      format: (control.format != null) ? false : control.format\r\n    }\r\n  };\r\n  const data = await computeFetchData(store, tableSummary, tname, null, payload);\r\n  debugger;\r\n\r\n  let result = null;\r\n  if (data !== null) {\r\n    result = await prepFormData(data, appEnv);\r\n    appEnv.state = {\r\n      modified   : [],\r\n      pagination : {},\r\n      currentPage: {},\r\n      data       : result.data,\r\n      columns    : result.columns\r\n    };\r\n  }\r\n  return result;\r\n}\r\nexport default fetchTableRows;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport fetchTableRows from './fetchTableRows';\r\nimport { computeFetchData } from '@sassoftware/restaflib';\r\nimport prepFormData from './prepFormData';\r\n/**\r\n * @description Simplify scrolling using next|prev|top\r\n * @async\r\n * @module scrollTable\r\n * @category restafedit/core\r\n * @param {string} direction direction(next|prev|first)\r\n * @param {appEnv} appEnv\r\n * @returns {promise}  result ready for display or null if it did not scroll\r\n * @example\r\n *  let r = await scrollTable('next', appEnv);\r\n *\r\n *  if ( r === null) {\r\n *     handle when no data was writtten\r\n *  } else {\r\n *     handle new data\r\n * }\r\n *\r\n * Make sure you handle exceptions that are thrown.\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function scrollTable (direction, appEnv) {\r\n  let fetchResults;\r\n  if (appEnv.source === 'cas') {\r\n    fetchResults = await icasScroll(direction, appEnv);\r\n  } else {\r\n    fetchResults = await icomputeScroll(direction, appEnv);\r\n  }\r\n  return fetchResults;\r\n}\r\n\r\nasync function icasScroll (direction, appEnv) {\r\n  const { initialFetch, table } = appEnv.appControl;\r\n  let control;\r\n  if (direction === 'first') {\r\n    control = { ...initialFetch };\r\n    control.table = table;\r\n  } else {\r\n    control = appEnv.state.pagination[direction];\r\n    if (control.next === -1) {\r\n      return null;\r\n    }\r\n  }\r\n  const t = await fetchTableRows(control, appEnv);\r\n  return t;\r\n}\r\n\r\nasync function icomputeScroll (direction, appEnv) {\r\n  const { store, tableSummary } = appEnv;\r\n  const { table } = appEnv.appControl;\r\n\r\n  const tname = `${table.libref}.${table.name}`.toLowerCase();\r\n\r\n  // eslint-disable-next-line prefer-const\r\n\r\n  const payload = { qs: { limit: appEnv.appControl.initialFetch.count } };\r\n  const data = await computeFetchData(store, tableSummary, tname, direction, payload);\r\n\r\n  let result = null;\r\n  if (data !== null) {\r\n    result = await prepFormData(data, appEnv);\r\n    appEnv.state = {\r\n      modified   : [],\r\n      pagination : {},\r\n      currentPage: {},\r\n      data       : result.data,\r\n      columns    : result.columns\r\n    };\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nexport default scrollTable;\r\n","/* eslint-disable prefer-const */\r\n\r\nimport { initStore } from '@sassoftware/restaf';\r\nimport { casSetup, computeSetup, computeSetupTables } from '@sassoftware/restaflib';\r\n\r\n/**\r\n * @description Setup an Edit session\r\n * @async\r\n * @module setup\r\n * @category restafedit/core\r\n * @param {logonPayload} logonPayload  - information for connecting to Viya\r\n * @param {appControl} appControl      - control information\r\n *\r\n * @returns {promise}  returns appEnv to control the flow\r\n * @alias module: setup\r\n * @example\r\n *  const appEnv = await setup(logonPayload, appControl);\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n *\r\n */\r\n\r\nasync function setup (logonPayload, appControl, preamble) {\r\n  const store = initStore();\r\n  let appEnv;\r\n  if (logonPayload.authType == null) {\r\n    logonPayload.authType = 'code';\r\n  }\r\n  if (appControl.source === 'cas') {\r\n    appEnv = await icasSetup(store, logonPayload, appControl);\r\n  } else {\r\n    appEnv = await icomputeSetup(store, logonPayload, appControl, preamble);\r\n  }\r\n  return appEnv;\r\n}\r\n\r\nasync function icasSetup (store, logonPayload, appControl) {\r\n  const r = await casSetup(store, logonPayload);\r\n  let appEnv = {\r\n    source: appControl.source,\r\n\r\n    store,\r\n    session  : r.session,\r\n    servers  : r.servers,\r\n    restaflib: null,\r\n    logonPayload,\r\n    appControl,\r\n\r\n    state: {\r\n      modified   : [],\r\n      pagination : {},\r\n      currentPage: {},\r\n\r\n      data   : {},\r\n      columns: {}\r\n    },\r\n\r\n    id: Date()\r\n  };\r\n  return appEnv;\r\n};\r\n\r\nasync function icomputeSetup (store, logonPayload, appControl, preamble) {\r\n  // eslint-disable-next-line prefer-const\r\n  debugger;\r\n  let session = await computeSetup(store, appControl.computeContext, logonPayload);\r\n  let tableSummary = await computeSetupTables(store, session, appControl.table, preamble);\r\n  let appEnv = {\r\n    source: appControl.source,\r\n\r\n    store,\r\n    session,\r\n    tableSummary,\r\n    servers  : null,\r\n    restaflib: null,\r\n    logonPayload,\r\n    appControl,\r\n\r\n    state: {\r\n      modified   : [],\r\n      pagination : {},\r\n      currentPage: {},\r\n\r\n      data   : {},\r\n      columns: {}\r\n    },\r\n\r\n    id: Date()\r\n  };\r\n  return appEnv;\r\n}\r\n\r\nexport default setup;\r\n"],"names":["commonHandler","type","data","rowIndex","appEnv","appControl","editControl","handlers","Promise","resolve","statusCode","msg","_ref","e","reject","updateTableRows","result","source","store","session","_appEnv$appControl2","table","byvars","columns","state","length","t","k","custom","w","forEach","casUpdateData","where","then","iupdateCasTable","_iupdateCasTable","iupdateComputeTable","_appEnv$appControl","src","libref","name","set","comma","value2String","andBit","asrc","split","console","log","payload","code","apiCall","links","job","jobState","qs","newState","timeout","status","_iupdateComputeTable","_temp2","value","JSON","stringify","toString","cellEdit","_exit3","newDataRow","r","_exit2","_result2","cachePolicy","autoSave","_commonHandler","_temp","_extends","_appEnv$appControl$ed","f","svalue","Type","parseFloat","isNaN","text2Float","_temp6","_temp5","_settle","pact","s","_Pact","o","bind","v","observer","_temp3","eColumns","schema","i","Column","toLowerCase","Label","customColumns","c","newRows","rows","array","body","row","rowObj","makeRowObject","t1","push","thenable","_cycle","_temp4","prototype","onFulfilled","onRejected","this","callback","_this","control","from","next","casFetchRows","prepFormData","_prepFormData2","modified","pagination","currentPage","icasRows","_icasRows","tableSummary","tname","computeFetchData","start","limit","count","format","_prepFormData","icomputeRows","_icomputeRows","scrollTable","direction","icasScroll","initialFetch","fetchTableRows","_icasScroll","fetchResults","icomputeScroll","logonPayload","preamble","initStore","authType","icasSetup","casSetup","servers","restaflib","id","Date","icomputeSetup","computeSetup","computeContext","computeSetupTables"],"mappings":"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"}