{"version":3,"file":"index.umd.js","sources":["../src/commonHandler.js","../src/updateTableRows.js","../src/prepFormData.js","../src/uploadData.js","../src/cellEdit.js","../src/text2Float.js","../src/distinctValues.js","../src/casTableUnique.js","../src/sasTableUnique.js","../src/fetchTableRows.js","../src/scrollTable.js","../src/setup.js","../src/sort.js"],"sourcesContent":["/*\r\n * Copyright © 2022, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @description Run init, main or term handlers\r\n * @async\r\n * @module commonHandler\r\n * @category restafedit/core\r\n * @param {string} type   - type of exit (init|main|term)\r\n * @param {rowObject} data        - rowObject\r\n * @param {number} rowIndex    - client-side Row Index\r\n * @param {appEnv} appEnv      - app Environment from setup\r\n * @returns {promise}     - [data, status]\r\n * @example\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function commonHandler (type, data, rowIndex, appEnv) {\r\n  const { handlers } = appEnv.appControl.editControl;\r\n  if (handlers[type] == null) {\r\n    return [data, { statusCode: 0, msg: null }];\r\n  } else {\r\n    const [newDataRow, status] = await handlers[type](data, rowIndex, appEnv, type);\r\n    return [newDataRow, status];\r\n  }\r\n};\r\nexport default commonHandler;\r\n","import { casUpdateData } from '@sassoftware/restaflib';\r\n/**\r\n * @description Update the row on the server\r\n * @async\r\n * @module updateTableRows\r\n * @category restafedit/core\r\n * @param {rowObject} data  - data as a rowObject\r\n * @param {appEnv} appEnv   - app Environment object from setup\r\n * @returns {promise}       - key is completion code\r\n * @example\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function updateTableRows (data, appEnv) {\r\n  let result;\r\n  if (appEnv.source === 'cas') {\r\n    result = await iupdateCasTable(data, appEnv);\r\n  } else {\r\n    result = await iupdateComputeTable(data, appEnv);\r\n  }\r\n  return result;\r\n}\r\n\r\nasync function iupdateCasTable (data, appEnv) {\r\n  const { store, session } = appEnv;\r\n  const { table, byvars } = appEnv.appControl;\r\n  const columns = appEnv.state.columns;\r\n\r\n  if (byvars === null || byvars.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  const t = {};\r\n  for (const k in data) {\r\n    if (!(k === '_index_' || k === '_rowIndex') && columns[k].custom === false) {\r\n      t[k] = data[k];\r\n    };\r\n  };\r\n\r\n  const w = {};\r\n  byvars.forEach((k) => {\r\n    w[k] = t[k];\r\n  });\r\n  const payload = {\r\n    table,\r\n    data : t,\r\n    where: w\r\n  };\r\n\r\n  const result = await casUpdateData(store, session, payload);\r\n  const r = result.items().toJS();\r\n  const status = { statusCode: 0, msg: 'Save successful' };\r\n\r\n  if (r.disposition.severity !== 'Normal') {\r\n    status.statusCode = 2;\r\n    status.msg = t.disposition.severity.reason;\r\n  };\r\n  return status;\r\n}\r\n\r\nasync function iupdateComputeTable (data, appEnv) {\r\n  const { store, session } = appEnv;\r\n  const { table, byvars } = appEnv.appControl;\r\n  const columns = appEnv.state.columns;\r\n  ;\r\n\r\n  if (byvars === null || byvars.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  let src =\r\n    `proc sql; update ${table.libref}.${table.name}`;\r\n  let set = 'SET ';\r\n  let comma = ' ';\r\n  for (const k in data) {\r\n    if (columns[k].custom === false) {\r\n      set = set + comma + k + '=' + value2String(data[k]);\r\n    }\r\n    comma = ', ';\r\n  };\r\n  src = src + ' ' + set;\r\n  let w = ' WHERE ';\r\n  let andBit = ' ';\r\n\r\n  byvars.forEach((k) => {\r\n    w = w + andBit + k + '=' + value2String(data[k]);\r\n    andBit = 'AND ';\r\n  });\r\n  src = src + ' ' + w + ';run;';\r\n  const asrc = src.split(/\\r?\\n/);\r\n\r\n  const payload = {\r\n    data: { code: asrc }\r\n  };\r\n\r\n  // console.log(asrc);\r\n\r\n  const job = await store.apiCall(session.links('execute'), payload);\r\n  const qs = {\r\n    qs: {\r\n      newState: 'Completed',\r\n      timeout : 1\r\n    }\r\n  };\r\n\r\n  // eslint-disable-next-line no-unused-vars\r\n  const status = await store.jobState(job, qs);\r\n  const c = (status.data === 'completed' ? 0 : 1);\r\n\r\n  return { statusCode: c, msg: status.data };\r\n}\r\n\r\nfunction value2String (value) {\r\n  let valueString;\r\n  if (value == null) {\r\n    valueString = '.';\r\n  } else if (typeof value === 'string') {\r\n    valueString = JSON.stringify(value);\r\n  } else {\r\n    valueString = value.toString();\r\n  }\r\n  return valueString;\r\n}\r\n\r\nexport default updateTableRows;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/*\r\n* output\r\n* extended columns and data ready for use in dataform and table\r\n*/\r\nimport commonHandler from './commonHandler';\r\n/**\r\n * @description reduce fetch results\r\n * @private\r\n * @async\r\n * @module prepFormData\r\n * @param {object} result - result from casFetchRow(rows and schema)\r\n * @param {object} appEnv - app Environment from setup\r\n * @returns {promise}     - {columns: eColumns, rowsObject: newRows}\r\n */\r\nasync function prepFormData (result, appEnv) {\r\n  const { schema, rows } = result;\r\n  const customColumns = appEnv.appControl.customColumns;\r\n  let status = { statusCode: 0, msg: 'Initialization was successful' };\r\n\r\n  const makeRowObject = (columns, row, rown) => {\r\n    const rowObj = { _rowIndex: rown };\r\n    row.forEach((r, i) => {\r\n      const s = columns[i];\r\n      const name = s.Column.toLowerCase();\r\n      rowObj[name] = r;\r\n    });\r\n\r\n    if (customColumns != null) {\r\n      for (const k in customColumns) {\r\n        const c = customColumns[k];\r\n        const name = c.Column.toLowerCase();\r\n        rowObj[name] = c.value;\r\n      }\r\n    }\r\n    return rowObj;\r\n  };\r\n\r\n  const newRows = [];\r\n  for (let i = 0; i < rows.length; i++) {\r\n    const t = makeRowObject(schema, rows[i], i);\r\n\r\n    const [t1, statusi] = await commonHandler('init', t, i, appEnv);\r\n    status = statusi;\r\n    newRows.push(t1);\r\n  };\r\n\r\n  // extend column and make it an object\r\n  const eColumns = {};\r\n  schema.forEach((s, i) => {\r\n    const name = s.Column.toLowerCase();\r\n    s.name = name;\r\n    s.Label = (s.Label == null || s.Label.length === 0) ? s.Column : s.Label;\r\n    if (s.Type == null) {\r\n      s.Type = (s.type == null) ? 'double' : s.type;\r\n    }\r\n    s.custom = false;\r\n    eColumns[name] = s;\r\n  });\r\n\r\n  // add computed columns to the array.\r\n  if (customColumns != null) {\r\n    for (const k in customColumns) {\r\n      const c = { ...customColumns[k] };\r\n      c.name = k;\r\n      c.custom = true;\r\n      eColumns[k] = c;\r\n    }\r\n  }\r\n\r\n  return {\r\n    columns: eColumns,\r\n    data   : newRows,\r\n    status\r\n  };\r\n}\r\nexport default prepFormData;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { casUpload } from '@sassoftware/restaflib';\r\n\r\n/**\r\n * @description Get unique values for a specific column\r\n * @async\r\n * @module uploadData\r\n * @category restafedit/core\r\n * @param {object} output table\r\n * @param {array}  data\r\n * @param {array}  drop fields to delete\r\n * @param {object} addon columns\r\n * @param {appEnv} appEnv   - app Environment from setup\r\n * @returns {promise}       - {an array of unique values }\r\n * @example\r\n *  let selectList = await distinctValues('company', appEnv))\r\n *  This is useful to get a list of unique values for selected columns.\r\n *  {company:['IBM', 'Microsoft', 'SAS'] }\r\n */\r\n\r\nasync function uploadData (table, data, drop, addon, appEnv) {\r\n  const { store, session } = appEnv;\r\n  debugger;\r\n  let t = data[0];\r\n  for (let j = 0; j < drop.length; j++) {\r\n    delete t[drop[j]];\r\n  }\r\n  t = { ...addon, ...t };\r\n  const columns = Object.keys(t);\r\n\r\n  let csvArray = columns.join(',') + '\\n';\r\n  debugger;\r\n  for (let i = 0; i < data.length; i++) {\r\n    let temp = data[i];\r\n    temp = { ...temp, ...addon };\r\n    const valArray = [];\r\n    columns.forEach((c, l) => {\r\n      let v = temp[c];\r\n      if (typeof v === 'string') {\r\n        v = v.trim();\r\n      }\r\n      valArray[l] = v;\r\n    });\r\n    csvArray = csvArray + valArray.join(',') + '\\n';\r\n  }\r\n  debugger;\r\n  console.log(csvArray);\r\n  console.log(casUpload);\r\n  console.log(_casTableUpload);\r\n  let result;\r\n  if (appEnv.source === 'cas') {\r\n    result = await _casTableUpload(store, session, table, csvArray);\r\n  } else {\r\n    result = {};\r\n  }\r\n  debugger;\r\n  console.log(result.items().toJS());\r\n  return result;\r\n}\r\n\r\nasync function _casTableUpload (store, session, table, csvArray) {\r\n  debugger;\r\n  console.log('calling casUpload');\r\n  const r = await casUpload(store, session, null, 'casuser.temp', true, csvArray);\r\n  console.log('end of casUpload');\r\n  debugger;\r\n  console.log(r.items().toJS());\r\n}\r\nexport default uploadData;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport text2Float from './text2Float';\r\nimport commonHandler from './commonHandler';\r\nimport updateTableRows from './updateTableRows';\r\n\r\n/**\r\n * @description Process edit of a cell and optionally save the data\r\n * @async\r\n * @module cellEdit\r\n * @category restafedit/core\r\n * @param {string} name     - name of the field (lower case)\r\n * @param {*} value         - the new value for name field\r\n * @param {number} rowIndex - row Index ( index in the data array on client)\r\n * @param {rowObject} data  - RowObject for the entire row prior to change\r\n * @param {appEnv} appEnv   - app Environment from setup\r\n * @returns {promise}       - {data: updated data, status: status }\r\n * @example\r\n * data schema {column1: value, column2, value,...}\r\n * status schema {statusCode: 0|1|2, msg: some string}\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function cellEdit (name, value, rowIndex, data, appEnv) {\r\n  /* do not modify the data directly. caller will probably do a setState */\r\n\r\n  let newDataRow = { ...data };\r\n  const columns = appEnv.state.columns;\r\n  const { handlers, autoSave } = appEnv.appControl.editControl;\r\n\r\n  newDataRow[name] = text2Float(value, columns[name]);\r\n  let status = { statusCode: 0, msg: '' };\r\n\r\n  if (handlers[name] != null) {\r\n    const r = await handlers[name](newDataRow, name, rowIndex, appEnv);\r\n    newDataRow = r[0];\r\n    status = r[1];\r\n    if (status.statusCode === 2) {\r\n      return { data: r[0], status };\r\n    }\r\n  }\r\n  let r = await commonHandler('main', newDataRow, rowIndex, appEnv);\r\n  if (autoSave === true) {\r\n    r = await commonHandler('term', r[0], rowIndex, appEnv);\r\n    status = r[1];\r\n    if (status.statusCode === 2) {\r\n      return { data: r[0], status };\r\n    }\r\n    status = await updateTableRows(r[0], appEnv);\r\n  }\r\n  newDataRow = r[0];\r\n\r\n  if (appEnv.appControl.cachePolicy === true) {\r\n    appEnv.state.data[data._rowIndex] = newDataRow;\r\n  }\r\n\r\n  return ({ data: newDataRow, status });\r\n}\r\nexport default cellEdit;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nfunction text2Float (value, f) {\r\n  let svalue = value;\r\n  const t = f.Type.toLowerCase();\r\n  if (typeof svalue === 'string' && (t === 'decimal' || t === 'number' || t === 'double' || t === 'float')) {\r\n    svalue = parseFloat(value * 1.0);\r\n    if (isNaN(value) === true) {\r\n      value = 0;\r\n    }\r\n  }\r\n  return svalue;\r\n}\r\nexport default text2Float;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport casTableUnique from './casTableUnique';\r\nimport sasTableUnique from './sasTableUnique';\r\n\r\n/**\r\n * @description Get unique values for a specific column\r\n * @async\r\n * @module distinctValues\r\n * @category restafedit/core\r\n * @param {object} table {caslib: xxx, name: yyy}\r\n * @param {string} columnName    column name\r\n * @param {appEnv} appEnv   - app Environment from setup\r\n * @returns {promise}       - {an array of unique values }\r\n * @example\r\n *  let selectList = await distinctValues('company', appEnv))\r\n *  This is useful to get a list of unique values for selected columns.\r\n *  {company:['IBM', 'Microsoft', 'SAS'] }\r\n */\r\n\r\nasync function distinctValues (table, columnName, appEnv, payload) {\r\n  let data;\r\n  if (appEnv.source === 'cas') {\r\n    data = await casTableUnique(table, columnName, appEnv, payload);\r\n  } else {\r\n    data = await sasTableUnique(table, columnName, appEnv, payload);\r\n  }\r\n  return data;\r\n};\r\nexport default distinctValues;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nimport { caslRun } from '@sassoftware/restaflib';\r\n\r\n/**\r\n * @description Get unique values for a specific column\r\n * @async\r\n * @private\r\n * @module casTableUnique\r\n * @category restafedit/core\r\n * @param {object} table object\r\n * @param {string} columnName    column name\r\n * @param {appEnv} appEnv   app Environment from setup\r\n * @returns {promise}       {an array of unique values }\r\n * @example\r\n *  let selectList = await casTableUnique('company, appEnv))\r\n *  This is useful to get a list of unique values for selected columns.\r\n *  {columnName:[ array of unquew values] }\r\n */\r\n\r\nasync function casTableUnique (table, columnName, appEnv, payload) {\r\n  const { store, session } = appEnv;\r\n\r\n  const src = `\r\n  results = selectionLists(_args_.column,_args_.table.caslib, _args_.table.name);\r\n  send_response({casResults = {data=results}});\r\n  `\r\n  ;\r\n  const args = {\r\n    table,\r\n    column: columnName\r\n  };\r\n\r\n  const result = await caslRun(store, session, src, args, true);\r\n  if (result.results.casResults.data.statusCode !== 0) {\r\n    // eslint-disable-next-line no-throw-literal\r\n    throw 'Failed to create unique list';\r\n  }\r\n\r\n  const data = result.results.casResults.data.data;\r\n\r\n  return data;\r\n};\r\nexport default casTableUnique;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @description Get unique values for a specific column(sas table)\r\n * @async\r\n * @private\r\n * @module sasTableUnique\r\n * @category restafedit/core\r\n * @param {string} columnName    column name\r\n * @param {appEnv} appEnv   app Environment from setup\r\n * @returns {promise}       {an array of unique values }\r\n * @example\r\n *  let selectList = await casTableUnique('company, appEnv))\r\n *  This is useful to get a list of unique values for selected columns.\r\n *  {columnName:[ array of unquew values] }\r\n */\r\n\r\nasync function sasTableUnique (columnName, appEnv, payload) {\r\n  const data = {};\r\n  data[columnName] = [];\r\n  return data;\r\n};\r\nexport default sasTableUnique;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { casFetchRows, computeFetchData } from '@sassoftware/restaflib';\r\n\r\nimport prepFormData from './prepFormData';\r\n/**\r\n * @description Fetch new records based on control argument\r\n * @async\r\n * @private\r\n * @module fetchTableRows\r\n * @category restafedit/core\r\n * @param {fetchControl} control - info for records to retrieve\r\n * @param {appEnv} appEnv - appEnv\r\n * @returns {promise}  - { data:data, columns:ecolumns, pagination: pagination}\r\n * @example\r\n *   let control = {from: 10, count:50, format: false};\r\n *   let r = await fetchTableRows(control, appEnv);\r\n *   r is a fetchResult object\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function fetchTableRows (control, appEnv) {\r\n  let result = null;\r\n  if (appEnv.source === 'cas') {\r\n    result = await icasRows(control, appEnv);\r\n  } else {\r\n    result = await icomputeRows(control, appEnv);\r\n  }\r\n  return result;\r\n}\r\n\r\nasync function icasRows (control, appEnv) {\r\n  const { store, session } = appEnv;\r\n  const c = { ...control };\r\n  if (c.from <= 0 || c.next === -1) {\r\n    return null;\r\n  }\r\n  debugger;\r\n  if (c.where == null) {\r\n    c.where = ' ';\r\n  }\r\n  const r = await casFetchRows(store, session, c);\r\n\r\n  let t = null;\r\n  if (r !== null) {\r\n    t = await prepFormData(r.data, appEnv);\r\n\r\n    appEnv.state = {\r\n      modified   : [],\r\n      pagination : { ...r.pagination },\r\n      currentPage: c,\r\n      data       : [],\r\n      columns    : []\r\n    };\r\n    if (appEnv.appControl.cachePolicy === true) {\r\n      appEnv.state.data = t.data;\r\n      appEnv.state.columns = t.columns;\r\n    }\r\n    t.pagination = { ...r.pagination };\r\n  }\r\n  return t;\r\n}\r\n\r\nasync function icomputeRows (control, appEnv) {\r\n  const { store, tableSummary } = appEnv;\r\n  const { table } = appEnv.appControl;\r\n  const tname = `${table.libref}.${table.name}`.toLowerCase();\r\n  // eslint-disable-next-line prefer-const\r\n  let payload = {\r\n    qs: {\r\n      start : control.from - 1,\r\n      limit : control.count,\r\n      format: (control.format != null) ? false : control.format\r\n    }\r\n  };\r\n  const data = await computeFetchData(store, tableSummary, tname, null, payload);\r\n  ;\r\n\r\n  let result = null;\r\n  if (data !== null) {\r\n    result = await prepFormData(data, appEnv);\r\n    appEnv.state = {\r\n      modified   : [],\r\n      pagination : {},\r\n      currentPage: {},\r\n      data       : result.data,\r\n      columns    : result.columns\r\n    };\r\n  }\r\n  return result;\r\n}\r\nexport default fetchTableRows;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n// import fetchTableRows from './fetchTableRows';\r\nimport { computeFetchData, casFetchRows } from '@sassoftware/restaflib';\r\nimport prepFormData from './prepFormData';\r\n/**\r\n * @description Simplify scrolling using next|prev|top\r\n * @async\r\n * @module scrollTable\r\n * @category restafedit/core\r\n * @param {string} direction direction(next|prev|first)\r\n * @param {appEnv} appEnv\r\n * @param {object=} payload  override pogination with custom scrolling\r\n * @returns {promise}  result ready for display or null if it did not scroll\r\n * @example\r\n *  let r = await scrollTable('next', appEnv);\r\n *\r\n *  if ( r === null) {\r\n *     handle when no data was writtten\r\n *  } else {\r\n *     handle new data\r\n * }\r\n *\r\n * Make sure you handle exceptions that are thrown.\r\n *\r\n * For custom scrolling, pass the scrolling information in the optional third parameter.\r\n * The content of the payload depends on whether the source is cas or compute.\r\n * For compute see the documentation for rowset in compute service.<https://developer.sas.com/apis/rest/Compute/#get-a-row-set-from-a-data-set>\r\n * CAS payload is not as rich the rowset for compute service\r\n * The payload for CAS is as follows\r\n *  { start: <number>\r\n *    count: <number>\r\n *    format: true|false,\r\n *    where: <where string>\r\n * };\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function scrollTable (direction, appEnv, payload) {\r\n  let fetchResults;\r\n  if (appEnv.source === 'cas') {\r\n    fetchResults = await icasScroll(direction, appEnv, payload);\r\n  } else {\r\n    fetchResults = await icomputeScroll(direction, appEnv, payload);\r\n  }\r\n  return fetchResults;\r\n}\r\n\r\nasync function icasScroll (direction, appEnv, payload) {\r\n  const { store, session } = appEnv;\r\n  const { initialFetch, table } = appEnv.appControl;\r\n  let control;\r\n\r\n  if (direction === 'first') {\r\n    control = { ...initialFetch };\r\n  } else if (direction !== null) {\r\n    control = { ...appEnv.state.pagination[direction] };\r\n    if (control.next === -1 || control.from <= 0) {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  if (payload != null) {\r\n    control = { ...payload };\r\n  }\r\n\r\n  control.table = table;\r\n  debugger;\r\n  const r = await casFetchRows(store, session, control);\r\n\r\n  let t = null;\r\n  if (r !== null) {\r\n    t = await prepFormData(r.data, appEnv);\r\n    appEnv.state = {\r\n      modified   : [],\r\n      pagination : { ...r.pagination },\r\n      currentPage: control,\r\n      data       : [],\r\n      columns    : []\r\n    };\r\n    if (appEnv.appControl.cachePolicy === true) {\r\n      appEnv.state.data = t.data;\r\n      appEnv.state.columns = t.columns;\r\n    }\r\n    t.pagination = { ...r.pagination };\r\n    return t;\r\n  }\r\n}\r\n\r\nasync function icomputeScroll (direction, appEnv, payload) {\r\n  const { store, tableSummary } = appEnv;\r\n  const { table, initialFetch } = appEnv.appControl;\r\n  let control = null;\r\n\r\n  const tname = `${table.libref}.${table.name}`.toLowerCase();\r\n\r\n  if (payload == null) {\r\n    if (direction === 'first') {\r\n      control = { ...initialFetch };\r\n    }\r\n  } else {\r\n    control = { ...payload };\r\n  }\r\n\r\n  // eslint-disable-next-line prefer-const\r\n\r\n  const data = await computeFetchData(store, tableSummary, tname, direction, control);\r\n\r\n  let result = null;\r\n  if (data !== null) {\r\n    result = await prepFormData(data, appEnv);\r\n    appEnv.state = {\r\n      modified   : [],\r\n      pagination : {},\r\n      currentPage: {},\r\n      data       : result.data,\r\n      columns    : result.columns\r\n    };\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nexport default scrollTable;\r\n","/* eslint-disable prefer-const */\r\n\r\nimport { initStore } from '@sassoftware/restaf';\r\nimport { casSetup, computeSetup, computeSetupTables } from '@sassoftware/restaflib';\r\nimport deepmerge from 'deepmerge';\r\n\r\n/**\r\n * @description Setup an Edit session\r\n * @async\r\n * @module setup\r\n * @category restafedit/core\r\n * @param {logonPayload} logonPayload  - information for connecting to Viya\r\n * @param {appControl} appControl      - control information\r\n *\r\n * @returns {promise}  returns appEnv to control the flow\r\n * @alias module: setup\r\n * @example\r\n *  const appEnv = await setup(logonPayload, appControl);\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n *\r\n */\r\n\r\nasync function setup (logonPayload, appControl, preamble) {\r\n  const store = initStore();\r\n  let appEnv;\r\n  if (logonPayload.authType == null) {\r\n    logonPayload.authType = 'code';\r\n  }\r\n  if (appControl.source === 'cas') {\r\n    appEnv = await icasSetup(store, logonPayload, appControl);\r\n  } else {\r\n    appEnv = await icomputeSetup(store, logonPayload, appControl, preamble);\r\n  }\r\n  return appEnv;\r\n}\r\n\r\nasync function icasSetup (store, logonPayload, appControl) {\r\n  const r = await casSetup(store, logonPayload);\r\n  let appEnv = {\r\n    source: appControl.source,\r\n\r\n    store,\r\n    session  : r.session,\r\n    servers  : r.servers,\r\n    restaflib: null,\r\n    logonPayload,\r\n    appControl,\r\n\r\n    state: {\r\n      modified   : [],\r\n      pagination : {},\r\n      currentPage: {},\r\n\r\n      data   : {},\r\n      columns: {}\r\n    },\r\n\r\n    id: Date()\r\n  };\r\n  return appEnv;\r\n};\r\n\r\nasync function icomputeSetup (store, logonPayload, appControl, preamble) {\r\n  // eslint-disable-next-line prefer-const\r\n  ;\r\n  let session = await computeSetup(store, appControl.computeContext, logonPayload);\r\n  let tableSummary = await computeSetupTables(store, session, appControl.table, preamble);\r\n  let appEnv = {\r\n    source: appControl.source,\r\n\r\n    store,\r\n    session,\r\n    tableSummary,\r\n\r\n    servers  : null,\r\n    restaflib: null,\r\n\r\n    logonPayload,\r\n    appControl: deepmerge(appControl),\r\n\r\n    state: {\r\n      modified   : [],\r\n      pagination : {},\r\n      currentPage: {},\r\n\r\n      data   : {},\r\n      columns: {}\r\n    },\r\n\r\n    id: Date()\r\n  };\r\n  return appEnv;\r\n}\r\n\r\nexport default setup;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @description sort data for seelected column\r\n * @async\r\n * @module sort\r\n * @private\r\n * @category restafedit/core\r\n * @param {string} columnName    column name\r\n * @param {string} direction  A|D   (A=ascending, B=descending)\r\n * @param {array}  data if null, the data cached in appEnv will be used.\r\n * @param {appEnv} appEnv   - app Environment from setup\r\n * @returns {promise}       returns the sorted array\r\n * @example\r\n *  let status = await distinctValues('company', appEnv))\r\n *  This is useful to get a list of unique values for selected columns.\r\n *  {company:['IBM', 'Microsoft', 'SAS'] }\r\n */\r\n\r\nasync function sort (columnName, appEnv, payload) {\r\n  return [];\r\n};\r\nexport default sort;\r\n"],"names":["commonHandler","type","data","rowIndex","appEnv","appControl","editControl","handlers","Promise","resolve","statusCode","msg","_ref","e","reject","updateTableRows","result","source","store","session","_appEnv$appControl2","table","byvars","state","columns","length","t","k","custom","w","forEach","casUpdateData","where","status","items","toJS","disposition","severity","reason","iupdateCasTable","then","_iupdateCasTable","src","libref","name","comma","set","value2String","andBit","payload","code","split","apiCall","links","job","jobState","qs","newState","timeout","iupdateComputeTable","_temp2","value","JSON","stringify","toString","_settle","pact","s","_Pact","o","bind","v","observer","prepFormData","_temp3","eColumns","schema","i","Column","toLowerCase","Label","Type","customColumns","c","_extends","newRows","rows","array","body","row","rown","rowObj","_rowIndex","r","makeRowObject","push","statusi","_cycle","thenable","prototype","onFulfilled","onRejected","this","callback","_this","csvArray","console","log","casUpload","cellEdit","_exit3","newDataRow","_exit2","_result2","cachePolicy","autoSave","_commonHandler","_updateTableRows","_temp","_appEnv$appControl$ed","f","svalue","parseFloat","isNaN","text2Float","_temp6","_temp5","distinctValues","columnName","caslRun","column","results","casResults","casTableUnique","_casTableUnique","sasTableUnique","control","from","next","casFetchRows","_prepFormData2","modified","pagination","currentPage","icasRows","icomputeRows","tableSummary","tname","computeFetchData","start","limit","count","format","_icomputeRows","scrollTable","direction","fetchResults","initialFetch","icasScroll","_icasScroll","icomputeScroll","_appEnv$appControl","_prepFormData","_icomputeScroll","logonPayload","preamble","initStore","authType","casSetup","servers","restaflib","id","Date","icasSetup","_icasSetup","computeSetup","computeContext","computeSetupTables","deepmerge","icomputeSetup","uploadData","drop","addon","j","Object","keys","join","temp","l","trim","valArray","_loop","_casTableUpload","_casTableUpload2","_temp4"],"mappings":"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"}