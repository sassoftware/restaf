{"version":3,"file":"index.module.js","sources":["../src/commonHandler.js","../src/updateTableRows.js","../src/cellEdit.js","../src/text2Float.js","../src/prepFormData.js","../src/fetchTableRows.js","../src/scrollTable.js","../src/setup.js"],"sourcesContent":["/*\r\n * Copyright © 2022, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @description Run init, main or term handlers\r\n * @async\r\n * @module commonHandler\r\n * @category restafedit/core\r\n * @param {string} type   - type of exit (init|main|term)\r\n * @param {rowObject} data        - rowObject\r\n * @param {number} rowIndex    - client-side Row Index\r\n * @param {appEnv} appEnv      - app Environment from setup\r\n * @returns {promise}     - [data, status]\r\n * @example\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function commonHandler (type, data, rowIndex, appEnv) {\r\n  const { handlers } = appEnv.appControl.editControl;\r\n  if (handlers[type] == null) {\r\n    return [data, { statusCode: 0, msg: null }];\r\n  } else {\r\n    const [newDataRow, status] = await handlers[type](data, rowIndex, appEnv, type);\r\n    return [newDataRow, status];\r\n  }\r\n};\r\nexport default commonHandler;\r\n","\r\nimport { casUpdateData } from '@sassoftware/restaflib';\r\n/**\r\n * @description Update the row on the server\r\n * @async\r\n * @module updateTableRows\r\n * @category restafedit/core\r\n * @param {rowObject} data  - data as a rowObject\r\n * @param {appEnv} appEnv   - app Environment object from setup\r\n * @returns {promise}       - key is completion code\r\n * @example\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function updateTableRows (data, appEnv) {\r\n  let result;\r\n  if (appEnv.source === 'cas') {\r\n    result = await iupdateCasTable(data, appEnv);\r\n  } else {\r\n    result = await iupdateComputeTable(data, appEnv);\r\n  }\r\n  return result;\r\n}\r\n\r\nasync function iupdateCasTable (data, appEnv) {\r\n  const { store, session } = appEnv;\r\n  const { table, byvars } = appEnv.appControl.dataControl;\r\n  const columns = appEnv.state.columns;\r\n  const t = {};\r\n\r\n  if (byvars === null || byvars.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  for (const k in data) {\r\n    if (k !== '_index_' && columns[k].custom === false) {\r\n      t[k] = data[k];\r\n    };\r\n  };\r\n\r\n  const w = {};\r\n  byvars.forEach((k) => {\r\n    w[k] = t[k];\r\n  });\r\n  const payload = {\r\n    table,\r\n    data : t,\r\n    where: w\r\n  };\r\n\r\n  return await casUpdateData(store, session, payload);\r\n}\r\n\r\nasync function iupdateComputeTable (data, appEnv) {\r\n  const { store, session } = appEnv;\r\n  const { table, byvars } = appEnv.appControl.dataControl;\r\n  debugger;\r\n  if (byvars === null || byvars.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  let src =\r\n    `proc sql; update ${table.libref}.${table.name};`;\r\n  let set = 'set ';\r\n  let comma = ' ';\r\n  for (const k in data) {\r\n    set = set + comma + k + '=' + value2String(data[k]);\r\n    comma = ', ';\r\n  };\r\n\r\n  let w = 'where  ';\r\n  let andBit = ' ';\r\n\r\n  byvars.forEach((k) => {\r\n    w = w + andBit + k + '=' + value2String(data[k]);\r\n    andBit = 'AND ';\r\n  });\r\n  src = src + ' ' + w + ';run;';\r\n  const asrc = src.split(/\\r?\\n/);\r\n  console.log(asrc);\r\n\r\n  const payload = {\r\n    data: { code: asrc }\r\n  };\r\n\r\n  const job = await store.apiCall(session.links('execute'), payload);\r\n  const qs = {\r\n    qs: {\r\n      newState: 'Completed',\r\n      timeout : 1\r\n    }\r\n  };\r\n\r\n  const status = await store.jobState(job, qs);\r\n  console.log(status.data);\r\n  return true;\r\n}\r\n\r\nfunction value2String (value) {\r\n  let valueString;\r\n  if (value == null) {\r\n    valueString = '.';\r\n  } else if (typeof value === 'string') {\r\n    valueString = JSON.stringify(value);\r\n  } else {\r\n    valueString = value.toString();\r\n  }\r\n  return valueString;\r\n}\r\n\r\nexport default updateTableRows;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport text2Float from './text2Float';\r\nimport commonHandler from './commonHandler';\r\nimport updateTableRows from './updateTableRows';\r\n\r\n/**\r\n * @description Process edit of a cell and optionally save the data\r\n * @async\r\n * @module cellEdit\r\n * @category restafedit/core\r\n * @param {string} name     - name of the field (lower case)\r\n * @param {*} value         - the new value for name field\r\n * @param {number} rowIndex - row Index ( index in the data array on client)\r\n * @param {rowObject} data  - RowObject for the entire row prior to change\r\n * @param {appEnv} appEnv   - app Environment from setup\r\n * @returns {promise}       - {data: updated data, status: status }\r\n * @example\r\n * data schema {column1: value, column2, value,...}\r\n * status schema {statusCode: 0|1|2, msg: some string}\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function cellEdit (name, value, rowIndex, data, appEnv) {\r\n  /* do not modify the data directly. caller will probably do a setState */\r\n  let newDataRow = (data !== null) ? { ...data } : { ...appEnv.state.data[rowIndex] };\r\n  const columns = appEnv.state.columns;\r\n  const { handlers, autoSave } = appEnv.appControl.editControl;\r\n\r\n  newDataRow[name] = text2Float(value, columns[name]);\r\n  let status = { statusCode: 0, msg: '' };\r\n\r\n  if (handlers[name] != null) {\r\n    const r = await handlers[name](newDataRow, name, rowIndex, appEnv);\r\n    newDataRow = r[0];\r\n    status = r[1];\r\n    if (status.statusCode === 2) {\r\n      return { data: r[0], status };\r\n    }\r\n  }\r\n  let r = await commonHandler('main', newDataRow, rowIndex, appEnv);\r\n  if (autoSave === true) {\r\n    r = await commonHandler('term', r[0], rowIndex, appEnv);\r\n    status = r[1];\r\n    if (status.statusCode === 2) {\r\n      return { data: r[0], status };\r\n    }\r\n\r\n    await updateTableRows(newDataRow, appEnv);\r\n  }\r\n  newDataRow = r[0];\r\n  status.msg = status.msg + ' / ' + r[1];\r\n\r\n  if (appEnv.appControl.dataControl.cachePolicy === true) {\r\n    appEnv.state.data[rowIndex] = newDataRow;\r\n  }\r\n\r\n  return ({ data: newDataRow, status });\r\n}\r\nexport default cellEdit;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nfunction text2Float (value, f) {\r\n  let svalue = value;\r\n  if (typeof svalue === 'string' && (f.Type === 'decimal' || f.Type === 'number' || f.Type === 'double')) {\r\n    svalue = parseFloat(value * 1.0);\r\n    if (isNaN(value) === true) {\r\n      value = 0;\r\n    }\r\n  }\r\n  return svalue;\r\n}\r\nexport default text2Float;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/*\r\n* output\r\n* extended columns and data ready for use in dataform and table\r\n*/\r\nimport commonHandler from './commonHandler';\r\n/**\r\n * @description reduce fetch results\r\n * @private\r\n * @async\r\n * @module prepFormData\r\n * @param {object} result - result from casFetchRow(rows and schema)\r\n * @param {object} appEnv - app Environment from setup\r\n * @returns {promise}     - {columns: eColumns, rowsObject: newRows}\r\n */\r\nasync function prepFormData (result, appEnv) {\r\n  const { schema, rows } = result;\r\n  const customColumns = appEnv.appControl.dataControl.customColumns;\r\n\r\n  const makeRowObject = (columns, row) => {\r\n    const rowObj = {};\r\n    row.forEach((r, i) => {\r\n      const s = columns[i];\r\n      const name = s.Column.toLowerCase();\r\n      if (s.Label == null) {\r\n        s.Label = s.Column;\r\n      }\r\n      rowObj[name] = r;\r\n    });\r\n\r\n    if (customColumns != null) {\r\n      for (const k in customColumns) {\r\n        const c = customColumns[k];\r\n        const name = c.Column.toLowerCase();\r\n        rowObj[name] = c.value;\r\n      }\r\n    }\r\n    return rowObj;\r\n  };\r\n\r\n  const newRows = [];\r\n  for (let i = 0; i < rows.length; i++) {\r\n    const t = makeRowObject(schema, rows[i]);\r\n\r\n    const [t1, status] = await commonHandler('init', t, i, appEnv);\r\n\r\n    if (status.code !== 0) {\r\n      console.log(JSON.stringify(status, null, 4));\r\n    }\r\n    newRows.push(t1);\r\n  };\r\n\r\n  // extend column and make it an object\r\n  const eColumns = {};\r\n  schema.forEach((s, i) => {\r\n    const name = s.Column.toLowerCase();\r\n    s.name = name;\r\n    s.Label = (s.Label == null || s.Label.length === 0) ? s.Column : s.Label;\r\n    s.custom = false;\r\n    eColumns[name] = s;\r\n  });\r\n\r\n  // add computed columns to the array.\r\n  if (customColumns != null) {\r\n    for (const k in customColumns) {\r\n      const c = { ...customColumns[k] };\r\n      c.name = k;\r\n      c.custom = true;\r\n      eColumns[k] = c;\r\n    }\r\n  }\r\n\r\n  return {\r\n    columns: eColumns,\r\n    data   : newRows\r\n  };\r\n}\r\nexport default prepFormData;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { casFetchRows } from '@sassoftware/restaflib';\r\nimport prepFormData from './prepFormData';\r\n/**\r\n * @description Fetch new records based on control argument\r\n * @async\r\n * @module fetchTableRows\r\n * @category restafedit/core\r\n * @param {fetchControl} control - info for records to retrieve\r\n * @param {appEnv} appEnv - appEnv\r\n * @returns {promise}  - { data:data, columns:ecolumns, pagination: pagination}\r\n * @example\r\n *   let control = {from: 10, count:50, format: false};\r\n *   let r = await fetchTableRows(control, appEnv);\r\n *   r is a fetchResult object\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function fetchTableRows (control, appEnv) {\r\n  const { store, session } = appEnv;\r\n\r\n  // eslint-disable-next-line no-useless-catch\r\n  const c = { ...control };\r\n  if (c.table == null) {\r\n    c.table = appEnv.appControl.dataControl.table;\r\n  }\r\n  if (c.where == null) {\r\n    c.where = {};\r\n  }\r\n  if (c.from <= 0 || c.next === -1) {\r\n    return null;\r\n  }\r\n  const r = await casFetchRows(store, session, c);\r\n  const t = await prepFormData(r.data, appEnv);\r\n\r\n  appEnv.state = {\r\n    modified   : [],\r\n    pagination : { ...r.pagination },\r\n    currentPage: c,\r\n    data       : [],\r\n    columns    : []\r\n  };\r\n\r\n  if (appEnv.appControl.dataControl.cachePolicy === true) {\r\n    appEnv.state.data = t.data;\r\n    appEnv.state.columns = t.columns;\r\n  }\r\n\r\n  t.pagination = { ...r.pagination };\r\n  return t;\r\n}\r\nexport default fetchTableRows;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport fetchTableRows from './fetchTableRows';\r\nimport { computeFetchData } from '@sassoftware/restaflib';\r\nimport prepFormData from './prepFormData';\r\n/**\r\n * @description Simplify scrolling using next|prev|top\r\n * @async\r\n * @module scrollTable\r\n * @category restafedit/core\r\n * @param {string} direction direction(next|prev|first)\r\n * @param {appEnv} appEnv\r\n * @returns {promise}  result ready for display or null if it did not scroll\r\n * @example\r\n *  let r = await scrollTable('next', appEnv);\r\n *\r\n *  if ( r === null) {\r\n *     handle when no data was writtten\r\n *  } else {\r\n *     handle new data\r\n * }\r\n *\r\n * Make sure you handle exceptions that are thrown.\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function scrollTable (direction, appEnv) {\r\n  let fetchResults;\r\n  if (appEnv.source === 'cas') {\r\n    fetchResults = await icasScroll(direction, appEnv);\r\n  } else {\r\n    fetchResults = await icomputeScroll(direction, appEnv);\r\n  }\r\n  return fetchResults;\r\n}\r\n\r\nasync function icasScroll (direction, appEnv) {\r\n  const { initialFetch, table } = appEnv.appControl.dataControl;\r\n  let control;\r\n  if (direction === 'first') {\r\n    control = { ...initialFetch };\r\n    control.table = table;\r\n  } else {\r\n    control = appEnv.state.pagination[direction];\r\n    if (control.next === -1) {\r\n      return null;\r\n    }\r\n  }\r\n  const t = await fetchTableRows(control, appEnv);\r\n  return t;\r\n}\r\n\r\nasync function icomputeScroll (direction, appEnv) {\r\n  const { store, tableSummary } = appEnv;\r\n  const { table } = appEnv.appControl.dataControl;\r\n  debugger;\r\n  const tname = `${table.libref}.${table.name}`.toLowerCase();\r\n  debugger;\r\n  // eslint-disable-next-line prefer-const\r\n\r\n  const qs = { limit: appEnv.appControl.dataControl.initialFetch.count };\r\n  const data = await computeFetchData(store, tableSummary, tname, direction, qs);\r\n  debugger;\r\n  console.log(data);\r\n  debugger;\r\n  let result = null;\r\n  if (data !== null) {\r\n    result = await prepFormData(data, appEnv);\r\n    appEnv.state = {\r\n      modified   : [],\r\n      pagination : {},\r\n      currentPage: {},\r\n      data       : result.data,\r\n      columns    : result.columns\r\n    };\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nexport default scrollTable;\r\n","\r\nimport { initStore } from '@sassoftware/restaf';\r\nimport { casSetup, computeSetup, computeSetupTables } from '@sassoftware/restaflib';\r\n\r\n/**\r\n * @description Setup an Edit session\r\n * @async\r\n * @module setup\r\n * @category restafedit/core\r\n * @param {logonPayload} logonPayload  - information for connecting to Viya\r\n * @param {appControl} appControl      - control information\r\n *\r\n * @returns {promise}  returns appEnv to control the flow\r\n * @alias module: setup\r\n * @example\r\n *  const appEnv = await setup(logonPayload, appControl);\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n *\r\n */\r\n\r\nasync function setup (logonPayload, appControl) {\r\n  const store = initStore();\r\n  let appEnv;\r\n  if (logonPayload.authType == null) {\r\n    logonPayload.authType = 'code';\r\n  }\r\n  const dataControl = appControl.dataControl;\r\n  if (dataControl.source === 'cas') {\r\n    const r = await casSetup(store, logonPayload);\r\n    appEnv = {\r\n      source: dataControl.source,\r\n\r\n      store,\r\n      session  : r.session,\r\n      servers  : r.servers,\r\n      restaflib: null,\r\n      logonPayload,\r\n\r\n      state: {\r\n        modified   : [],\r\n        pagination : {},\r\n        currentPage: {},\r\n        data       : {},\r\n        columns    : {}\r\n      }\r\n    };\r\n  } else {\r\n    debugger;\r\n    const session = await computeSetup(store, null, logonPayload);\r\n    debugger;\r\n    const tableSummary = await computeSetupTables(store, session, dataControl.table);\r\n    debugger;\r\n    appEnv = {\r\n      store,\r\n      session,\r\n      tableSummary,\r\n\r\n      servers  : null,\r\n      restaflib: null,\r\n      logonPayload,\r\n\r\n      state: {\r\n        modified   : [],\r\n        pagination : {},\r\n        currentPage: {},\r\n\r\n        data   : {},\r\n        columns: {}\r\n      }\r\n    };\r\n  };\r\n\r\n  appEnv.appControl = appControl;\r\n  appEnv.id = Date(); /* just assign a new id - placeholder */\r\n  return appEnv;\r\n}\r\nexport default setup;\r\n"],"names":["commonHandler","type","data","rowIndex","appEnv","appControl","editControl","handlers","Promise","resolve","statusCode","msg","_ref","e","reject","result","source","iupdateCasTable","store","session","dataControl","table","byvars","_appEnv$appControl$da2","columns","state","t","length","k","custom","w","forEach","casUpdateData","where","then","_iupdateCasTable","iupdateComputeTable","_appEnv$appControl$da","libref","name","set","comma","value2String","andBit","asrc","src","split","console","log","payload","code","apiCall","links","job","jobState","qs","newState","timeout","status","_iupdateComputeTable","_temp2","value","JSON","stringify","toString","cellEdit","_exit3","newDataRow","r","_exit2","_result2","cachePolicy","_temp","autoSave","_commonHandler","updateTableRows","_appEnv$appControl$ed","f","svalue","Type","parseFloat","isNaN","text2Float","_temp6","_temp5","_settle","pact","s","_Pact","o","bind","v","observer","_temp3","eColumns","schema","i","Column","toLowerCase","Label","customColumns","c","newRows","rows","_temp4","array","body","row","rowObj","makeRowObject","t1","push","thenable","_cycle","prototype","onFulfilled","onRejected","this","callback","_this","fetchTableRows","control","from","next","casFetchRows","prepFormData","modified","pagination","currentPage","direction","fetchResults","initialFetch","icasScroll","icomputeScroll","tableSummary","tname","computeFetchData","limit","count","_prepFormData","_icomputeScroll","setup","logonPayload","id","Date","initStore","authType","casSetup","servers","restaflib","computeSetup","computeSetupTables"],"mappings":"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"}