{"version":3,"file":"index.modern.mjs","sources":["../src/commonHandler.js","../src/updateTableRows.js","../src/cellEdit.js","../src/text2Float.js","../src/prepFormData.js","../src/fetchTableRows.js","../src/scrollTable.js","../src/setup.js","../src/distinctValues.js","../src/casTableUnique.js","../src/sasTableUnique.js","../src/sort.js"],"sourcesContent":["/*\r\n * Copyright © 2022, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n/**\r\n * @description Run init, main or term handlers\r\n * @async\r\n * @module commonHandler\r\n * @category restafedit/core\r\n * @param {string} type   - type of exit (init|main|term)\r\n * @param {rowObject} data        - rowObject\r\n * @param {number} rowIndex    - client-side Row Index\r\n * @param {appEnv} appEnv      - app Environment from setup\r\n * @returns {promise}     - [data, status]\r\n * @example\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function commonHandler (type, data, rowIndex, appEnv) {\r\n  const { handlers } = appEnv.appControl.editControl;\r\n  if (handlers[type] == null) {\r\n    return [data, { statusCode: 0, msg: null }];\r\n  } else {\r\n    const [newDataRow, status] = await handlers[type](data, rowIndex, appEnv, type);\r\n    return [newDataRow, status];\r\n  }\r\n};\r\nexport default commonHandler;\r\n","import { casUpdateData } from '@sassoftware/restaflib';\r\n/**\r\n * @description Update the row on the server\r\n * @async\r\n * @module updateTableRows\r\n * @category restafedit/core\r\n * @param {rowObject} data  - data as a rowObject\r\n * @param {appEnv} appEnv   - app Environment object from setup\r\n * @returns {promise}       - key is completion code\r\n * @example\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function updateTableRows (data, appEnv) {\r\n  let result;\r\n  if (appEnv.source === 'cas') {\r\n    result = await iupdateCasTable(data, appEnv);\r\n  } else {\r\n    result = await iupdateComputeTable(data, appEnv);\r\n  }\r\n  return result;\r\n}\r\n\r\nasync function iupdateCasTable (data, appEnv) {\r\n  const { store, session } = appEnv;\r\n  const { table, byvars } = appEnv.appControl;\r\n  const columns = appEnv.state.columns;\r\n\r\n  if (byvars === null || byvars.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  const t = {};\r\n  for (const k in data) {\r\n    if (k !== '_index_' && columns[k].custom === false) {\r\n      t[k] = data[k];\r\n    };\r\n  };\r\n\r\n  const w = {};\r\n  byvars.forEach((k) => {\r\n    w[k] = t[k];\r\n  });\r\n  const payload = {\r\n    table,\r\n    data : t,\r\n    where: w\r\n  };\r\n\r\n  const result = await casUpdateData(store, session, payload);\r\n  const r = result.items().toJS();\r\n  const status = { statusCode: 0, msg: 'Save successful' };\r\n\r\n  if (r.disposition.severity !== 'Normal') {\r\n    status.statusCode = 2;\r\n    status.msg = t.disposition.severity.reason;\r\n  };\r\n  return status;\r\n}\r\n\r\nasync function iupdateComputeTable (data, appEnv) {\r\n  const { store, session } = appEnv;\r\n  const { table, byvars } = appEnv.appControl;\r\n  const columns = appEnv.state.columns;\r\n  ;\r\n\r\n  if (byvars === null || byvars.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  let src =\r\n    `proc sql; update ${table.libref}.${table.name}`;\r\n  let set = 'SET ';\r\n  let comma = ' ';\r\n  for (const k in data) {\r\n    if (columns[k].custom === false) {\r\n      set = set + comma + k + '=' + value2String(data[k]);\r\n    }\r\n    comma = ', ';\r\n  };\r\n  src = src + ' ' + set;\r\n  let w = ' WHERE ';\r\n  let andBit = ' ';\r\n\r\n  byvars.forEach((k) => {\r\n    w = w + andBit + k + '=' + value2String(data[k]);\r\n    andBit = 'AND ';\r\n  });\r\n  src = src + ' ' + w + ';run;';\r\n  const asrc = src.split(/\\r?\\n/);\r\n\r\n  const payload = {\r\n    data: { code: asrc }\r\n  };\r\n\r\n  // console.log(asrc);\r\n\r\n  const job = await store.apiCall(session.links('execute'), payload);\r\n  const qs = {\r\n    qs: {\r\n      newState: 'Completed',\r\n      timeout : 1\r\n    }\r\n  };\r\n\r\n  // eslint-disable-next-line no-unused-vars\r\n  const status = await store.jobState(job, qs);\r\n  const c = (status.data === 'completed' ? 0 : 1);\r\n\r\n  return { statusCode: c, msg: status.data };\r\n}\r\n\r\nfunction value2String (value) {\r\n  let valueString;\r\n  if (value == null) {\r\n    valueString = '.';\r\n  } else if (typeof value === 'string') {\r\n    valueString = JSON.stringify(value);\r\n  } else {\r\n    valueString = value.toString();\r\n  }\r\n  return valueString;\r\n}\r\n\r\nexport default updateTableRows;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport text2Float from './text2Float';\r\nimport commonHandler from './commonHandler';\r\nimport updateTableRows from './updateTableRows';\r\n\r\n/**\r\n * @description Process edit of a cell and optionally save the data\r\n * @async\r\n * @module cellEdit\r\n * @category restafedit/core\r\n * @param {string} name     - name of the field (lower case)\r\n * @param {*} value         - the new value for name field\r\n * @param {number} rowIndex - row Index ( index in the data array on client)\r\n * @param {rowObject} data  - RowObject for the entire row prior to change\r\n * @param {appEnv} appEnv   - app Environment from setup\r\n * @returns {promise}       - {data: updated data, status: status }\r\n * @example\r\n * data schema {column1: value, column2, value,...}\r\n * status schema {statusCode: 0|1|2, msg: some string}\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function cellEdit (name, value, rowIndex, data, appEnv) {\r\n  /* do not modify the data directly. caller will probably do a setState */\r\n  let newDataRow = (data !== null) ? { ...data } : { ...appEnv.state.data[rowIndex] };\r\n  const columns = appEnv.state.columns;\r\n  const { handlers, autoSave } = appEnv.appControl.editControl;\r\n\r\n  newDataRow[name] = text2Float(value, columns[name]);\r\n  let status = { statusCode: 0, msg: '' };\r\n\r\n  if (handlers[name] != null) {\r\n    const r = await handlers[name](newDataRow, name, rowIndex, appEnv);\r\n    newDataRow = r[0];\r\n    status = r[1];\r\n    if (status.statusCode === 2) {\r\n      return { data: r[0], status };\r\n    }\r\n  }\r\n  let r = await commonHandler('main', newDataRow, rowIndex, appEnv);\r\n  if (autoSave === true) {\r\n    r = await commonHandler('term', r[0], rowIndex, appEnv);\r\n    status = r[1];\r\n    if (status.statusCode === 2) {\r\n      return { data: r[0], status };\r\n    }\r\n    status = await updateTableRows(r[0], appEnv);\r\n  }\r\n  newDataRow = r[0];\r\n\r\n  if (appEnv.appControl.cachePolicy === true) {\r\n    appEnv.state.data[rowIndex] = newDataRow;\r\n  }\r\n\r\n  return ({ data: newDataRow, status });\r\n}\r\nexport default cellEdit;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nfunction text2Float (value, f) {\r\n  let svalue = value;\r\n  const t = f.Type.toLowerCase();\r\n  if (typeof svalue === 'string' && (t === 'decimal' || t === 'number' || t === 'double' || t === 'float')) {\r\n    svalue = parseFloat(value * 1.0);\r\n    if (isNaN(value) === true) {\r\n      value = 0;\r\n    }\r\n  }\r\n  return svalue;\r\n}\r\nexport default text2Float;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/*\r\n* output\r\n* extended columns and data ready for use in dataform and table\r\n*/\r\nimport commonHandler from './commonHandler';\r\n/**\r\n * @description reduce fetch results\r\n * @private\r\n * @async\r\n * @module prepFormData\r\n * @param {object} result - result from casFetchRow(rows and schema)\r\n * @param {object} appEnv - app Environment from setup\r\n * @returns {promise}     - {columns: eColumns, rowsObject: newRows}\r\n */\r\nasync function prepFormData (result, appEnv) {\r\n  const { schema, rows } = result;\r\n  const customColumns = appEnv.appControl.customColumns;\r\n  let status = { statusCode: 0, msg: 'Initialization was successful' };\r\n\r\n  const makeRowObject = (columns, row) => {\r\n    const rowObj = {};\r\n    row.forEach((r, i) => {\r\n      const s = columns[i];\r\n      const name = s.Column.toLowerCase();\r\n      /*\r\n      if (s.Label == null) {\r\n        s.Label = (s.label == null) ? s.Column : s.label;\r\n      }\r\n      if (s.Label == null) {\r\n        s.Label = s.Column;\r\n      }\r\n      */\r\n      rowObj[name] = r;\r\n    });\r\n\r\n    if (customColumns != null) {\r\n      for (const k in customColumns) {\r\n        const c = customColumns[k];\r\n        const name = c.Column.toLowerCase();\r\n        rowObj[name] = c.value;\r\n      }\r\n    }\r\n    return rowObj;\r\n  };\r\n\r\n  const newRows = [];\r\n  for (let i = 0; i < rows.length; i++) {\r\n    const t = makeRowObject(schema, rows[i]);\r\n\r\n    const [t1, statusi] = await commonHandler('init', t, i, appEnv);\r\n    status = statusi;\r\n    newRows.push(t1);\r\n  };\r\n\r\n  // extend column and make it an object\r\n  const eColumns = {};\r\n  schema.forEach((s, i) => {\r\n    const name = s.Column.toLowerCase();\r\n    s.name = name;\r\n    s.Label = (s.Label == null || s.Label.length === 0) ? s.Column : s.Label;\r\n    if (s.Type == null) {\r\n      s.Type = (s.type == null) ? 'double' : s.type;\r\n    }\r\n    s.custom = false;\r\n    eColumns[name] = s;\r\n  });\r\n\r\n  // add computed columns to the array.\r\n  if (customColumns != null) {\r\n    for (const k in customColumns) {\r\n      const c = { ...customColumns[k] };\r\n      c.name = k;\r\n      c.custom = true;\r\n      eColumns[k] = c;\r\n    }\r\n  }\r\n\r\n  return {\r\n    columns: eColumns,\r\n    data   : newRows,\r\n    status\r\n  };\r\n}\r\nexport default prepFormData;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport { casFetchRows, computeFetchData } from '@sassoftware/restaflib';\r\n\r\nimport prepFormData from './prepFormData';\r\n/**\r\n * @description Fetch new records based on control argument\r\n * @async\r\n * @private\r\n * @module fetchTableRows\r\n * @category restafedit/core\r\n * @param {fetchControl} control - info for records to retrieve\r\n * @param {appEnv} appEnv - appEnv\r\n * @returns {promise}  - { data:data, columns:ecolumns, pagination: pagination}\r\n * @example\r\n *   let control = {from: 10, count:50, format: false};\r\n *   let r = await fetchTableRows(control, appEnv);\r\n *   r is a fetchResult object\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function fetchTableRows (control, appEnv) {\r\n  let result = null;\r\n  if (appEnv.source === 'cas') {\r\n    result = await icasRows(control, appEnv);\r\n  } else {\r\n    result = await icomputeRows(control, appEnv);\r\n  }\r\n  return result;\r\n}\r\n\r\nasync function icasRows (control, appEnv) {\r\n  const { store, session } = appEnv;\r\n  const c = { ...control };\r\n  if (c.from <= 0 || c.next === -1) {\r\n    return null;\r\n  }\r\n  debugger;\r\n  if (c.where == null) {\r\n    c.where = ' ';\r\n  }\r\n  const r = await casFetchRows(store, session, c);\r\n\r\n  let t = null;\r\n  if (r !== null) {\r\n    t = await prepFormData(r.data, appEnv);\r\n\r\n    appEnv.state = {\r\n      modified   : [],\r\n      pagination : { ...r.pagination },\r\n      currentPage: c,\r\n      data       : [],\r\n      columns    : []\r\n    };\r\n    if (appEnv.appControl.cachePolicy === true) {\r\n      appEnv.state.data = t.data;\r\n      appEnv.state.columns = t.columns;\r\n    }\r\n    t.pagination = { ...r.pagination };\r\n  }\r\n  return t;\r\n}\r\n\r\nasync function icomputeRows (control, appEnv) {\r\n  const { store, tableSummary } = appEnv;\r\n  const { table } = appEnv.appControl;\r\n  const tname = `${table.libref}.${table.name}`.toLowerCase();\r\n  // eslint-disable-next-line prefer-const\r\n  let payload = {\r\n    qs: {\r\n      start : control.from - 1,\r\n      limit : control.count,\r\n      format: (control.format != null) ? false : control.format\r\n    }\r\n  };\r\n  const data = await computeFetchData(store, tableSummary, tname, null, payload);\r\n  ;\r\n\r\n  let result = null;\r\n  if (data !== null) {\r\n    result = await prepFormData(data, appEnv);\r\n    appEnv.state = {\r\n      modified   : [],\r\n      pagination : {},\r\n      currentPage: {},\r\n      data       : result.data,\r\n      columns    : result.columns\r\n    };\r\n  }\r\n  return result;\r\n}\r\nexport default fetchTableRows;\r\n","/*\r\n * Copyright © 2019, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n// import fetchTableRows from './fetchTableRows';\r\nimport { computeFetchData, casFetchRows } from '@sassoftware/restaflib';\r\nimport prepFormData from './prepFormData';\r\n/**\r\n * @description Simplify scrolling using next|prev|top\r\n * @async\r\n * @module scrollTable\r\n * @category restafedit/core\r\n * @param {string} direction direction(next|prev|first)\r\n * @param {appEnv} appEnv\r\n * @param {object=} payload  override pogination with custom scrolling\r\n * @returns {promise}  result ready for display or null if it did not scroll\r\n * @example\r\n *  let r = await scrollTable('next', appEnv);\r\n *\r\n *  if ( r === null) {\r\n *     handle when no data was writtten\r\n *  } else {\r\n *     handle new data\r\n * }\r\n *\r\n * Make sure you handle exceptions that are thrown.\r\n *\r\n * For custom scrolling, pass the scrolling information in the optional third parameter.\r\n * The content of the payload depends on whether the source is cas or compute.\r\n * For compute see the documentation for rowset in compute service.<https://developer.sas.com/apis/rest/Compute/#get-a-row-set-from-a-data-set>\r\n * CAS payload is not as rich the rowset for compute service\r\n * The payload for CAS is as follows\r\n *  { start: <number>\r\n *    count: <number>\r\n *    format: true|false,\r\n *    where: <where string>\r\n * };\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n */\r\nasync function scrollTable (direction, appEnv, payload) {\r\n  let fetchResults;\r\n  if (appEnv.source === 'cas') {\r\n    fetchResults = await icasScroll(direction, appEnv, payload);\r\n  } else {\r\n    fetchResults = await icomputeScroll(direction, appEnv, payload);\r\n  }\r\n  return fetchResults;\r\n}\r\n\r\nasync function icasScroll (direction, appEnv, payload) {\r\n  const { store, session } = appEnv;\r\n  const { initialFetch, table } = appEnv.appControl;\r\n  let control;\r\n\r\n  if (direction === 'first') {\r\n    control = { ...initialFetch };\r\n  } else if (direction !== null) {\r\n    control = { ...appEnv.state.pagination[direction] };\r\n    if (control.next === -1 || control.from <= 0) {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  if (payload != null) {\r\n    control = { ...payload };\r\n  }\r\n\r\n  control.table = table;\r\n  debugger;\r\n  const r = await casFetchRows(store, session, control);\r\n\r\n  let t = null;\r\n  if (r !== null) {\r\n    t = await prepFormData(r.data, appEnv);\r\n    appEnv.state = {\r\n      modified   : [],\r\n      pagination : { ...r.pagination },\r\n      currentPage: control,\r\n      data       : [],\r\n      columns    : []\r\n    };\r\n    if (appEnv.appControl.cachePolicy === true) {\r\n      appEnv.state.data = t.data;\r\n      appEnv.state.columns = t.columns;\r\n    }\r\n    t.pagination = { ...r.pagination };\r\n    return t;\r\n  }\r\n}\r\n\r\nasync function icomputeScroll (direction, appEnv, payload) {\r\n  const { store, tableSummary } = appEnv;\r\n  const { table, initialFetch } = appEnv.appControl;\r\n  let control = null;\r\n\r\n  const tname = `${table.libref}.${table.name}`.toLowerCase();\r\n\r\n  if (payload == null) {\r\n    if (direction === 'first') {\r\n      control = { ...initialFetch };\r\n    }\r\n  } else {\r\n    control = { ...payload };\r\n  }\r\n\r\n  // eslint-disable-next-line prefer-const\r\n\r\n  const data = await computeFetchData(store, tableSummary, tname, direction, control);\r\n\r\n  let result = null;\r\n  if (data !== null) {\r\n    result = await prepFormData(data, appEnv);\r\n    appEnv.state = {\r\n      modified   : [],\r\n      pagination : {},\r\n      currentPage: {},\r\n      data       : result.data,\r\n      columns    : result.columns\r\n    };\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nexport default scrollTable;\r\n","/* eslint-disable prefer-const */\r\n\r\nimport { initStore } from '@sassoftware/restaf';\r\nimport { casSetup, computeSetup, computeSetupTables } from '@sassoftware/restaflib';\r\nimport deepmerge from 'deepmerge';\r\n\r\n/**\r\n * @description Setup an Edit session\r\n * @async\r\n * @module setup\r\n * @category restafedit/core\r\n * @param {logonPayload} logonPayload  - information for connecting to Viya\r\n * @param {appControl} appControl      - control information\r\n *\r\n * @returns {promise}  returns appEnv to control the flow\r\n * @alias module: setup\r\n * @example\r\n *  const appEnv = await setup(logonPayload, appControl);\r\n *\r\n * Please see the restafeditExample in the Tutorial pulldown\r\n *\r\n */\r\n\r\nasync function setup (logonPayload, appControl, preamble) {\r\n  const store = initStore();\r\n  let appEnv;\r\n  if (logonPayload.authType == null) {\r\n    logonPayload.authType = 'code';\r\n  }\r\n  if (appControl.source === 'cas') {\r\n    appEnv = await icasSetup(store, logonPayload, appControl);\r\n  } else {\r\n    appEnv = await icomputeSetup(store, logonPayload, appControl, preamble);\r\n  }\r\n  return appEnv;\r\n}\r\n\r\nasync function icasSetup (store, logonPayload, appControl) {\r\n  const r = await casSetup(store, logonPayload);\r\n  let appEnv = {\r\n    source: appControl.source,\r\n\r\n    store,\r\n    session  : r.session,\r\n    servers  : r.servers,\r\n    restaflib: null,\r\n    logonPayload,\r\n    appControl,\r\n\r\n    state: {\r\n      modified   : [],\r\n      pagination : {},\r\n      currentPage: {},\r\n\r\n      data   : {},\r\n      columns: {}\r\n    },\r\n\r\n    id: Date()\r\n  };\r\n  return appEnv;\r\n};\r\n\r\nasync function icomputeSetup (store, logonPayload, appControl, preamble) {\r\n  // eslint-disable-next-line prefer-const\r\n  ;\r\n  let session = await computeSetup(store, appControl.computeContext, logonPayload);\r\n  let tableSummary = await computeSetupTables(store, session, appControl.table, preamble);\r\n  let appEnv = {\r\n    source: appControl.source,\r\n\r\n    store,\r\n    session,\r\n    tableSummary,\r\n\r\n    servers  : null,\r\n    restaflib: null,\r\n\r\n    logonPayload,\r\n    appControl: deepmerge(appControl),\r\n\r\n    state: {\r\n      modified   : [],\r\n      pagination : {},\r\n      currentPage: {},\r\n\r\n      data   : {},\r\n      columns: {}\r\n    },\r\n\r\n    id: Date()\r\n  };\r\n  return appEnv;\r\n}\r\n\r\nexport default setup;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\nimport casTableUnique from './casTableUnique';\r\nimport sasTableUnique from './sasTableUnique';\r\n\r\n/**\r\n * @description Get unique values for a specific column\r\n * @async\r\n * @module distinctValues\r\n * @category restafedit/core\r\n * @param {string} columnName    column name\r\n * @param {appEnv} appEnv   - app Environment from setup\r\n * @returns {promise}       - {an array of unique values }\r\n * @example\r\n *  let selectList = await distinctValues('company', appEnv))\r\n *  This is useful to get a list of unique values for selected columns.\r\n *  {company:['IBM', 'Microsoft', 'SAS'] }\r\n */\r\n\r\nasync function distinctValues (columnName, appEnv, payload) {\r\n  let data;\r\n  if (appEnv.source === 'cas') {\r\n    data = await casTableUnique(columnName, appEnv, payload);\r\n  } else {\r\n    data = await sasTableUnique(columnName, appEnv, payload);\r\n  }\r\n  return data;\r\n};\r\nexport default distinctValues;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\nimport { caslRun } from '@sassoftware/restaflib';\r\n\r\n/**\r\n * @description Get unique values for a specific column\r\n * @async\r\n * @private\r\n * @module casTableUnique\r\n * @category restafedit/core\r\n * @param {string} columnName    column name\r\n * @param {appEnv} appEnv   app Environment from setup\r\n * @returns {promise}       {an array of unique values }\r\n * @example\r\n *  let selectList = await casTableUnique('company, appEnv))\r\n *  This is useful to get a list of unique values for selected columns.\r\n *  {columnName:[ array of unquew values] }\r\n */\r\n\r\nasync function casTableUnique (columnName, appEnv, payload) {\r\n  const { store, session } = appEnv;\r\n\r\n  const src = `\r\n  results = selectionLists(_args_.column,_args_.table.caslib, _args_.table.name);\r\n  send_response({casResults = {data=results}});\r\n  `\r\n  ;\r\n  const args = {\r\n    table : appEnv.appControl.table,\r\n    column: columnName\r\n  };\r\n\r\n  const result = await caslRun(store, session, src, args, true);\r\n  if (result.results.casResults.data.statusCode !== 0) {\r\n    // eslint-disable-next-line no-throw-literal\r\n    throw 'Failed to create unique list';\r\n  }\r\n\r\n  const data = result.results.casResults.data.data;\r\n\r\n  return data;\r\n};\r\nexport default casTableUnique;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @description Get unique values for a specific column(sas table)\r\n * @async\r\n * @private\r\n * @module sasTableUnique\r\n * @category restafedit/core\r\n * @param {string} columnName    column name\r\n * @param {appEnv} appEnv   app Environment from setup\r\n * @returns {promise}       {an array of unique values }\r\n * @example\r\n *  let selectList = await casTableUnique('company, appEnv))\r\n *  This is useful to get a list of unique values for selected columns.\r\n *  {columnName:[ array of unquew values] }\r\n */\r\n\r\nasync function sasTableUnique (columnName, appEnv, payload) {\r\n  const data = {};\r\n  data[columnName] = [];\r\n  return data;\r\n};\r\nexport default sasTableUnique;\r\n","/*\r\n * Copyright © 2021, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.\r\n * SPDX-License-Identifier: Apache-2.0\r\n */\r\n\r\n/**\r\n * @description sort data for seelected column\r\n * @async\r\n * @module sort\r\n * @private\r\n * @category restafedit/core\r\n * @param {string} columnName    column name\r\n * @param {string} direction  A|D   (A=ascending, B=descending)\r\n * @param {array}  data if null, the data cached in appEnv will be used.\r\n * @param {appEnv} appEnv   - app Environment from setup\r\n * @returns {promise}       returns the sorted array\r\n * @example\r\n *  let status = await distinctValues('company', appEnv))\r\n *  This is useful to get a list of unique values for selected columns.\r\n *  {company:['IBM', 'Microsoft', 'SAS'] }\r\n */\r\n\r\nasync function sort (columnName, appEnv, payload) {\r\n  return [];\r\n};\r\nexport default sort;\r\n"],"names":["async","type","data","rowIndex","appEnv","handlers","appControl","editControl","statusCode","msg","newDataRow","status","updateTableRows","result","source","store","session","table","byvars","columns","state","length","t","k","custom","w","forEach","payload","where","casUpdateData","items","toJS","disposition","severity","reason","iupdateCasTable","libref","name","set","comma","value2String","src","andBit","code","split","job","apiCall","links","jobState","qs","newState","timeout","iupdateComputeTable","value","valueString","JSON","stringify","toString","cellEdit","autoSave","f","svalue","Type","toLowerCase","parseFloat","isNaN","text2Float","r","commonHandler","cachePolicy","prepFormData","schema","rows","customColumns","makeRowObject","row","rowObj","i","Column","c","t1","statusi","newRows","push","eColumns","s","Label","control","_extends","from","next","modified","pagination","currentPage","tableSummary","start","limit","count","format","tname","icomputeRows","scrollTable","direction","fetchResults","initialFetch","casFetchRows","icasScroll","computeFetchData","icomputeScroll","setup","logonPayload","preamble","initStore","authType","servers","restaflib","id","Date","icasSetup","computeSetup","computeContext","computeSetupTables","deepmerge","icomputeSetup","distinctValues","columnName","args","column","results","casResults","casTableUnique","sasTableUnique","sort"],"mappings":"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"}